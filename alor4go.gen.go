// Package alor4go provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20221217010859-ab90f1927bc5 DO NOT EDIT.
package alor4go

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AlltradeSide.
const (
	AlltradeSideBuy  AlltradeSide = "buy"
	AlltradeSideSell AlltradeSide = "sell"
)

// Defines values for BodyrequestOrdersActionsLimitTVSide.
const (
	BodyrequestOrdersActionsLimitTVSideBuy  BodyrequestOrdersActionsLimitTVSide = "buy"
	BodyrequestOrdersActionsLimitTVSideSell BodyrequestOrdersActionsLimitTVSide = "sell"
)

// Defines values for BodyrequestOrdersActionsLimitTVputSide.
const (
	BodyrequestOrdersActionsLimitTVputSideBuy  BodyrequestOrdersActionsLimitTVputSide = "buy"
	BodyrequestOrdersActionsLimitTVputSideSell BodyrequestOrdersActionsLimitTVputSide = "sell"
)

// Defines values for BodyrequestOrdersActionsMarketTVSide.
const (
	BodyrequestOrdersActionsMarketTVSideBuy  BodyrequestOrdersActionsMarketTVSide = "buy"
	BodyrequestOrdersActionsMarketTVSideSell BodyrequestOrdersActionsMarketTVSide = "sell"
)

// Defines values for BodyrequestOrdersActionsMarketTVputSide.
const (
	BodyrequestOrdersActionsMarketTVputSideBuy  BodyrequestOrdersActionsMarketTVputSide = "buy"
	BodyrequestOrdersActionsMarketTVputSideSell BodyrequestOrdersActionsMarketTVputSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopSide.
const (
	BodyrequestOrdersActionsStopSideBuy  BodyrequestOrdersActionsStopSide = "buy"
	BodyrequestOrdersActionsStopSideSell BodyrequestOrdersActionsStopSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopLimitTVWarpSide.
const (
	BodyrequestOrdersActionsStopLimitTVWarpSideBuy  BodyrequestOrdersActionsStopLimitTVWarpSide = "buy"
	BodyrequestOrdersActionsStopLimitTVWarpSideSell BodyrequestOrdersActionsStopLimitTVWarpSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopMarketTVWarpSide.
const (
	BodyrequestOrdersActionsStopMarketTVWarpSideBuy  BodyrequestOrdersActionsStopMarketTVWarpSide = "buy"
	BodyrequestOrdersActionsStopMarketTVWarpSideSell BodyrequestOrdersActionsStopMarketTVWarpSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStoplimitSide.
const (
	BodyrequestOrdersActionsStoplimitSideBuy  BodyrequestOrdersActionsStoplimitSide = "buy"
	BodyrequestOrdersActionsStoplimitSideSell BodyrequestOrdersActionsStoplimitSide = "sell"
)

// Defines values for OrderSide.
const (
	OrderSideBuy  OrderSide = "buy"
	OrderSideSell OrderSide = "sell"
)

// Defines values for OrderStatus.
const (
	OrderStatusCanceled OrderStatus = "canceled"
	OrderStatusFilled   OrderStatus = "filled"
	OrderStatusRejected OrderStatus = "rejected"
	OrderStatusWorking  OrderStatus = "working"
)

// Defines values for OrderType.
const (
	Limit  OrderType = "limit"
	Market OrderType = "market"
)

// Defines values for StoporderSide.
const (
	StoporderSideBuy  StoporderSide = "buy"
	StoporderSideSell StoporderSide = "sell"
)

// Defines values for StoporderStatus.
const (
	StoporderStatusCanceled StoporderStatus = "canceled"
	StoporderStatusFilled   StoporderStatus = "filled"
	StoporderStatusRejected StoporderStatus = "rejected"
	StoporderStatusWorking  StoporderStatus = "working"
)

// Defines values for StoporderType.
const (
	StoporderTypeStop      StoporderType = "stop"
	StoporderTypeStoplimit StoporderType = "stoplimit"
)

// Defines values for StoporderWarpSide.
const (
	StoporderWarpSideBuy  StoporderWarpSide = "buy"
	StoporderWarpSideSell StoporderWarpSide = "sell"
)

// Defines values for StoporderWarpStatus.
const (
	Canceled StoporderWarpStatus = "canceled"
	Filled   StoporderWarpStatus = "filled"
	Rejected StoporderWarpStatus = "rejected"
	Working  StoporderWarpStatus = "working"
)

// Defines values for StoporderWarpType.
const (
	StoporderWarpTypeStop      StoporderWarpType = "stop"
	StoporderWarpTypeStoplimit StoporderWarpType = "stoplimit"
)

// Defines values for TradeSide.
const (
	Buy  TradeSide = "buy"
	Sell TradeSide = "sell"
)

// Defines values for WsReqAllTradesGetAndSubscribeExchange.
const (
	WsReqAllTradesGetAndSubscribeExchangeMOEX WsReqAllTradesGetAndSubscribeExchange = "MOEX"
	WsReqAllTradesGetAndSubscribeExchangeSPBX WsReqAllTradesGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqAllTradesGetAndSubscribeFormat.
const (
	WsReqAllTradesGetAndSubscribeFormatSimple WsReqAllTradesGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqAllTradesGetAndSubscribeOpcode.
const (
	AllTradesGetAndSubscribe WsReqAllTradesGetAndSubscribeOpcode = "AllTradesGetAndSubscribe"
)

// Defines values for WsReqBarsGetAndSubscribeExchange.
const (
	WsReqBarsGetAndSubscribeExchangeMOEX WsReqBarsGetAndSubscribeExchange = "MOEX"
	WsReqBarsGetAndSubscribeExchangeSPBX WsReqBarsGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqBarsGetAndSubscribeOpcode.
const (
	BarsGetAndSubscribe WsReqBarsGetAndSubscribeOpcode = "BarsGetAndSubscribe"
)

// Defines values for WsReqBarsGetAndSubscribeTf.
const (
	WsReqBarsGetAndSubscribeTfD     WsReqBarsGetAndSubscribeTf = "D"
	WsReqBarsGetAndSubscribeTfM     WsReqBarsGetAndSubscribeTf = "M"
	WsReqBarsGetAndSubscribeTfN15   WsReqBarsGetAndSubscribeTf = "15"
	WsReqBarsGetAndSubscribeTfN300  WsReqBarsGetAndSubscribeTf = "300"
	WsReqBarsGetAndSubscribeTfN3600 WsReqBarsGetAndSubscribeTf = "3600"
	WsReqBarsGetAndSubscribeTfN60   WsReqBarsGetAndSubscribeTf = "60"
	WsReqBarsGetAndSubscribeTfW     WsReqBarsGetAndSubscribeTf = "W"
	WsReqBarsGetAndSubscribeTfY     WsReqBarsGetAndSubscribeTf = "Y"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Exchange.
const (
	WsReqInstrumentsGetAndSubscribeV2ExchangeMOEX WsReqInstrumentsGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Format.
const (
	WsReqInstrumentsGetAndSubscribeV2FormatSimple WsReqInstrumentsGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Opcode.
const (
	InstrumentsGetAndSubscribeV2 WsReqInstrumentsGetAndSubscribeV2Opcode = "InstrumentsGetAndSubscribeV2"
)

// Defines values for WsReqOrderBookGetAndSubscribeExchange.
const (
	WsReqOrderBookGetAndSubscribeExchangeMOEX WsReqOrderBookGetAndSubscribeExchange = "MOEX"
	WsReqOrderBookGetAndSubscribeExchangeSPBX WsReqOrderBookGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqOrderBookGetAndSubscribeOpcode.
const (
	OrderBookGetAndSubscribe WsReqOrderBookGetAndSubscribeOpcode = "OrderBookGetAndSubscribe"
)

// Defines values for WsReqOrdersGetAndSubscribeExchange.
const (
	WsReqOrdersGetAndSubscribeExchangeMOEX WsReqOrdersGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqOrdersGetAndSubscribeFormat.
const (
	WsReqOrdersGetAndSubscribeFormatSimple WsReqOrdersGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqOrdersGetAndSubscribeOpcode.
const (
	OrdersGetAndSubscribeV2 WsReqOrdersGetAndSubscribeOpcode = "OrdersGetAndSubscribeV2"
)

// Defines values for WsReqPositionsGetAndSubscribeExchange.
const (
	WsReqPositionsGetAndSubscribeExchangeMOEX WsReqPositionsGetAndSubscribeExchange = "MOEX"
	WsReqPositionsGetAndSubscribeExchangeSPBX WsReqPositionsGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqPositionsGetAndSubscribeOpcode.
const (
	PositionsGetAndSubscribeV2 WsReqPositionsGetAndSubscribeOpcode = "PositionsGetAndSubscribeV2"
)

// Defines values for WsReqQuotesSubscribeExchange.
const (
	WsReqQuotesSubscribeExchangeMOEX WsReqQuotesSubscribeExchange = "MOEX"
	WsReqQuotesSubscribeExchangeSPBX WsReqQuotesSubscribeExchange = "SPBX"
)

// Defines values for WsReqRisksGetAndSubscribeExchange.
const (
	WsReqRisksGetAndSubscribeExchangeMOEX WsReqRisksGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqRisksGetAndSubscribeFormat.
const (
	WsReqRisksGetAndSubscribeFormatSimple WsReqRisksGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeExchange.
const (
	WsReqSpectraRisksGetAndSubscribeExchangeMOEX WsReqSpectraRisksGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeFormat.
const (
	WsReqSpectraRisksGetAndSubscribeFormatSimple WsReqSpectraRisksGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeOpcode.
const (
	SpectraRisksGetAndSubscribe WsReqSpectraRisksGetAndSubscribeOpcode = "SpectraRisksGetAndSubscribe"
)

// Defines values for WsReqStopOrdersGetAndSubscribeExchange.
const (
	WsReqStopOrdersGetAndSubscribeExchangeMOEX WsReqStopOrdersGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqStopOrdersGetAndSubscribeFormat.
const (
	WsReqStopOrdersGetAndSubscribeFormatSimple WsReqStopOrdersGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqStopOrdersGetAndSubscribeOpcode.
const (
	StopOrdersGetAndSubscribe WsReqStopOrdersGetAndSubscribeOpcode = "StopOrdersGetAndSubscribe"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Exchange.
const (
	WsReqStopOrdersGetAndSubscribeV2ExchangeMOEX WsReqStopOrdersGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Format.
const (
	WsReqStopOrdersGetAndSubscribeV2FormatSimple WsReqStopOrdersGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Opcode.
const (
	StopOrdersGetAndSubscribeV2 WsReqStopOrdersGetAndSubscribeV2Opcode = "StopOrdersGetAndSubscribeV2"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Exchange.
const (
	WsReqSummariesGetAndSubscribeV2ExchangeMOEX WsReqSummariesGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Format.
const (
	WsReqSummariesGetAndSubscribeV2FormatSimple WsReqSummariesGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Opcode.
const (
	SummariesGetAndSubscribeV2 WsReqSummariesGetAndSubscribeV2Opcode = "SummariesGetAndSubscribeV2"
)

// Defines values for WsReqTradesGetAndSubscribeExchange.
const (
	WsReqTradesGetAndSubscribeExchangeMOEX WsReqTradesGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqTradesGetAndSubscribeFormat.
const (
	WsReqTradesGetAndSubscribeFormatSimple WsReqTradesGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqTradesGetAndSubscribeOpcode.
const (
	TradesGetAndSubscribeV2 WsReqTradesGetAndSubscribeOpcode = "TradesGetAndSubscribeV2"
)

// Defines values for WsReqUnsubscribeOpcode.
const (
	Unsubscribe WsReqUnsubscribeOpcode = "unsubscribe"
)

// Defines values for CommandAPIv2clientordersdeleteParamsExchange.
const (
	CommandAPIv2clientordersdeleteParamsExchangeMOEX CommandAPIv2clientordersdeleteParamsExchange = "MOEX"
)

// Defines values for CommandAPIv2clientordersdeleteParamsStop.
const (
	CommandAPIv2clientordersdeleteParamsStopFalse CommandAPIv2clientordersdeleteParamsStop = "false"
	CommandAPIv2clientordersdeleteParamsStopTrue  CommandAPIv2clientordersdeleteParamsStop = "true"
)

// Defines values for CommandAPIv2clientordersdeleteParamsJsonResponse.
const (
	CommandAPIv2clientordersdeleteParamsJsonResponseFalse CommandAPIv2clientordersdeleteParamsJsonResponse = false
	CommandAPIv2clientordersdeleteParamsJsonResponseTrue  CommandAPIv2clientordersdeleteParamsJsonResponse = true
)

// Defines values for CommandAPIv2clientordersdeleteParamsFormat.
const (
	CommandAPIv2clientordersdeleteParamsFormatSimple CommandAPIv2clientordersdeleteParamsFormat = "Simple"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsExchange.
const (
	CommandAPIWarpv2clientordersdeleteParamsExchangeMOEX CommandAPIWarpv2clientordersdeleteParamsExchange = "MOEX"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsStop.
const (
	CommandAPIWarpv2clientordersdeleteParamsStopFalse CommandAPIWarpv2clientordersdeleteParamsStop = "false"
	CommandAPIWarpv2clientordersdeleteParamsStopTrue  CommandAPIWarpv2clientordersdeleteParamsStop = "true"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsJsonResponse.
const (
	CommandAPIWarpv2clientordersdeleteParamsJsonResponseFalse CommandAPIWarpv2clientordersdeleteParamsJsonResponse = false
	CommandAPIWarpv2clientordersdeleteParamsJsonResponseTrue  CommandAPIWarpv2clientordersdeleteParamsJsonResponse = true
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsFormat.
const (
	CommandAPIWarpv2clientordersdeleteParamsFormatSimple CommandAPIWarpv2clientordersdeleteParamsFormat = "Simple"
)

// Defines values for TradeStatsParamsFormat.
const (
	TradeStatsParamsFormatSimple TradeStatsParamsFormat = "Simple"
)

// Defines values for TradeStatsParamsExchange.
const (
	TradeStatsParamsExchangeMOEX TradeStatsParamsExchange = "MOEX"
	TradeStatsParamsExchangeSPBX TradeStatsParamsExchange = "SPBX"
)

// Defines values for TradeStatsBySymbolParamsFormat.
const (
	TradeStatsBySymbolParamsFormatSimple TradeStatsBySymbolParamsFormat = "Simple"
)

// Defines values for TradeStatsBySymbolParamsExchange.
const (
	TradeStatsBySymbolParamsExchangeMOEX TradeStatsBySymbolParamsExchange = "MOEX"
	TradeStatsBySymbolParamsExchangeSPBX TradeStatsBySymbolParamsExchange = "SPBX"
)

// Defines values for FortsriskParamsFormat.
const (
	FortsriskParamsFormatSimple FortsriskParamsFormat = "Simple"
)

// Defines values for FortsriskParamsExchange.
const (
	FortsriskParamsExchangeMOEX FortsriskParamsExchange = "MOEX"
)

// Defines values for DevGetAllPositionsParamsFormat.
const (
	DevGetAllPositionsParamsFormatSimple DevGetAllPositionsParamsFormat = "Simple"
)

// Defines values for DevGetAllPositionsParamsWithoutCurrency.
const (
	DevGetAllPositionsParamsWithoutCurrencyFalse DevGetAllPositionsParamsWithoutCurrency = false
	DevGetAllPositionsParamsWithoutCurrencyTrue  DevGetAllPositionsParamsWithoutCurrency = true
)

// Defines values for DevGetAllPositionsParamsExchange.
const (
	DevGetAllPositionsParamsExchangeMOEX DevGetAllPositionsParamsExchange = "MOEX"
	DevGetAllPositionsParamsExchangeSPBX DevGetAllPositionsParamsExchange = "SPBX"
)

// Defines values for DevGetOnePositionParamsFormat.
const (
	DevGetOnePositionParamsFormatSimple DevGetOnePositionParamsFormat = "Simple"
)

// Defines values for DevGetOnePositionParamsExchange.
const (
	DevGetOnePositionParamsExchangeMOEX DevGetOnePositionParamsExchange = "MOEX"
	DevGetOnePositionParamsExchangeSPBX DevGetOnePositionParamsExchange = "SPBX"
)

// Defines values for RiskParamsFormat.
const (
	RiskParamsFormatSimple RiskParamsFormat = "Simple"
)

// Defines values for RiskParamsExchange.
const (
	RiskParamsExchangeMOEX RiskParamsExchange = "MOEX"
	RiskParamsExchangeSPBX RiskParamsExchange = "SPBX"
)

// Defines values for DevGetAllTradesParamsFormat.
const (
	DevGetAllTradesParamsFormatSimple DevGetAllTradesParamsFormat = "Simple"
)

// Defines values for DevGetAllTradesParamsExchange.
const (
	DevGetAllTradesParamsExchangeMOEX DevGetAllTradesParamsExchange = "MOEX"
	DevGetAllTradesParamsExchangeSPBX DevGetAllTradesParamsExchange = "SPBX"
)

// Defines values for DevGetTickerTradesParamsFormat.
const (
	DevGetTickerTradesParamsFormatSimple DevGetTickerTradesParamsFormat = "Simple"
)

// Defines values for DevGetTickerTradesParamsExchange.
const (
	DevGetTickerTradesParamsExchangeMOEX DevGetTickerTradesParamsExchange = "MOEX"
	DevGetTickerTradesParamsExchangeSPBX DevGetTickerTradesParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchParamsSector.
const (
	CURR  DevSecuritiesSearchParamsSector = "CURR"
	FOND  DevSecuritiesSearchParamsSector = "FOND"
	FORTS DevSecuritiesSearchParamsSector = "FORTS"
)

// Defines values for DevSecuritiesSearchParamsExchange.
const (
	DevSecuritiesSearchParamsExchangeMOEX DevSecuritiesSearchParamsExchange = "MOEX"
	DevSecuritiesSearchParamsExchangeSPBX DevSecuritiesSearchParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchParamsFormat.
const (
	DevSecuritiesSearchParamsFormatSimple DevSecuritiesSearchParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeParamsFormat.
const (
	DevSecuritiesSearchExchangeParamsFormatSimple DevSecuritiesSearchExchangeParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeParamsExchange.
const (
	DevSecuritiesSearchExchangeParamsExchangeMOEX DevSecuritiesSearchExchangeParamsExchange = "MOEX"
	DevSecuritiesSearchExchangeParamsExchangeSPBX DevSecuritiesSearchExchangeParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchExchangeCodeParamsFormat.
const (
	DevSecuritiesSearchExchangeCodeParamsFormatSimple DevSecuritiesSearchExchangeCodeParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeCodeParamsExchange.
const (
	DevSecuritiesSearchExchangeCodeParamsExchangeMOEX DevSecuritiesSearchExchangeCodeParamsExchange = "MOEX"
	DevSecuritiesSearchExchangeCodeParamsExchangeSPBX DevSecuritiesSearchExchangeCodeParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesFuturesParamsFormat.
const (
	DevSecuritiesFuturesParamsFormatSimple DevSecuritiesFuturesParamsFormat = "Simple"
)

// Defines values for DevSecuritiesFuturesParamsExchange.
const (
	DevSecuritiesFuturesParamsExchangeMOEX DevSecuritiesFuturesParamsExchange = "MOEX"
)

// Defines values for DevSecuritiesSearchAllTradesParamsFormat.
const (
	DevSecuritiesSearchAllTradesParamsFormatSimple DevSecuritiesSearchAllTradesParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchAllTradesParamsExchange.
const (
	DevSecuritiesSearchAllTradesParamsExchangeMOEX DevSecuritiesSearchAllTradesParamsExchange = "MOEX"
	DevSecuritiesSearchAllTradesParamsExchangeSPBX DevSecuritiesSearchAllTradesParamsExchange = "SPBX"
)

// Defines values for DevQuotesParamsFormat.
const (
	DevQuotesParamsFormatSimple DevQuotesParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioMoneyParamsFormat.
const (
	ExchangePortfolioMoneyParamsFormatSimple ExchangePortfolioMoneyParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioMoneyParamsExchange.
const (
	ExchangePortfolioMoneyParamsExchangeMOEX ExchangePortfolioMoneyParamsExchange = "MOEX"
	ExchangePortfolioMoneyParamsExchangeSPBX ExchangePortfolioMoneyParamsExchange = "SPBX"
)

// Defines values for DevGetAllOrdersParamsFormat.
const (
	DevGetAllOrdersParamsFormatSimple DevGetAllOrdersParamsFormat = "Simple"
)

// Defines values for DevGetAllOrdersParamsExchange.
const (
	DevGetAllOrdersParamsExchangeMOEX DevGetAllOrdersParamsExchange = "MOEX"
	DevGetAllOrdersParamsExchangeSPBX DevGetAllOrdersParamsExchange = "SPBX"
)

// Defines values for DevGetOneOrderParamsFormat.
const (
	DevGetOneOrderParamsFormatSimple DevGetOneOrderParamsFormat = "Simple"
)

// Defines values for DevGetOneOrderParamsExchange.
const (
	DevGetOneOrderParamsExchangeMOEX DevGetOneOrderParamsExchange = "MOEX"
	DevGetOneOrderParamsExchangeSPBX DevGetOneOrderParamsExchange = "SPBX"
)

// Defines values for DevGetAllStopOrdersParamsFormat.
const (
	DevGetAllStopOrdersParamsFormatSimple DevGetAllStopOrdersParamsFormat = "Simple"
)

// Defines values for DevGetAllStopOrdersParamsExchange.
const (
	DevGetAllStopOrdersParamsExchangeMOEX DevGetAllStopOrdersParamsExchange = "MOEX"
	DevGetAllStopOrdersParamsExchangeSPBX DevGetAllStopOrdersParamsExchange = "SPBX"
)

// Defines values for DevGetOneStopOrderParamsFormat.
const (
	DevGetOneStopOrderParamsFormatSimple DevGetOneStopOrderParamsFormat = "Simple"
)

// Defines values for DevGetOneStopOrderParamsExchange.
const (
	DevGetOneStopOrderParamsExchangeMOEX DevGetOneStopOrderParamsExchange = "MOEX"
	DevGetOneStopOrderParamsExchangeSPBX DevGetOneStopOrderParamsExchange = "SPBX"
)

// Defines values for ExchangePortfolioSummaryParamsFormat.
const (
	ExchangePortfolioSummaryParamsFormatSimple ExchangePortfolioSummaryParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioSummaryParamsExchange.
const (
	ExchangePortfolioSummaryParamsExchangeMOEX ExchangePortfolioSummaryParamsExchange = "MOEX"
	ExchangePortfolioSummaryParamsExchangeSPBX ExchangePortfolioSummaryParamsExchange = "SPBX"
)

// Defines values for DevHistoryParamsExchange.
const (
	DevHistoryParamsExchangeMOEX DevHistoryParamsExchange = "MOEX"
	DevHistoryParamsExchangeSPBX DevHistoryParamsExchange = "SPBX"
)

// Defines values for DevHistoryParamsTf.
const (
	DevHistoryParamsTfD     DevHistoryParamsTf = "D"
	DevHistoryParamsTfM     DevHistoryParamsTf = "M"
	DevHistoryParamsTfN15   DevHistoryParamsTf = "15"
	DevHistoryParamsTfN300  DevHistoryParamsTf = "300"
	DevHistoryParamsTfN3600 DevHistoryParamsTf = "3600"
	DevHistoryParamsTfN60   DevHistoryParamsTf = "60"
	DevHistoryParamsTfW     DevHistoryParamsTf = "W"
	DevHistoryParamsTfY     DevHistoryParamsTf = "Y"
)

// Defines values for DevHistoryParamsUntraded.
const (
	DevHistoryParamsUntradedFalse DevHistoryParamsUntraded = false
	DevHistoryParamsUntradedTrue  DevHistoryParamsUntraded = true
)

// Defines values for DevHistoryParamsFormat.
const (
	DevHistoryParamsFormatSimple DevHistoryParamsFormat = "Simple"
)

// Defines values for DevOrderbookExchangSeccodeParamsFormat.
const (
	Simple DevOrderbookExchangSeccodeParamsFormat = "Simple"
)

// Defines values for DevOrderbookExchangSeccodeParamsExchange.
const (
	DevOrderbookExchangSeccodeParamsExchangeMOEX DevOrderbookExchangSeccodeParamsExchange = "MOEX"
	DevOrderbookExchangSeccodeParamsExchangeSPBX DevOrderbookExchangSeccodeParamsExchange = "SPBX"
)

// Defines values for RiskRatesParamsExchange.
const (
	MOEX RiskRatesParamsExchange = "MOEX"
	SPBX RiskRatesParamsExchange = "SPBX"
)

// Alltrade defines model for alltrade.
type Alltrade struct {
	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор.
	Id *int `json:"id,omitempty"`

	// Oi Открытый интерес (open interest). Если не поддерживается инстурментом - значение 0.
	Oi *int `json:"oi,omitempty"`

	// Orderno Идентификатор заявки
	Orderno *int `json:"orderno,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество
	Qty *int `json:"qty,omitempty"`

	// Side Направление агрессивной заявки. Поле может быть пустым
	Side *AlltradeSide `json:"side,omitempty"`

	// Symbol Тикер (Код финансового инструмента). "[N/A]" используется если symbol не определен.
	Symbol *string `json:"symbol,omitempty"`

	// Time Дата и время (UTC) закрытия заявки
	Time *string `json:"time,omitempty"`

	// Timestamp Время (UTC) в формате Unix Time Milliseconds
	Timestamp *int `json:"timestamp,omitempty"`
}

// AlltradeSide Направление агрессивной заявки. Поле может быть пустым
type AlltradeSide string

// Alltrades defines model for alltrades.
type Alltrades = []Alltrade

// BodyrequestOrdersActionsLimitTV defines model for bodyrequest_OrdersActionsLimitTV.
type BodyrequestOrdersActionsLimitTV struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsLimitTVSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsLimitTVSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsLimitTVSide string

// BodyrequestOrdersActionsLimitTVput defines model for bodyrequest_OrdersActionsLimitTVput.
type BodyrequestOrdersActionsLimitTVput struct {
	// Id Идентификатор заявки
	Id         *int `json:"id,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsLimitTVputSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsLimitTVputSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsLimitTVputSide string

// BodyrequestOrdersActionsMarketTV defines model for bodyrequest_OrdersActionsMarketTV.
type BodyrequestOrdersActionsMarketTV struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsMarketTVSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsMarketTVSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsMarketTVSide string

// BodyrequestOrdersActionsMarketTVput defines model for bodyrequest_OrdersActionsMarketTVput.
type BodyrequestOrdersActionsMarketTVput struct {
	// Id Идентификатор заявки
	Id         *int `json:"id,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsMarketTVputSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsMarketTVputSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsMarketTVputSide string

// BodyrequestOrdersActionsStop defines model for bodyrequest_OrdersActionsStop.
type BodyrequestOrdersActionsStop struct {
	// Instrument Информация об инструмента и бирже
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"Exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"Symbol,omitempty"`
	} `json:"Instrument,omitempty"`

	// OrderEndUnixTime Время (UTC) завершения сделки в формате Unix Time Seconds
	OrderEndUnixTime *int `json:"OrderEndUnixTime,omitempty"`

	// Quantity Количество
	Quantity *int `json:"Quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopSide `json:"Side,omitempty"`

	// TriggerPrice Стоп-цена
	TriggerPrice *int `json:"TriggerPrice,omitempty"`

	// User Информация о пользователе
	User *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"Account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"Portfolio,omitempty"`
	} `json:"User,omitempty"`
}

// BodyrequestOrdersActionsStopSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopSide string

// BodyrequestOrdersActionsStopLimitTVWarp defines model for bodyrequest_OrdersActionsStopLimitTVWarp.
type BodyrequestOrdersActionsStopLimitTVWarp struct {
	// Condition Условие срабатывания more/less
	Condition  *string `json:"condition,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// InstrumentGroup Борд
		InstrumentGroup *string `json:"instrumentGroup,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена выставления лимитной заявки
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopLimitTVWarpSide `json:"side,omitempty"`

	// StopEndUnixTime Срок действия (UTC) в формате Unix Time seconds
	StopEndUnixTime *float64 `json:"stopEndUnixTime,omitempty"`

	// TriggerPrice Цена срабатывания
	TriggerPrice *float64 `json:"triggerPrice,omitempty"`
	User         *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsStopLimitTVWarpSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopLimitTVWarpSide string

// BodyrequestOrdersActionsStopMarketTVWarp defines model for bodyrequest_OrdersActionsStopMarketTVWarp.
type BodyrequestOrdersActionsStopMarketTVWarp struct {
	// Condition Условие срабатывания more/less
	Condition  *string `json:"condition,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// InstrumentGroup Борд
		InstrumentGroup *string `json:"instrumentGroup,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopMarketTVWarpSide `json:"side,omitempty"`

	// StopEndUnixTime Срок действия (UTC) в формате Unix Time seconds
	StopEndUnixTime *float64 `json:"stopEndUnixTime,omitempty"`

	// TriggerPrice Цена срабатывания
	TriggerPrice *float64 `json:"triggerPrice,omitempty"`
	User         *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsStopMarketTVWarpSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopMarketTVWarpSide string

// BodyrequestOrdersActionsStoplimit defines model for bodyrequest_OrdersActionsStoplimit.
type BodyrequestOrdersActionsStoplimit struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"Exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"Symbol,omitempty"`
	} `json:"Instrument,omitempty"`

	// OrderEndUnixTime Время (UTC) завершения сделки в формате Unix Time seconds
	OrderEndUnixTime *int `json:"OrderEndUnixTime,omitempty"`

	// Price Цена
	Price *int `json:"Price,omitempty"`

	// Quantity Количество
	Quantity *int `json:"Quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStoplimitSide `json:"Side,omitempty"`

	// TriggerPrice Стоп-цена
	TriggerPrice *int `json:"TriggerPrice,omitempty"`
	User         *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"Account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"Portfolio,omitempty"`
	} `json:"User,omitempty"`
}

// BodyrequestOrdersActionsStoplimitSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStoplimitSide string

// EstimateOrderModel Модель результата оценки стоимости и количества в лотах
type EstimateOrderModel struct {
	// Commission Комиссия
	Commission *float64 `json:"commission,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange"`

	// NotMarginQuantityToBuy Количество в лотах к покупке без плеча
	NotMarginQuantityToBuy *float64 `json:"notMarginQuantityToBuy,omitempty"`

	// NotMarginQuantityToSell Количество в лотах к продаже без плеча
	NotMarginQuantityToSell *float64 `json:"notMarginQuantityToSell,omitempty"`

	// OrderEvaluation Стоимость заявки
	OrderEvaluation *float64 `json:"orderEvaluation,omitempty"`

	// Portfolio Портфель клиента
	Portfolio *string `json:"portfolio"`

	// QuantityToBuy Количество в лотах к покупке с плечом
	QuantityToBuy *float64 `json:"quantityToBuy,omitempty"`

	// QuantityToSell Количество в лотах к продаже с плечом
	QuantityToSell *float64 `json:"quantityToSell,omitempty"`

	// Ticker Инструмент
	Ticker *string `json:"ticker"`
}

// EstimateOrderViewModel Модель заявки для оценки стоимости и количества в лотах
type EstimateOrderViewModel struct {
	// Board Режим торгов (борд)
	Board *string `json:"board"`

	// Exchange Биржа
	Exchange *string `json:"exchange"`

	// LotQuantity Количество лотов
	LotQuantity *int64 `json:"lotQuantity,omitempty"`

	// Portfolio Портфель клиента
	Portfolio *string `json:"portfolio"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Ticker Инструмент
	Ticker *string `json:"ticker"`
}

// Fortsrisk defines model for fortsrisk.
type Fortsrisk struct {
	// BalanceMoney Сальдо денежных торговых переводов за текущую сессию (поле будет удалено в будущих обновлениях)
	BalanceMoney *float64 `json:"balanceMoney,omitempty"`

	// Fee Списанный сбор
	Fee *float64 `json:"fee,omitempty"`

	// IsLimitsSet Наличие установленных денежного и залогового лимитов
	IsLimitsSet *bool `json:"isLimitsSet,omitempty"`

	// MoneyAmount Общее количество рублей и дисконтированных в рубли залогов
	MoneyAmount *float64 `json:"moneyAmount,omitempty"`

	// MoneyBlocked Средства, заблокированные под ГО
	MoneyBlocked *float64 `json:"moneyBlocked,omitempty"`

	// MoneyFree Свободные средства. Сумма рублей и залогов, дисконтированных в рубли, доступная для открытия позиций. (MoneyFree = MoneyAmount + VmInterCl – MoneyBlocked – VmReserve – Fee)
	MoneyFree *float64 `json:"moneyFree,omitempty"`

	// MoneyOld Общее количество рублей и дисконтированных в рубли залогов на начало сессии
	MoneyOld *float64 `json:"moneyOld,omitempty"`

	// MoneyPledgeAmount Сумма залогов, дисконтированных в рубли
	MoneyPledgeAmount *float64 `json:"moneyPledgeAmount,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// VarMargin VmCurrentPositions + VmInterCl
	VarMargin *float64 `json:"varMargin,omitempty"`

	// VmCurrentPositions Сагрегированная вармаржа по текущим позициям
	VmCurrentPositions *float64 `json:"vmCurrentPositions,omitempty"`

	// VmInterCl Вариационная маржа, списанная или полученная в пром. клиринг
	VmInterCl *float64 `json:"vmInterCl,omitempty"`
}

// History defines model for history.
type History struct {
	History *[]HistoryObject `json:"history,omitempty"`

	// Next Время (UTC) начала следующей свечи
	Next *int `json:"next"`

	// Prev Время (UTC) начала предыдущей свечи
	Prev *int `json:"prev"`
}

// HistoryObject defines model for history_object.
type HistoryObject struct {
	// Close Цена при закрытии
	Close *float64 `json:"close,omitempty"`

	// High Максимальная цена
	High *float64 `json:"high,omitempty"`

	// Low Миниимальная цена
	Low *float64 `json:"low,omitempty"`

	// Open Цена при открытии
	Open *float64 `json:"open,omitempty"`

	// Time Время (UTC) (Unix time seconds)
	Time *int `json:"time,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// Money defines model for money.
type Money struct {
	// Cash Количество средств
	Cash *float64 `json:"cash,omitempty"`

	// Changes Изменения
	Changes *float64 `json:"changes,omitempty"`

	// Comission Комиссия (в рублях)
	Comission *float64 `json:"comission,omitempty"`

	// Free Свободные средства
	Free *float64 `json:"free,omitempty"`

	// Open Средства на момент открытия
	Open *float64 `json:"open,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *float64 `json:"portfolio,omitempty"`

	// Profit Прибыль
	Profit *float64 `json:"profit,omitempty"`

	// ProfitRate Прибыль в процентах
	ProfitRate *float64 `json:"profitRate,omitempty"`

	// Used Количество использованных
	Used *float64 `json:"used,omitempty"`
}

// Order defines model for order.
type Order struct {
	// BrokerSymbol Пара биржа-Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// EndTime Время завершения (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Filled Количество исполненных (лоты)
	Filled *float64 `json:"filled,omitempty"`

	// FilledQtyBatch Количество исполненных (лоты)
	FilledQtyBatch *float64 `json:"filledQtyBatch,omitempty"`

	// FilledQtyUnits Количество исполненных (штуки)
	FilledQtyUnits *float64 `json:"filledQtyUnits,omitempty"`

	// Id Уникальный идентификатор заявки
	Id *string `json:"id,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Количество (лоты)
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *OrderSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *OrderStatus `json:"status,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// TransTime Время выставления (UTC)
	TransTime *string `json:"transTime,omitempty"`

	// Type Тип заявки. Лимитная либо рыночная.
	Type *OrderType `json:"type,omitempty"`
}

// OrderSide Направление сделки. Купля либо продажа.
type OrderSide string

// OrderStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type OrderStatus string

// OrderType Тип заявки. Лимитная либо рыночная.
type OrderType string

// Orderbook Данные о запрашиваемом "биржевом стакане"
type Orderbook struct {
	// Asks Аски
	Asks *[]OrderbookAsk `json:"asks,omitempty"`

	// Bids Биды
	Bids *[]OrderbookBid `json:"bids,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// MsTimestamp Время(UTC) в формате Unix Time Milliseconds
	MsTimestamp *float64 `json:"ms_timestamp,omitempty"`

	// Snapshot Deprecated. Устаревшее поле, будет удалено в будущих обновлениях.
	Snapshot *bool `json:"snapshot,omitempty"`

	// Timestamp Deprecated. Устаревшее поле, будет удалено в будущих обновлениях. Вместо этого поля используйте поле "ms_timestamp".
	Timestamp *float64 `json:"timestamp,omitempty"`
}

// OrderbookAsk defines model for orderbook_ask.
type OrderbookAsk struct {
	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// OrderbookBid defines model for orderbook_bid.
type OrderbookBid struct {
	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// Orders defines model for orders.
type Orders = []Order

// OrdersActions400 defines model for orders_actions_400.
type OrdersActions400 struct {
	// Message Вид ответа для случая отвергнутой заявки.
	Message *string `json:"message,omitempty"`
}

// OrdersActions400CommandAPI defines model for orders_actions_400_CommandAPI.
type OrdersActions400CommandAPI struct {
	// Message Вид ответа для неуникального X-ALOR-REQID
	Message     *string `json:"message,omitempty"`
	OldResponse *struct {
		Body       *string `json:"body,omitempty"`
		StatusCode *int    `json:"statusCode,omitempty"`
	} `json:"oldResponse,omitempty"`
}

// OrdersActionsDeleteOrderId Вид ответа на успешно выполненный запрос.
type OrdersActionsDeleteOrderId = string

// OrdersActionsDeleteOrderIdCommandAPI Вид ответа на успешно выполненный запрос.
type OrdersActionsDeleteOrderIdCommandAPI = string

// OrdersActionsLimitMarket defines model for orders_actions_LimitMarket.
type OrdersActionsLimitMarket struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *int `json:"orderNumber,omitempty"`
}

// OrdersActionsLimitMarketCommandAPI defines model for orders_actions_LimitMarket_CommandAPI.
type OrdersActionsLimitMarketCommandAPI struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// OrdersActionsStopProfitLoss defines model for orders_actions_StopProfitLoss.
type OrdersActionsStopProfitLoss struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *int `json:"orderNumber,omitempty"`
}

// Position defines model for position.
type Position struct {
	// AvgPrice Средняя цена
	AvgPrice *float64 `json:"avgPrice,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// IsCurrency True для валютных остатков (денег), false - для торговых инструментов
	IsCurrency *bool `json:"isCurrency,omitempty"`

	// LotSize Размер лота
	LotSize *float64 `json:"lotSize,omitempty"`

	// Open Агрегированное количество на момент открытия (начала торгов) (штуки)
	Open *float64 `json:"open,omitempty"`

	// OpenQtyBatch Агрегированное количество на момент открытия (начала торгов) (лоты)
	OpenQtyBatch *float64 `json:"openQtyBatch,omitempty"`

	// OpenUnits Количество открытых позиций на момент открытия (начала торгов)
	OpenUnits *float64 `json:"openUnits,omitempty"`

	// Qty Агрегированное количество (лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Агрегированное количество TFuture
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyT0 Агрегированное количество T0 (штуки)
	QtyT0 *float64 `json:"qtyT0,omitempty"`

	// QtyT0Batch Агрегированное количество T0 (лоты)
	QtyT0Batch *float64 `json:"qtyT0Batch,omitempty"`

	// QtyT1 Агрегированное количество T1 (штуки)
	QtyT1 *float64 `json:"qtyT1,omitempty"`

	// QtyT1Batch Агрегированное количество T1 (лоты)
	QtyT1Batch *float64 `json:"qtyT1Batch,omitempty"`

	// QtyT2 Агрегированное количество T2 (штуки)
	QtyT2 *float64 `json:"qtyT2,omitempty"`

	// QtyT2Batch Агрегированное количество T2 (лоты)
	QtyT2Batch *float64 `json:"qtyT2Batch,omitempty"`

	// QtyTFuture Количество (штуки)
	QtyTFuture *float64 `json:"qtyTFuture,omitempty"`

	// QtyTFutureBatch Агрегированное количество TFuture (лоты)
	QtyTFutureBatch *float64 `json:"qtyTFutureBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// ShortName Короткое наименование
	ShortName *string `json:"shortName,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol       *string  `json:"symbol,omitempty"`
	UnrealisedPl *float64 `json:"unrealisedPl,omitempty"`
}

// Positions defines model for positions.
type Positions = []Position

// Risk defines model for risk.
type Risk struct {
	// ClientType Тип клиента
	ClientType *string `json:"clientType,omitempty"`

	// CorrectedMargin Скорректированная маржа
	CorrectedMargin *float64 `json:"correctedMargin,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// HasForbiddenPositions Имеются ли запретные позиции
	HasForbiddenPositions *bool `json:"hasForbiddenPositions,omitempty"`

	// HasNegativeQuantity Имеются ли отрицательные количества
	HasNegativeQuantity *bool `json:"hasNegativeQuantity,omitempty"`

	// InitialMargin Начальная маржа
	InitialMargin *float64 `json:"initialMargin,omitempty"`

	// MinimalMargin Минимальная маржа
	MinimalMargin *float64 `json:"minimalMargin,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// PortfolioEvaluation Общая стоимость портфеля
	PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

	// PortfolioLiquidationValue Стоимость ликвидного портфеля
	PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

	// RiskCategoryId Категория риска
	RiskCategoryId *int `json:"riskCategoryId,omitempty"`

	// RiskCoverageRatioOne НПР1
	RiskCoverageRatioOne *float64 `json:"riskCoverageRatioOne,omitempty"`

	// RiskCoverageRatioTwo НПР2
	RiskCoverageRatioTwo *float64 `json:"riskCoverageRatioTwo,omitempty"`
}

// RiskRate defines model for riskRate.
type RiskRate struct {
	// AssetType Тип актива
	AssetType *string `json:"assetType,omitempty"`

	// CreatedAt Время добавления ставки риска
	CreatedAt *string `json:"createdAt,omitempty"`

	// CurrencyCode Код валюты расчетов
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Id Id записи
	Id *float64 `json:"id,omitempty"`

	// Instrument Инструмент
	Instrument *string `json:"instrument,omitempty"`

	// IsDirect Является ли зависимость инструмента к базовому активу прямой или обратной.
	IsDirect *bool `json:"isDirect,omitempty"`

	// IsMarginal Доступен ли данный инструмент в маржу. Т.е. есть ли он в списке маржинальных инструментов брокера.
	IsMarginal *bool `json:"isMarginal,omitempty"`

	// IsShortSellPossible Разрешен ли шорт по бумаге. True если да.
	IsShortSellPossible *bool `json:"isShortSellPossible,omitempty"`

	// Isin ISIN инструмента. Если есть.
	Isin *string `json:"isin,omitempty"`

	// RateDown Ставка риска понижения цены. Применяется для лонгов.
	RateDown *float64 `json:"rateDown,omitempty"`

	// RateSymmetric Симметричная ставка риска. Приведена для справки, не используется
	RateSymmetric *float64 `json:"rateSymmetric,omitempty"`

	// RateUp Ставка риска повышения цены. Применяется для шортов.
	RateUp *float64 `json:"rateUp,omitempty"`

	// RiskCategoryId Id категории риска
	RiskCategoryId *float64 `json:"riskCategoryId,omitempty"`

	// SecurityRiskCategoryId Id категории бумаги для категоризации.
	SecurityRiskCategoryId *float64 `json:"securityRiskCategoryId"`

	// SetName Чаще всего будет null. Поле показывает к множеству инструменту принадлежит данный инструмент.
	SetName *string `json:"setName"`

	// SetRate Ставка риска множества
	SetRate *float64 `json:"setRate,omitempty"`

	// UnderlyingAsset Чаще всего будет null. Поле показывает к какому базовому инструменту принадлежит данный инструмент.
	UnderlyingAsset *string `json:"underlyingAsset"`

	// UpdatedAt Время последнего обновления ставки риска
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// RiskRates defines model for riskRates.
type RiskRates struct {
	// List Ставка риска
	List *[]RiskRate `json:"list,omitempty"`

	// Total Количество записей
	Total *int `json:"total,omitempty"`
}

// Securities defines model for securities.
type Securities = []Security

// Security defines model for security.
type Security struct {
	// ISIN Идентификатор ценной бумаги согласно стандарту ISO 6166
	ISIN *string `json:"ISIN"`

	// Cancellation Дата и время (UTC) окончания действия
	Cancellation *string `json:"cancellation,omitempty"`

	// CfiCode Тип ценной бумаги согласно стандарту ISO 10962
	CfiCode *string `json:"cfiCode,omitempty"`

	// ComplexProductCategory Требуемая категория для осуществления торговли инструментом
	ComplexProductCategory *string `json:"complexProductCategory"`

	// Currency Валюта
	Currency *string `json:"currency,omitempty"`

	// Description Краткое описание инструмента
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Facevalue Номинальная стоимость
	Facevalue *float64 `json:"facevalue,omitempty"`

	// Lotsize Размер лота
	Lotsize *float64 `json:"lotsize,omitempty"`

	// Marginbuy Цена маржинальной покупки (заемные средства)
	Marginbuy *float64 `json:"marginbuy,omitempty"`

	// Marginrate Отношение цены маржинальной покупки к цене последней сделки
	Marginrate *float64 `json:"marginrate,omitempty"`

	// Marginsell Цена маржинальной продажи (заемные средства)
	Marginsell *float64 `json:"marginsell,omitempty"`

	// Minstep Минимальный шаг цены
	Minstep *float64 `json:"minstep,omitempty"`

	// PriceMax Максимальная цена
	PriceMax *float64 `json:"priceMax,omitempty"`

	// PriceMin Минимальная цена
	PriceMin *float64 `json:"priceMin,omitempty"`

	// Pricestep Минимальный шаг цены, выраженный в рублях
	Pricestep *float64 `json:"pricestep,omitempty"`

	// PrimaryBoard Код режима торгов
	PrimaryBoard *string  `json:"primary_board,omitempty"`
	Rating       *float64 `json:"rating,omitempty"`

	// Shortname Краткое наименование инструмента
	Shortname *string `json:"shortname,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol          *string  `json:"symbol,omitempty"`
	TheorPrice      *float64 `json:"theorPrice,omitempty"`
	TheorPriceLimit *float64 `json:"theorPriceLimit,omitempty"`

	// TradingStatus Торговый статус инструмента
	TradingStatus *int `json:"tradingStatus,omitempty"`

	// TradingStatusInfo Описание торгового статуса инструмента
	TradingStatusInfo *string `json:"tradingStatusInfo"`

	// Type Тип
	Type *string `json:"type,omitempty"`

	// Volatility Волативность
	Volatility *float64 `json:"volatility,omitempty"`
	Yield      *string  `json:"yield"`
}

// ServersInfo defines model for servers_info.
type ServersInfo struct {
	ВалютныйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Валютный Рынок,omitempty"`
	СрочныйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Срочный Рынок,omitempty"`
	ФондовыйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Фондовый Рынок,omitempty"`
}

// Stoporder defines model for stoporder.
type Stoporder struct {
	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// EndTime Время действия заявки (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// FilledQtyBatch Количество исполненных
	FilledQtyBatch *float64 `json:"filledQtyBatch,omitempty"`

	// Id Уникальный идентификатор стоп-заявки
	Id *float64 `json:"id,omitempty"`

	// Price Цена(Лимит)
	Price *float64 `json:"price,omitempty"`

	// Qty Количество
	Qty *float64 `json:"qty,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *StoporderSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *StoporderStatus `json:"status,omitempty"`

	// StopPrice Условная цена
	StopPrice *float64 `json:"stopPrice,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// Type Тип заявки
	Type *StoporderType `json:"type,omitempty"`
}

// StoporderSide Направление сделки. Купля либо продажа.
type StoporderSide string

// StoporderStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type StoporderStatus string

// StoporderType Тип заявки
type StoporderType string

// StoporderWarp defines model for stoporderWarp.
type StoporderWarp struct {
	// AvgPrice Средняя цена
	AvgPrice *float64 `json:"avg_price,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Condition Условие срабатывания more/less
	Condition *string `json:"condition,omitempty"`

	// EndTime Время действия заявки (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// ExchangeOrderId Уникальный идентификатор стоп-заявки
	ExchangeOrderId *float64 `json:"exchangeOrderId,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор стоп-заявки
	Id *float64 `json:"id,omitempty"`

	// Portfolio Пара Биржа:Тикер
	Portfolio *string `json:"portfolio,omitempty"`

	// Price Цена(Лимит)
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (Лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Количество (Лоты)
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (Штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *StoporderWarpSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *StoporderWarpStatus `json:"status,omitempty"`

	// StopPrice Условная цена
	StopPrice *float64 `json:"stopPrice,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// TransTime Время выставления заявки (UTC)
	TransTime *string `json:"transTime,omitempty"`

	// Type Тип заявки (stop/stoplimit)
	Type *StoporderWarpType `json:"type,omitempty"`
}

// StoporderWarpSide Направление сделки. Купля либо продажа.
type StoporderWarpSide string

// StoporderWarpStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type StoporderWarpStatus string

// StoporderWarpType Тип заявки (stop/stoplimit)
type StoporderWarpType string

// StopordersWarp defines model for stopordersWarp.
type StopordersWarp = []StoporderWarp

// Summary defines model for summary.
type Summary struct {
	// BuyingPower Покупательская способность
	BuyingPower *float64 `json:"buyingPower,omitempty"`

	// BuyingPowerAtMorning Покупательская способность на утро
	BuyingPowerAtMorning *float64 `json:"buyingPowerAtMorning,omitempty"`

	// Commission Суммарная комиссия (null для Срочного рынка)
	Commission *float64 `json:"commission"`

	// InitialMargin Маржа
	InitialMargin *float64 `json:"initialMargin,omitempty"`

	// PortfolioEvaluation Ликвидный портфель
	PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

	// PortfolioLiquidationValue Оценка портфеля
	PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

	// Profit Прибыль за сегодня
	Profit *float64 `json:"profit,omitempty"`

	// ProfitRate Норма прибыли, %
	ProfitRate *float64 `json:"profitRate,omitempty"`

	// RiskBeforeForcePositionClosing Риск до закрытия
	RiskBeforeForcePositionClosing *float64 `json:"riskBeforeForcePositionClosing,omitempty"`
}

// Symbol defines model for symbol.
type Symbol struct {
	// AccruedInt Начислено
	AccruedInt *int `json:"accruedInt,omitempty"`

	// AccruedInterest Начислено
	AccruedInterest *int `json:"accrued_interest,omitempty"`

	// Ask Аск
	Ask *float64 `json:"ask,omitempty"`

	// Bid Бид
	Bid *float64 `json:"bid,omitempty"`

	// Change Разность цены и цены предыдущего закрытия
	Change *float64 `json:"change,omitempty"`

	// ChangePercent Относительное изменение цены
	ChangePercent *float64 `json:"change_percent,omitempty"`

	// Description Короткое описание на русском языке
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange  *string  `json:"exchange,omitempty"`
	Facevalue *float64 `json:"facevalue,omitempty"`

	// HighPrice Максимальная цена
	HighPrice *float64 `json:"high_price,omitempty"`

	// LastPrice Последняя цена
	LastPrice *float64 `json:"last_price,omitempty"`

	// LastPriceTimestamp UTC-timestamp для значения поля "last_price"
	LastPriceTimestamp *float64 `json:"last_price_timestamp,omitempty"`

	// Lotsize Размер лота
	Lotsize  *float64 `json:"lotsize,omitempty"`
	Lotvalue *float64 `json:"lotvalue,omitempty"`

	// LowPrice Минимальная цена
	LowPrice     *float64 `json:"low_price,omitempty"`
	OpenInterest *float64 `json:"open_interest"`

	// OpenPrice Цена открытия
	OpenPrice *float64 `json:"open_price,omitempty"`

	// PrevClosePrice Цена предыдущего закрытия
	PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`
	Type   *string `json:"type,omitempty"`

	// Volume Объём
	Volume *float64 `json:"volume,omitempty"`
	Yield  *int     `json:"yield,omitempty"`
}

// SymbolFutures defines model for symbol_futures.
type SymbolFutures struct {
	// AccruedInt Начислено
	AccruedInt *int `json:"accruedInt"`

	// AccruedInterest Начислено
	AccruedInterest *int `json:"accrued_interest"`

	// Ask Аск
	Ask *float64 `json:"ask,omitempty"`

	// Bid Бид
	Bid *float64 `json:"bid,omitempty"`

	// Change Разность цены и цены предыдущего закрытия
	Change *float64 `json:"change"`

	// ChangePercent Относительное изменение цены
	ChangePercent *float64 `json:"change_percent"`

	// Description Короткое описание на русском языке
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange  *string  `json:"exchange,omitempty"`
	Facevalue *float64 `json:"facevalue,omitempty"`

	// HighPrice Максимальная цена
	HighPrice *float64 `json:"high_price,omitempty"`

	// LastPrice Последняя цена
	LastPrice *float64 `json:"last_price,omitempty"`

	// LastPriceTimestamp Время последней цены (UTC)
	LastPriceTimestamp *int `json:"last_price_timestamp,omitempty"`

	// Lotsize Размер лота
	Lotsize  *float64 `json:"lotsize,omitempty"`
	Lotvalue *float64 `json:"lotvalue,omitempty"`

	// LowPrice Минимальная цена
	LowPrice *float64 `json:"low_price,omitempty"`

	// OpenPrice Цена открытия
	OpenPrice *float64 `json:"open_price,omitempty"`

	// PrevClosePrice Цена предыдущего закрытия
	PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`
	Type   *string `json:"type,omitempty"`

	// Volume Объём
	Volume *float64 `json:"volume,omitempty"`
	Yield  *int     `json:"yield,omitempty"`
}

// Symbols defines model for symbols.
type Symbols = []Symbol

// Time Текущее время (UTC) в формате Unix time seconds
type Time = int

// Trade defines model for trade.
type Trade struct {
	// Board Код режима торгов
	Board *string `json:"board,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Date Дата и время (UTC) закрытия заявки
	Date *string `json:"date,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор сделки
	Id *string `json:"id,omitempty"`

	// Orderno Идентификатор заявки
	Orderno *string `json:"orderno,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (лоты)
	Qty *int `json:"qty,omitempty"`

	// QtyBatch Количество (лоты)
	QtyBatch *int `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *int `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *TradeSide `json:"side,omitempty"`

	// Symbol Тикер (Код финансового инструмента). "[N/A]" используется если symbol не определен.
	Symbol *string `json:"symbol,omitempty"`
}

// TradeSide Направление сделки. Купля либо продажа.
type TradeSide string

// Trades defines model for trades.
type Trades = []Trade

// WsReqAllTradesGetAndSubscribe defines model for ws_req_AllTradesGetAndSubscribe.
type WsReqAllTradesGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Depth Если указать, то перед актуальными данными придут данные о последних N сделках. Максимум 5000.
	Depth *float64 `json:"depth,omitempty"`

	// Exchange Биржа
	Exchange *WsReqAllTradesGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqAllTradesGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// IncludeVirtualTrades Указывает, нужно ли отправлять виртуальные (индикативные) сделки
	IncludeVirtualTrades *bool `json:"includeVirtualTrades,omitempty"`

	// Opcode Код операции
	Opcode *WsReqAllTradesGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqAllTradesGetAndSubscribeExchange Биржа
type WsReqAllTradesGetAndSubscribeExchange string

// WsReqAllTradesGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqAllTradesGetAndSubscribeFormat string

// WsReqAllTradesGetAndSubscribeOpcode Код операции
type WsReqAllTradesGetAndSubscribeOpcode string

// WsReqBarsGetAndSubscribe defines model for ws_req_BarsGetAndSubscribe.
type WsReqBarsGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Delayed Данные c задержкой в 15 минут. Для авторизованых клиентов задержка не применяется.
	Delayed *string `json:"delayed,omitempty"`

	// Exchange Биржа
	Exchange *WsReqBarsGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// From Дата и время (UTC) для первой запрашиваемой свечи
	From *int `json:"from,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqBarsGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Tf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
	Tf *WsReqBarsGetAndSubscribeTf `json:"tf,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqBarsGetAndSubscribeExchange Биржа
type WsReqBarsGetAndSubscribeExchange string

// WsReqBarsGetAndSubscribeOpcode Код операции
type WsReqBarsGetAndSubscribeOpcode string

// WsReqBarsGetAndSubscribeTf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
type WsReqBarsGetAndSubscribeTf string

// WsReqInstrumentsGetAndSubscribeV2 defines model for ws_req_InstrumentsGetAndSubscribeV2.
type WsReqInstrumentsGetAndSubscribeV2 struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Exchange Биржа
	Exchange *WsReqInstrumentsGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqInstrumentsGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqInstrumentsGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqInstrumentsGetAndSubscribeV2Exchange Биржа
type WsReqInstrumentsGetAndSubscribeV2Exchange string

// WsReqInstrumentsGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqInstrumentsGetAndSubscribeV2Format string

// WsReqInstrumentsGetAndSubscribeV2Opcode Код операции
type WsReqInstrumentsGetAndSubscribeV2Opcode string

// WsReqOrderBookGetAndSubscribe defines model for ws_req_OrderBookGetAndSubscribe.
type WsReqOrderBookGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Depth Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
	Depth *int `json:"depth,omitempty"`

	// Exchange Биржа
	Exchange *WsReqOrderBookGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqOrderBookGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqOrderBookGetAndSubscribeExchange Биржа
type WsReqOrderBookGetAndSubscribeExchange string

// WsReqOrderBookGetAndSubscribeOpcode Код операции
type WsReqOrderBookGetAndSubscribeOpcode string

// WsReqOrdersGetAndSubscribe defines model for ws_req_OrdersGetAndSubscribe.
type WsReqOrdersGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqOrdersGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqOrdersGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqOrdersGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqOrdersGetAndSubscribeExchange Биржа
type WsReqOrdersGetAndSubscribeExchange string

// WsReqOrdersGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqOrdersGetAndSubscribeFormat string

// WsReqOrdersGetAndSubscribeOpcode Код операции
type WsReqOrdersGetAndSubscribeOpcode string

// WsReqPositionsGetAndSubscribe defines model for ws_req_PositionsGetAndSubscribe.
type WsReqPositionsGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqPositionsGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqPositionsGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqPositionsGetAndSubscribeExchange Биржа
type WsReqPositionsGetAndSubscribeExchange string

// WsReqPositionsGetAndSubscribeOpcode Код операции
type WsReqPositionsGetAndSubscribeOpcode string

// WsReqQuotesSubscribe defines model for ws_req_QuotesSubscribe.
type WsReqQuotesSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Exchange Биржа
	Exchange *WsReqQuotesSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *interface{} `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqQuotesSubscribeExchange Биржа
type WsReqQuotesSubscribeExchange string

// WsReqRisksGetAndSubscribe defines model for ws_req_RisksGetAndSubscribe.
type WsReqRisksGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqRisksGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqRisksGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *string `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqRisksGetAndSubscribeExchange Биржа
type WsReqRisksGetAndSubscribeExchange string

// WsReqRisksGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqRisksGetAndSubscribeFormat string

// WsReqSpectraRisksGetAndSubscribe defines model for ws_req_SpectraRisksGetAndSubscribe.
type WsReqSpectraRisksGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqSpectraRisksGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqSpectraRisksGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqSpectraRisksGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqSpectraRisksGetAndSubscribeExchange Биржа
type WsReqSpectraRisksGetAndSubscribeExchange string

// WsReqSpectraRisksGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqSpectraRisksGetAndSubscribeFormat string

// WsReqSpectraRisksGetAndSubscribeOpcode Код операции
type WsReqSpectraRisksGetAndSubscribeOpcode string

// WsReqStopOrdersGetAndSubscribe defines model for ws_req_StopOrdersGetAndSubscribe.
type WsReqStopOrdersGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqStopOrdersGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqStopOrdersGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqStopOrdersGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqStopOrdersGetAndSubscribeExchange Биржа
type WsReqStopOrdersGetAndSubscribeExchange string

// WsReqStopOrdersGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqStopOrdersGetAndSubscribeFormat string

// WsReqStopOrdersGetAndSubscribeOpcode Код операции
type WsReqStopOrdersGetAndSubscribeOpcode string

// WsReqStopOrdersGetAndSubscribeV2 defines model for ws_req_StopOrdersGetAndSubscribeV2.
type WsReqStopOrdersGetAndSubscribeV2 struct {
	// Exchange Биржа
	Exchange *WsReqStopOrdersGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqStopOrdersGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqStopOrdersGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqStopOrdersGetAndSubscribeV2Exchange Биржа
type WsReqStopOrdersGetAndSubscribeV2Exchange string

// WsReqStopOrdersGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqStopOrdersGetAndSubscribeV2Format string

// WsReqStopOrdersGetAndSubscribeV2Opcode Код операции
type WsReqStopOrdersGetAndSubscribeV2Opcode string

// WsReqSummariesGetAndSubscribeV2 defines model for ws_req_SummariesGetAndSubscribeV2.
type WsReqSummariesGetAndSubscribeV2 struct {
	// Exchange Биржа
	Exchange *WsReqSummariesGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqSummariesGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqSummariesGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqSummariesGetAndSubscribeV2Exchange Биржа
type WsReqSummariesGetAndSubscribeV2Exchange string

// WsReqSummariesGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqSummariesGetAndSubscribeV2Format string

// WsReqSummariesGetAndSubscribeV2Opcode Код операции
type WsReqSummariesGetAndSubscribeV2Opcode string

// WsReqTradesGetAndSubscribe defines model for ws_req_TradesGetAndSubscribe.
type WsReqTradesGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqTradesGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqTradesGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqTradesGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqTradesGetAndSubscribeExchange Биржа
type WsReqTradesGetAndSubscribeExchange string

// WsReqTradesGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqTradesGetAndSubscribeFormat string

// WsReqTradesGetAndSubscribeOpcode Код операции
type WsReqTradesGetAndSubscribeOpcode string

// WsReqUnsubscribe defines model for ws_req_Unsubscribe.
type WsReqUnsubscribe struct {
	// Guid Уникальный идентификатор подписки, от которой отписываемся.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqUnsubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqUnsubscribeOpcode Код операции
type WsReqUnsubscribeOpcode string

// WsResBarsGetAndSubscribe defines model for ws_res_BarsGetAndSubscribe.
type WsResBarsGetAndSubscribe struct {
	// Data Сообщение с данными о ценах на рынке (свечи)
	Data *struct {
		// Close Цена при закрытии
		Close *float64 `json:"close,omitempty"`

		// High Максимальная цена
		High *float64 `json:"high,omitempty"`

		// Low Минимальная цена
		Low *float64 `json:"low,omitempty"`

		// Open Цена при открытии
		Open *float64 `json:"open,omitempty"`

		// Time Время (UTC) (Unix time seconds)
		Time *int `json:"time,omitempty"`

		// Volume Объём
		Volume *int `json:"volume,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResHandledSuccessfully defines model for ws_res_HandledSuccessfully.
type WsResHandledSuccessfully struct {
	// HttpCode HTTP-код ответа
	HttpCode *int `json:"httpCode,omitempty"`

	// Message Информация по созданной/отменённой подписке
	Message *string `json:"message,omitempty"`

	// RequestGuid Уникальный идентификатор подписки. Значение во входящем сообщении равно значению поля \"guid\", переданному при установке соединения.
	RequestGuid *string `json:"requestGuid,omitempty"`
}

// WsResOrderBookGetAndSubscribe defines model for ws_res_OrderBookGetAndSubscribe.
type WsResOrderBookGetAndSubscribe struct {
	// Data Данные о запрашиваемом "биржевом стакане"
	Data *Orderbook `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResOrdersGetAndSubscribe defines model for ws_res_OrdersGetAndSubscribe.
type WsResOrdersGetAndSubscribe struct {
	Data *Order `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResPositionsGetAndSubscribe defines model for ws_res_PositionsGetAndSubscribe.
type WsResPositionsGetAndSubscribe struct {
	// Data Сообщение с данными о позициях по ценным бумагам и валютным остаткам
	Data *struct {
		// AvgPrice Средняя цена сделок по позициям
		AvgPrice *float64 `json:"avgPrice,omitempty"`

		// BrokerSymbol Биржа:Тикер
		BrokerSymbol *string `json:"brokerSymbol,omitempty"`

		// DailyUnrealisedPl Нереализованная прибыль за день
		DailyUnrealisedPl *float64 `json:"dailyUnrealisedPl,omitempty"`

		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// IsCurrency True для валютных остатков (денег), false - для торговых инструментов
		IsCurrency *bool `json:"isCurrency,omitempty"`

		// LotSize Размер лота
		LotSize *int `json:"lotSize,omitempty"`

		// Open Позиции на момент открытия (начала торгов)
		Open *int `json:"open,omitempty"`

		// OpenQtyBatch Позиции на момент открытия (начала торгов)
		OpenQtyBatch *int `json:"openQtyBatch,omitempty"`

		// OpenUnits Позиций на момент открытия (штуки)
		OpenUnits *int `json:"openUnits,omitempty"`

		// Qty Количество (лоты)
		Qty *int `json:"qty,omitempty"`

		// QtyBatch Количество (лоты)
		QtyBatch *int `json:"qtyBatch,omitempty"`

		// QtyT0 Количество на дату "Т0" (штуки)
		QtyT0 *int `json:"qtyT0,omitempty"`

		// QtyT0Batch Количество на дату "Т0" (лоты)
		QtyT0Batch *int `json:"qtyT0Batch,omitempty"`

		// QtyT1 Количество на дату "Т1" (штуки)
		QtyT1 *int `json:"qtyT1,omitempty"`

		// QtyT1Batch Количество на дату "Т1" (лоты)
		QtyT1Batch *int `json:"qtyT1Batch,omitempty"`

		// QtyT2 Количество на дату "Т2" (штуки)
		QtyT2 *int `json:"qtyT2,omitempty"`

		// QtyT2Batch Количество на дату "Т2" (лоты)
		QtyT2Batch *int `json:"qtyT2Batch,omitempty"`

		// QtyTFuture Количество на дату "TFuture" (штуки)
		QtyTFuture *int `json:"qtyTFuture,omitempty"`

		// QtyTFutureBatch Количество на дату "TFuture" (лоты)
		QtyTFutureBatch *int `json:"qtyTFutureBatch,omitempty"`

		// QtyUnits Количество (штуки)
		QtyUnits *int `json:"qtyUnits,omitempty"`

		// ShortName Наименование инструмента
		ShortName *string `json:"shortName,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`

		// UnrealisedPl Нереализованная прибыль
		UnrealisedPl *float64 `json:"unrealisedPl,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResQuotesSubscribe defines model for ws_res_QuotesSubscribe.
type WsResQuotesSubscribe struct {
	Data *struct {
		// AccruedInt Начислено
		AccruedInt *int `json:"accruedInt"`

		// AccruedInterest Начислено
		AccruedInterest *int `json:"accrued_interest"`

		// Ask Аск
		Ask *float64 `json:"ask,omitempty"`

		// Bid Бид
		Bid *float64 `json:"bid,omitempty"`

		// Change Разность цены и цены предыдущего закрытия
		Change *float64 `json:"change"`

		// ChangePercent Относительное изменение цены
		ChangePercent *float64 `json:"change_percent"`

		// Description Короткое описание на русском языке
		Description *string `json:"description,omitempty"`

		// Exchange Биржа
		Exchange  *string  `json:"exchange,omitempty"`
		Facevalue *float64 `json:"facevalue,omitempty"`

		// HighPrice Максимальная цена
		HighPrice *float64 `json:"high_price,omitempty"`

		// LastPrice Последняя цена
		LastPrice *float64 `json:"last_price,omitempty"`

		// LastPriceTimestamp Время последней цены (UTC)
		LastPriceTimestamp *int `json:"last_price_timestamp,omitempty"`

		// Lotsize Размер лота
		Lotsize  *float64 `json:"lotsize,omitempty"`
		Lotvalue *float64 `json:"lotvalue,omitempty"`

		// LowPrice Минимальная цена
		LowPrice *float64 `json:"low_price,omitempty"`

		// OpenPrice Цена открытия
		OpenPrice *float64 `json:"open_price,omitempty"`

		// PrevClosePrice Цена предыдущего закрытия
		PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
		Type   *string `json:"type,omitempty"`

		// Volume Объём
		Volume *float64 `json:"volume,omitempty"`
		Yield  *int     `json:"yield,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResRisksGetAndSubscribe defines model for ws_res_RisksGetAndSubscribe.
type WsResRisksGetAndSubscribe struct {
	Data *Risk `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResSpectraRisksGetAndSubscribe defines model for ws_res_SpectraRisksGetAndSubscribe.
type WsResSpectraRisksGetAndSubscribe struct {
	Data *Fortsrisk `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResStopOrdersGetAndSubscribe defines model for ws_res_StopOrdersGetAndSubscribe.
type WsResStopOrdersGetAndSubscribe struct {
	Data *Stoporder `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResStopOrdersGetAndSubscribeWarp defines model for ws_res_StopOrdersGetAndSubscribeWarp.
type WsResStopOrdersGetAndSubscribeWarp struct {
	Data *StoporderWarp `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResSummariesGetAndSubscribeV2 defines model for ws_res_SummariesGetAndSubscribeV2.
type WsResSummariesGetAndSubscribeV2 struct {
	// Data Сообщение с данными о позициях по деньгам
	Data *struct {
		// BuyingPower Покупательская способность
		BuyingPower *float64 `json:"buyingPower,omitempty"`

		// BuyingPowerAtMorning Покупательская способность (на утро)
		BuyingPowerAtMorning *float64 `json:"buyingPowerAtMorning,omitempty"`

		// Commission Суммарная комиссия (null для Срочного рынка)
		Commission *float64 `json:"commission"`

		// InitialMargin Начальная маржа
		InitialMargin *float64 `json:"initialMargin,omitempty"`

		// PortfolioEvaluation Ликвидный портфель
		PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

		// PortfolioLiquidationValue Оценка портфеля
		PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

		// Profit Прибыль
		Profit *float64 `json:"profit,omitempty"`

		// ProfitRate Относительная прибыль
		ProfitRate *float64 `json:"profitRate,omitempty"`

		// RiskBeforeForcePositionClosing Риск до закрытия
		RiskBeforeForcePositionClosing *float64 `json:"riskBeforeForcePositionClosing,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResTradesGetAndSubscribe defines model for ws_res_TradesGetAndSubscribe.
type WsResTradesGetAndSubscribe struct {
	Data *Trade `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// CommandAPIv2clientordersactionslimitParams defines parameters for CommandAPIv2clientordersactionslimit.
type CommandAPIv2clientordersactionslimitParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionslimitputParams defines parameters for CommandAPIv2clientordersactionslimitput.
type CommandAPIv2clientordersactionslimitputParams struct {
	// XALORREQID Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsmarketParams defines parameters for CommandAPIv2clientordersactionsmarket.
type CommandAPIv2clientordersactionsmarketParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsmarketputParams defines parameters for CommandAPIv2clientordersactionsmarketput.
type CommandAPIv2clientordersactionsmarketputParams struct {
	// XALORREQID Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopParams defines parameters for CommandAPIv2clientordersactionsstop.
type CommandAPIv2clientordersactionsstopParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopLimitParams defines parameters for CommandAPIv2clientordersactionsstopLimit.
type CommandAPIv2clientordersactionsstopLimitParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopLimitStopOrderIdParams defines parameters for CommandAPIv2clientordersactionsstopLimitStopOrderId.
type CommandAPIv2clientordersactionsstopLimitStopOrderIdParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// v2clientordersactionsestimateallJSONBody defines parameters for V2clientordersactionsestimateall.
type v2clientordersactionsestimateallJSONBody = []EstimateOrderViewModel

// CommandAPIv2clientordersdeleteParams defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Exchange Биржа
	Exchange CommandAPIv2clientordersdeleteParamsExchange `form:"exchange" json:"exchange"`

	// Stop Является стоп-заявкой?
	Stop CommandAPIv2clientordersdeleteParamsStop `form:"stop" json:"stop"`

	// JsonResponse Ответ в формате JSON. В виде отдельного параметра для обратной совместимости.
	JsonResponse *CommandAPIv2clientordersdeleteParamsJsonResponse `form:"jsonResponse,omitempty" json:"jsonResponse,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *CommandAPIv2clientordersdeleteParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// CommandAPIv2clientordersdeleteParamsExchange defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsExchange string

// CommandAPIv2clientordersdeleteParamsStop defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsStop string

// CommandAPIv2clientordersdeleteParamsJsonResponse defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsJsonResponse bool

// CommandAPIv2clientordersdeleteParamsFormat defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsFormat string

// CommandAPIWarpv2clientordersdeleteParams defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Exchange Биржа
	Exchange CommandAPIWarpv2clientordersdeleteParamsExchange `form:"exchange" json:"exchange"`

	// Stop Является стоп-заявкой? (тестирование: всегда true)
	Stop CommandAPIWarpv2clientordersdeleteParamsStop `form:"stop" json:"stop"`

	// JsonResponse Ответ в формате JSON. В виде отдельного параметра для обратной совместимости.
	JsonResponse *CommandAPIWarpv2clientordersdeleteParamsJsonResponse `form:"jsonResponse,omitempty" json:"jsonResponse,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *CommandAPIWarpv2clientordersdeleteParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// CommandAPIWarpv2clientordersdeleteParamsExchange defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsExchange string

// CommandAPIWarpv2clientordersdeleteParamsStop defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsStop string

// CommandAPIWarpv2clientordersdeleteParamsJsonResponse defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsJsonResponse bool

// CommandAPIWarpv2clientordersdeleteParamsFormat defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsFormat string

// TradeStatsParams defines parameters for TradeStats.
type TradeStatsParams struct {
	// DateFrom Начиная с какой даты отдавать историю сделок
	DateFrom *openapi_types.Date `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// From Начиная с какого ID (номера сделки) отдавать историю сделок
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit Количество возвращаемых записей (максимум 1000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Descending Флаг обратной сортировки выдачи
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *TradeStatsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// TradeStatsParamsFormat defines parameters for TradeStats.
type TradeStatsParamsFormat string

// TradeStatsParamsExchange defines parameters for TradeStats.
type TradeStatsParamsExchange string

// TradeStatsBySymbolParams defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParams struct {
	// DateFrom Начиная с какой даты отдавать историю сделок
	DateFrom *openapi_types.Date `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// From Начиная с какого ID (номера сделки) отдавать историю сделок
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit Количество возвращаемых записей (максимум 1000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Descending Флаг обратной сортировки выдачи
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *TradeStatsBySymbolParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// TradeStatsBySymbolParamsFormat defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParamsFormat string

// TradeStatsBySymbolParamsExchange defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParamsExchange string

// FortsriskParams defines parameters for Fortsrisk.
type FortsriskParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *FortsriskParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// FortsriskParamsFormat defines parameters for Fortsrisk.
type FortsriskParamsFormat string

// FortsriskParamsExchange defines parameters for Fortsrisk.
type FortsriskParamsExchange string

// DevGetAllPositionsParams defines parameters for DevGetAllPositions.
type DevGetAllPositionsParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllPositionsParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// WithoutCurrency Исключить из ответа все денежные инструменты, по умолчанию false
	WithoutCurrency *DevGetAllPositionsParamsWithoutCurrency `form:"withoutCurrency,omitempty" json:"withoutCurrency,omitempty"`
}

// DevGetAllPositionsParamsFormat defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsFormat string

// DevGetAllPositionsParamsWithoutCurrency defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsWithoutCurrency bool

// DevGetAllPositionsParamsExchange defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsExchange string

// DevGetOnePositionParams defines parameters for DevGetOnePosition.
type DevGetOnePositionParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOnePositionParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOnePositionParamsFormat defines parameters for DevGetOnePosition.
type DevGetOnePositionParamsFormat string

// DevGetOnePositionParamsExchange defines parameters for DevGetOnePosition.
type DevGetOnePositionParamsExchange string

// RiskParams defines parameters for Risk.
type RiskParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *RiskParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// RiskParamsFormat defines parameters for Risk.
type RiskParamsFormat string

// RiskParamsExchange defines parameters for Risk.
type RiskParamsExchange string

// DevGetAllTradesParams defines parameters for DevGetAllTrades.
type DevGetAllTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllTradesParamsFormat defines parameters for DevGetAllTrades.
type DevGetAllTradesParamsFormat string

// DevGetAllTradesParamsExchange defines parameters for DevGetAllTrades.
type DevGetAllTradesParamsExchange string

// DevGetTickerTradesParams defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetTickerTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetTickerTradesParamsFormat defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParamsFormat string

// DevGetTickerTradesParamsExchange defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParamsExchange string

// DevSecuritiesSearchParams defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParams struct {
	// Query Тикер (Код финансового инструмента)
	Query string `form:"query" json:"query"`

	// Limit Ограничение на количество выдаваемых результатов поиска
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Смещение начала выборки (для пагинации)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Sector Рынок на бирже
	Sector *DevSecuritiesSearchParamsSector `form:"sector,omitempty" json:"sector,omitempty"`

	// Cficode Код финансового инструмента по стандарту ISO 10962
	Cficode *string `form:"cficode,omitempty" json:"cficode,omitempty"`

	// Exchange Биржа
	Exchange *DevSecuritiesSearchParamsExchange `form:"exchange,omitempty" json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchParamsSector defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsSector string

// DevSecuritiesSearchParamsExchange defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsExchange string

// DevSecuritiesSearchParamsFormat defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsFormat string

// DevSecuritiesSearchExchangeParams defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchExchangeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchExchangeParamsFormat defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParamsFormat string

// DevSecuritiesSearchExchangeParamsExchange defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParamsExchange string

// DevSecuritiesSearchExchangeCodeParams defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchExchangeCodeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchExchangeCodeParamsFormat defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParamsFormat string

// DevSecuritiesSearchExchangeCodeParamsExchange defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParamsExchange string

// DevSecuritiesFuturesParams defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesFuturesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesFuturesParamsFormat defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParamsFormat string

// DevSecuritiesFuturesParamsExchange defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParamsExchange string

// DevSecuritiesSearchAllTradesParams defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchAllTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// From Начало отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
	From *int `form:"from,omitempty" json:"from,omitempty"`

	// To Конец отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
	To *int `form:"to,omitempty" json:"to,omitempty"`

	// Take Количество загружаемых элементов
	Take *int `form:"take,omitempty" json:"take,omitempty"`

	// Descending Флаг загрузки элементов с конца списка
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// IncludeVirtualTrades Флаг загрузки виртуальных (индикативных) сделок, полученных из заявок на питерской бирже
	IncludeVirtualTrades *bool `form:"includeVirtualTrades,omitempty" json:"includeVirtualTrades,omitempty"`
}

// DevSecuritiesSearchAllTradesParamsFormat defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParamsFormat string

// DevSecuritiesSearchAllTradesParamsExchange defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParamsExchange string

// DevQuotesParams defines parameters for DevQuotes.
type DevQuotesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevQuotesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevQuotesParamsFormat defines parameters for DevQuotes.
type DevQuotesParamsFormat string

// ExchangePortfolioMoneyParams defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *ExchangePortfolioMoneyParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// ExchangePortfolioMoneyParamsFormat defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParamsFormat string

// ExchangePortfolioMoneyParamsExchange defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParamsExchange string

// DevGetAllOrdersParams defines parameters for DevGetAllOrders.
type DevGetAllOrdersParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllOrdersParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllOrdersParamsFormat defines parameters for DevGetAllOrders.
type DevGetAllOrdersParamsFormat string

// DevGetAllOrdersParamsExchange defines parameters for DevGetAllOrders.
type DevGetAllOrdersParamsExchange string

// DevGetOneOrderParams defines parameters for DevGetOneOrder.
type DevGetOneOrderParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOneOrderParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOneOrderParamsFormat defines parameters for DevGetOneOrder.
type DevGetOneOrderParamsFormat string

// DevGetOneOrderParamsExchange defines parameters for DevGetOneOrder.
type DevGetOneOrderParamsExchange string

// DevGetAllStopOrdersParams defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllStopOrdersParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllStopOrdersParamsFormat defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParamsFormat string

// DevGetAllStopOrdersParamsExchange defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParamsExchange string

// DevGetOneStopOrderParams defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOneStopOrderParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOneStopOrderParamsFormat defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParamsFormat string

// DevGetOneStopOrderParamsExchange defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParamsExchange string

// ExchangePortfolioSummaryParams defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *ExchangePortfolioSummaryParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// ExchangePortfolioSummaryParamsFormat defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParamsFormat string

// ExchangePortfolioSummaryParamsExchange defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParamsExchange string

// DevHistoryParams defines parameters for DevHistory.
type DevHistoryParams struct {
	// Symbol Тикер (Код финансового инструмента)
	Symbol string `form:"symbol" json:"symbol"`

	// Exchange Биржа
	Exchange DevHistoryParamsExchange `form:"exchange" json:"exchange"`

	// Tf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
	Tf DevHistoryParamsTf `form:"tf" json:"tf"`

	// From Начало отрезка времени (UTC) в формате Unix Time Seconds
	From int32 `form:"from" json:"from"`

	// To Конец отрезка времени (UTC) в формате Unix Time Seconds
	To int32 `form:"to" json:"to"`

	// Untraded Флаг для поиска данных по устаревшим или экспирированным инструментам. При использовании требуется точное совпадение тикера
	Untraded *DevHistoryParamsUntraded `form:"untraded,omitempty" json:"untraded,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevHistoryParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevHistoryParamsExchange defines parameters for DevHistory.
type DevHistoryParamsExchange string

// DevHistoryParamsTf defines parameters for DevHistory.
type DevHistoryParamsTf string

// DevHistoryParamsUntraded defines parameters for DevHistory.
type DevHistoryParamsUntraded bool

// DevHistoryParamsFormat defines parameters for DevHistory.
type DevHistoryParamsFormat string

// DevOrderbookExchangSeccodeParams defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParams struct {
	// Depth Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
	Depth *int `form:"depth,omitempty" json:"depth,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevOrderbookExchangSeccodeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevOrderbookExchangSeccodeParamsFormat defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParamsFormat string

// DevOrderbookExchangSeccodeParamsExchange defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParamsExchange string

// RiskRatesParams defines parameters for RiskRates.
type RiskRatesParams struct {
	// Exchange Биржа
	Exchange RiskRatesParamsExchange `form:"exchange" json:"exchange"`

	// Ticker Тикер\код инструмента, ISIN для облигаций
	Ticker *string `form:"ticker,omitempty" json:"ticker,omitempty"`

	// RiskCategoryId Id вашей (или той которая интересует) категории риска. Можно получить из запроса информации по клиенту или через кабинет клиента
	RiskCategoryId *string `form:"riskCategoryId,omitempty" json:"riskCategoryId,omitempty"`

	// Search Часть Тикера\кода инструмента, ISIN для облигаций. Вернет все совпадения, начинающиеся с
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// RiskRatesParamsExchange defines parameters for RiskRates.
type RiskRatesParamsExchange string

// V2clientordersactionsstopLossParams defines parameters for V2clientordersactionsstopLoss.
type V2clientordersactionsstopLossParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossOrderIdParams defines parameters for V2clientordersactionsstopLossOrderId.
type V2clientordersactionsstopLossOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossLimitParams defines parameters for V2clientordersactionsstopLossLimit.
type V2clientordersactionsstopLossLimitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossLimitOrderIdParams defines parameters for V2clientordersactionsstopLossLimitOrderId.
type V2clientordersactionsstopLossLimitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitParams defines parameters for V2clientordersactionstakeProfit.
type V2clientordersactionstakeProfitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitOrderIdParams defines parameters for V2clientordersactionstakeProfitOrderId.
type V2clientordersactionstakeProfitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitLimitParams defines parameters for V2clientordersactionstakeProfitLimit.
type V2clientordersactionstakeProfitLimitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitLimitOrderIdParams defines parameters for V2clientordersactionstakeProfitLimitOrderId.
type V2clientordersactionstakeProfitLimitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsOrderIdParams defines parameters for V2clientordersactionsOrderId.
type V2clientordersactionsOrderIdParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Stop Является стоп-заявкой?
	Stop bool `form:"stop" json:"stop"`

	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionslimitJSONRequestBody defines body for CommandAPIv2clientordersactionslimit for application/json ContentType.
type CommandAPIv2clientordersactionslimitJSONRequestBody = BodyrequestOrdersActionsLimitTV

// CommandAPIv2clientordersactionslimitputJSONRequestBody defines body for CommandAPIv2clientordersactionslimitput for application/json ContentType.
type CommandAPIv2clientordersactionslimitputJSONRequestBody = BodyrequestOrdersActionsLimitTVput

// CommandAPIv2clientordersactionsmarketJSONRequestBody defines body for CommandAPIv2clientordersactionsmarket for application/json ContentType.
type CommandAPIv2clientordersactionsmarketJSONRequestBody = BodyrequestOrdersActionsMarketTV

// CommandAPIv2clientordersactionsmarketputJSONRequestBody defines body for CommandAPIv2clientordersactionsmarketput for application/json ContentType.
type CommandAPIv2clientordersactionsmarketputJSONRequestBody = BodyrequestOrdersActionsMarketTVput

// CommandAPIv2clientordersactionsstopJSONRequestBody defines body for CommandAPIv2clientordersactionsstop for application/json ContentType.
type CommandAPIv2clientordersactionsstopJSONRequestBody = BodyrequestOrdersActionsStopMarketTVWarp

// CommandAPIv2clientordersactionsstopLimitJSONRequestBody defines body for CommandAPIv2clientordersactionsstopLimit for application/json ContentType.
type CommandAPIv2clientordersactionsstopLimitJSONRequestBody = BodyrequestOrdersActionsStopLimitTVWarp

// CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody defines body for CommandAPIv2clientordersactionsstopLimitStopOrderId for application/json ContentType.
type CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody = BodyrequestOrdersActionsStopLimitTVWarp

// V2clientordersactionsestimateJSONRequestBody defines body for V2clientordersactionsestimate for application/*+json ContentType.
type V2clientordersactionsestimateJSONRequestBody = EstimateOrderViewModel

// V2clientordersactionsestimateallJSONRequestBody defines body for V2clientordersactionsestimateall for application/*+json ContentType.
type V2clientordersactionsestimateallJSONRequestBody = v2clientordersactionsestimateallJSONBody

// V2clientordersactionsstopLossJSONRequestBody defines body for V2clientordersactionsstopLoss for application/json ContentType.
type V2clientordersactionsstopLossJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionsstopLossOrderIdJSONRequestBody defines body for V2clientordersactionsstopLossOrderId for application/json ContentType.
type V2clientordersactionsstopLossOrderIdJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionsstopLossLimitJSONRequestBody defines body for V2clientordersactionsstopLossLimit for application/json ContentType.
type V2clientordersactionsstopLossLimitJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionsstopLossLimitOrderIdJSONRequestBody defines body for V2clientordersactionsstopLossLimitOrderId for application/json ContentType.
type V2clientordersactionsstopLossLimitOrderIdJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionstakeProfitJSONRequestBody defines body for V2clientordersactionstakeProfit for application/json ContentType.
type V2clientordersactionstakeProfitJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionstakeProfitOrderIdJSONRequestBody defines body for V2clientordersactionstakeProfitOrderId for application/json ContentType.
type V2clientordersactionstakeProfitOrderIdJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionstakeProfitLimitJSONRequestBody defines body for V2clientordersactionstakeProfitLimit for application/json ContentType.
type V2clientordersactionstakeProfitLimitJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody defines body for V2clientordersactionstakeProfitLimitOrderId for application/json ContentType.
type V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody = BodyrequestOrdersActionsStoplimit

// WSProdUnsubscribeJSONRequestBody defines body for WSProdUnsubscribe for application/json ContentType.
type WSProdUnsubscribeJSONRequestBody = WsReqUnsubscribe

// WSProdStopOrdersSubscribeJSONRequestBody defines body for WSProdStopOrdersSubscribe for application/json ContentType.
type WSProdStopOrdersSubscribeJSONRequestBody = WsReqStopOrdersGetAndSubscribe

// WSProdSummariesGetAndSubscribeV2JSONRequestBody defines body for WSProdSummariesGetAndSubscribeV2 for application/json ContentType.
type WSProdSummariesGetAndSubscribeV2JSONRequestBody = WsReqSummariesGetAndSubscribeV2

// WSProdTradesSubscribeJSONRequestBody defines body for WSProdTradesSubscribe for application/json ContentType.
type WSProdTradesSubscribeJSONRequestBody = WsReqTradesGetAndSubscribe

// WSProdPositionsSubscribeJSONRequestBody defines body for WSProdPositionsSubscribe for application/json ContentType.
type WSProdPositionsSubscribeJSONRequestBody = WsReqPositionsGetAndSubscribe

// WSProdQuotesSubscribeJSONRequestBody defines body for WSProdQuotesSubscribe for application/json ContentType.
type WSProdQuotesSubscribeJSONRequestBody = WsReqQuotesSubscribe

// WSProdBarsGetJSONRequestBody defines body for WSProdBarsGet for application/json ContentType.
type WSProdBarsGetJSONRequestBody = WsReqBarsGetAndSubscribe

// WSProdOrderBookJSONRequestBody defines body for WSProdOrderBook for application/json ContentType.
type WSProdOrderBookJSONRequestBody = WsReqOrderBookGetAndSubscribe

// WSProdRisksGetAndSubscribeJSONRequestBody defines body for WSProdRisksGetAndSubscribe for application/json ContentType.
type WSProdRisksGetAndSubscribeJSONRequestBody = WsReqRisksGetAndSubscribe

// WSProdOrdersSubscribeJSONRequestBody defines body for WSProdOrdersSubscribe for application/json ContentType.
type WSProdOrdersSubscribeJSONRequestBody = WsReqOrdersGetAndSubscribe

// WSProdSpectraRisksGetAndSubscribeJSONRequestBody defines body for WSProdSpectraRisksGetAndSubscribe for application/json ContentType.
type WSProdSpectraRisksGetAndSubscribeJSONRequestBody = WsReqSpectraRisksGetAndSubscribe

// WSProdStopOrdersSubscribeV2JSONRequestBody defines body for WSProdStopOrdersSubscribeV2 for application/json ContentType.
type WSProdStopOrdersSubscribeV2JSONRequestBody = WsReqStopOrdersGetAndSubscribeV2

// WSProdAllTradesGetAndSubscribeJSONRequestBody defines body for WSProdAllTradesGetAndSubscribe for application/json ContentType.
type WSProdAllTradesGetAndSubscribeJSONRequestBody = WsReqAllTradesGetAndSubscribe

// WSProdInstrumentsGetAndSubscribeV2JSONRequestBody defines body for WSProdInstrumentsGetAndSubscribeV2 for application/json ContentType.
type WSProdInstrumentsGetAndSubscribeV2JSONRequestBody = WsReqInstrumentsGetAndSubscribeV2

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DevUserPortfolio request
	DevUserPortfolio(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionslimit request with any body
	CommandAPIv2clientordersactionslimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionslimit(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionslimitput request with any body
	CommandAPIv2clientordersactionslimitputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionslimitput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsmarket request with any body
	CommandAPIv2clientordersactionsmarketWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsmarket(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsmarketput request with any body
	CommandAPIv2clientordersactionsmarketputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsmarketput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstop request with any body
	CommandAPIv2clientordersactionsstopWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstop(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstopLimit request with any body
	CommandAPIv2clientordersactionsstopLimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstopLimit(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstopLimitStopOrderId request with any body
	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsestimate request with any body
	V2clientordersactionsestimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsestimate(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsestimateall request with any body
	V2clientordersactionsestimateallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsestimateall(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersdelete request
	CommandAPIv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIWarpv2clientordersdelete request
	CommandAPIWarpv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TradeStats request
	TradeStats(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TradeStatsBySymbol request
	TradeStatsBySymbol(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fortsrisk request
	Fortsrisk(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllPositions request
	DevGetAllPositions(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOnePosition request
	DevGetOnePosition(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Risk request
	Risk(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllTrades request
	DevGetAllTrades(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetTickerTrades request
	DevGetTickerTrades(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearch request
	DevSecuritiesSearch(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchExchange request
	DevSecuritiesSearchExchange(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchExchangeCode request
	DevSecuritiesSearchExchangeCode(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesFutures request
	DevSecuritiesFutures(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchAllTrades request
	DevSecuritiesSearchAllTrades(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevQuotes request
	DevQuotes(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExchangePortfolioMoney request
	ExchangePortfolioMoney(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllOrders request
	DevGetAllOrders(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOneOrder request
	DevGetOneOrder(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllStopOrders request
	DevGetAllStopOrders(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOneStopOrder request
	DevGetOneStopOrder(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExchangePortfolioSummary request
	ExchangePortfolioSummary(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevHistory request
	DevHistory(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevOrderbookExchangSeccode request
	DevOrderbookExchangSeccode(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskRates request
	RiskRates(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalTime request
	LocalTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLoss request with any body
	V2clientordersactionsstopLossWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLoss(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossOrderId request with any body
	V2clientordersactionsstopLossOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossLimit request with any body
	V2clientordersactionsstopLossLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossLimitOrderId request with any body
	V2clientordersactionsstopLossLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfit request with any body
	V2clientordersactionstakeProfitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitOrderId request with any body
	V2clientordersactionstakeProfitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitLimit request with any body
	V2clientordersactionstakeProfitLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitLimitOrderId request with any body
	V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsOrderId request
	V2clientordersactionsOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdUnsubscribe request with any body
	WSProdUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdUnsubscribe(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdStopOrdersSubscribe request with any body
	WSProdStopOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdStopOrdersSubscribe(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdSummariesGetAndSubscribeV2 request with any body
	WSProdSummariesGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdSummariesGetAndSubscribeV2(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdTradesSubscribe request with any body
	WSProdTradesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdTradesSubscribe(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdPositionsSubscribe request with any body
	WSProdPositionsSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdPositionsSubscribe(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdQuotesSubscribe request with any body
	WSProdQuotesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdQuotesSubscribe(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdBarsGet request with any body
	WSProdBarsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdBarsGet(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdOrderBook request with any body
	WSProdOrderBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdOrderBook(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdRisksGetAndSubscribe request with any body
	WSProdRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdRisksGetAndSubscribe(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdOrdersSubscribe request with any body
	WSProdOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdOrdersSubscribe(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdSpectraRisksGetAndSubscribe request with any body
	WSProdSpectraRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdSpectraRisksGetAndSubscribe(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdStopOrdersSubscribeV2 request with any body
	WSProdStopOrdersSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdStopOrdersSubscribeV2(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdAllTradesGetAndSubscribe request with any body
	WSProdAllTradesGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdAllTradesGetAndSubscribe(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdInstrumentsGetAndSubscribeV2 request with any body
	WSProdInstrumentsGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdInstrumentsGetAndSubscribeV2(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DevUserPortfolio(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevUserPortfolioRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimit(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitputRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitputRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarket(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketputRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketputRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstop(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimit(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(c.Server, stopOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest(c.Server, stopOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimate(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateall(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersdeleteRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIWarpv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIWarpv2clientordersdeleteRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TradeStats(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTradeStatsRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TradeStatsBySymbol(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTradeStatsBySymbolRequest(c.Server, exchange, portfolio, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fortsrisk(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFortsriskRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllPositions(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllPositionsRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOnePosition(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOnePositionRequest(c.Server, exchange, portfolio, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Risk(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllTrades(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllTradesRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetTickerTrades(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetTickerTradesRequest(c.Server, exchange, portfolio, ticker, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearch(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchExchange(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchExchangeRequest(c.Server, exchange, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchExchangeCode(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchExchangeCodeRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesFutures(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesFuturesRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchAllTrades(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchAllTradesRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevQuotes(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevQuotesRequest(c.Server, symbols, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExchangePortfolioMoney(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExchangePortfolioMoneyRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllOrders(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllOrdersRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOneOrder(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOneOrderRequest(c.Server, exchange, portfolio, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllStopOrders(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllStopOrdersRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOneStopOrder(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOneStopOrderRequest(c.Server, exchange, portfolio, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExchangePortfolioSummary(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExchangePortfolioSummaryRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevHistory(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevOrderbookExchangSeccode(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevOrderbookExchangSeccodeRequest(c.Server, exchange, seccode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskRates(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskRatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalTimeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLoss(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsOrderIdRequest(c.Server, tradeServerCode, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdUnsubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdUnsubscribe(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdUnsubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribe(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSummariesGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSummariesGetAndSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSummariesGetAndSubscribeV2(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSummariesGetAndSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdTradesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdTradesSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdTradesSubscribe(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdTradesSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdPositionsSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdPositionsSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdPositionsSubscribe(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdPositionsSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdQuotesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdQuotesSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdQuotesSubscribe(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdQuotesSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdBarsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdBarsGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdBarsGet(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdBarsGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrderBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrderBookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrderBook(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrderBookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdRisksGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdRisksGetAndSubscribe(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdRisksGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrdersSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrdersSubscribe(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrdersSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSpectraRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSpectraRisksGetAndSubscribe(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSpectraRisksGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeV2(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdAllTradesGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdAllTradesGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdAllTradesGetAndSubscribe(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdAllTradesGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdInstrumentsGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdInstrumentsGetAndSubscribeV2(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdInstrumentsGetAndSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDevUserPortfolioRequest generates requests for DevUserPortfolio
func NewDevUserPortfolioRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/v1.0/users/%s/portfolios", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommandAPIv2clientordersactionslimitRequest calls the generic CommandAPIv2clientordersactionslimit builder with application/json body
func NewCommandAPIv2clientordersactionslimitRequest(server string, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionslimitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionslimitRequestWithBody generates requests for CommandAPIv2clientordersactionslimit with any type of body
func NewCommandAPIv2clientordersactionslimitRequestWithBody(server string, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/limit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionslimitputRequest calls the generic CommandAPIv2clientordersactionslimitput builder with application/json body
func NewCommandAPIv2clientordersactionslimitputRequest(server string, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionslimitputRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionslimitputRequestWithBody generates requests for CommandAPIv2clientordersactionslimitput with any type of body
func NewCommandAPIv2clientordersactionslimitputRequestWithBody(server string, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/limit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsmarketRequest calls the generic CommandAPIv2clientordersactionsmarket builder with application/json body
func NewCommandAPIv2clientordersactionsmarketRequest(server string, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsmarketRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsmarketRequestWithBody generates requests for CommandAPIv2clientordersactionsmarket with any type of body
func NewCommandAPIv2clientordersactionsmarketRequestWithBody(server string, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/market")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsmarketputRequest calls the generic CommandAPIv2clientordersactionsmarketput builder with application/json body
func NewCommandAPIv2clientordersactionsmarketputRequest(server string, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsmarketputRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsmarketputRequestWithBody generates requests for CommandAPIv2clientordersactionsmarketput with any type of body
func NewCommandAPIv2clientordersactionsmarketputRequestWithBody(server string, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/market/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopRequest calls the generic CommandAPIv2clientordersactionsstop builder with application/json body
func NewCommandAPIv2clientordersactionsstopRequest(server string, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopRequestWithBody generates requests for CommandAPIv2clientordersactionsstop with any type of body
func NewCommandAPIv2clientordersactionsstopRequestWithBody(server string, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopLimitRequest calls the generic CommandAPIv2clientordersactionsstopLimit builder with application/json body
func NewCommandAPIv2clientordersactionsstopLimitRequest(server string, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopLimitRequestWithBody generates requests for CommandAPIv2clientordersactionsstopLimit with any type of body
func NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(server string, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest calls the generic CommandAPIv2clientordersactionsstopLimitStopOrderId builder with application/json body
func NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest(server string, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(server, stopOrderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody generates requests for CommandAPIv2clientordersactionsstopLimitStopOrderId with any type of body
func NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(server string, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "stopOrderId", runtime.ParamLocationPath, stopOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsestimateRequest calls the generic V2clientordersactionsestimate builder with application/*+json body
func NewV2clientordersactionsestimateRequest(server string, body V2clientordersactionsestimateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsestimateRequestWithBody(server, "application/*+json", bodyReader)
}

// NewV2clientordersactionsestimateRequestWithBody generates requests for V2clientordersactionsestimate with any type of body
func NewV2clientordersactionsestimateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV2clientordersactionsestimateallRequest calls the generic V2clientordersactionsestimateall builder with application/*+json body
func NewV2clientordersactionsestimateallRequest(server string, body V2clientordersactionsestimateallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsestimateallRequestWithBody(server, "application/*+json", bodyReader)
}

// NewV2clientordersactionsestimateallRequestWithBody generates requests for V2clientordersactionsestimateall with any type of body
func NewV2clientordersactionsestimateallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/estimate/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommandAPIv2clientordersdeleteRequest generates requests for CommandAPIv2clientordersdelete
func NewCommandAPIv2clientordersdeleteRequest(server string, orderId int, params *CommandAPIv2clientordersdeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.JsonResponse != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jsonResponse", runtime.ParamLocationQuery, *params.JsonResponse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommandAPIWarpv2clientordersdeleteRequest generates requests for CommandAPIWarpv2clientordersdelete
func NewCommandAPIWarpv2clientordersdeleteRequest(server string, orderId int, params *CommandAPIWarpv2clientordersdeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.JsonResponse != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jsonResponse", runtime.ParamLocationQuery, *params.JsonResponse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTradeStatsRequest generates requests for TradeStats
func NewTradeStatsRequest(server string, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/stats/%s/%s/history/trades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTradeStatsBySymbolRequest generates requests for TradeStatsBySymbol
func NewTradeStatsBySymbolRequest(server string, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/stats/%s/%s/history/trades/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFortsriskRequest generates requests for Fortsrisk
func NewFortsriskRequest(server string, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/fortsrisk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllPositionsRequest generates requests for DevGetAllPositions
func NewDevGetAllPositionsRequest(server string, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/positions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WithoutCurrency != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withoutCurrency", runtime.ParamLocationQuery, *params.WithoutCurrency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOnePositionRequest generates requests for DevGetOnePosition
func NewDevGetOnePositionRequest(server string, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/positions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskRequest generates requests for Risk
func NewRiskRequest(server string, exchange RiskParamsExchange, portfolio string, params *RiskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/risk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllTradesRequest generates requests for DevGetAllTrades
func NewDevGetAllTradesRequest(server string, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/trades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetTickerTradesRequest generates requests for DevGetTickerTrades
func NewDevGetTickerTradesRequest(server string, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ticker", runtime.ParamLocationPath, ticker)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/%s/trades", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchRequest generates requests for DevSecuritiesSearch
func NewDevSecuritiesSearchRequest(server string, params *DevSecuritiesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sector != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sector", runtime.ParamLocationQuery, *params.Sector); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cficode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cficode", runtime.ParamLocationQuery, *params.Cficode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Exchange != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchExchangeRequest generates requests for DevSecuritiesSearchExchange
func NewDevSecuritiesSearchExchangeRequest(server string, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchExchangeCodeRequest generates requests for DevSecuritiesSearchExchangeCode
func NewDevSecuritiesSearchExchangeCodeRequest(server string, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesFuturesRequest generates requests for DevSecuritiesFutures
func NewDevSecuritiesFuturesRequest(server string, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s/actualFuturesQuote", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchAllTradesRequest generates requests for DevSecuritiesSearchAllTrades
func NewDevSecuritiesSearchAllTradesRequest(server string, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s/alltrades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeVirtualTrades != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeVirtualTrades", runtime.ParamLocationQuery, *params.IncludeVirtualTrades); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevQuotesRequest generates requests for DevQuotes
func NewDevQuotesRequest(server string, symbols string, params *DevQuotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbols", runtime.ParamLocationPath, symbols)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/quotes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExchangePortfolioMoneyRequest generates requests for ExchangePortfolioMoney
func NewExchangePortfolioMoneyRequest(server string, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/legacy/%s/%s/money", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllOrdersRequest generates requests for DevGetAllOrders
func NewDevGetAllOrdersRequest(server string, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/orders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOneOrderRequest generates requests for DevGetOneOrder
func NewDevGetOneOrderRequest(server string, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/orders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllStopOrdersRequest generates requests for DevGetAllStopOrders
func NewDevGetAllStopOrdersRequest(server string, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/stoporders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOneStopOrderRequest generates requests for DevGetOneStopOrder
func NewDevGetOneStopOrderRequest(server string, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/stoporders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExchangePortfolioSummaryRequest generates requests for ExchangePortfolioSummary
func NewExchangePortfolioSummaryRequest(server string, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/summary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevHistoryRequest generates requests for DevHistory
func NewDevHistoryRequest(server string, params *DevHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tf", runtime.ParamLocationQuery, params.Tf); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Untraded != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "untraded", runtime.ParamLocationQuery, *params.Untraded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevOrderbookExchangSeccodeRequest generates requests for DevOrderbookExchangSeccode
func NewDevOrderbookExchangSeccodeRequest(server string, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seccode", runtime.ParamLocationPath, seccode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/orderbooks/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Depth != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskRatesRequest generates requests for RiskRates
func NewRiskRatesRequest(server string, params *RiskRatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/risk/rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Ticker != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticker", runtime.ParamLocationQuery, *params.Ticker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RiskCategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskCategoryId", runtime.ParamLocationQuery, *params.RiskCategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalTimeRequest generates requests for LocalTime
func NewLocalTimeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2clientordersactionsstopLossRequest calls the generic V2clientordersactionsstopLoss builder with application/json body
func NewV2clientordersactionsstopLossRequest(server string, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossRequestWithBody generates requests for V2clientordersactionsstopLoss with any type of body
func NewV2clientordersactionsstopLossRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLoss", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossOrderIdRequest calls the generic V2clientordersactionsstopLossOrderId builder with application/json body
func NewV2clientordersactionsstopLossOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossOrderIdRequestWithBody generates requests for V2clientordersactionsstopLossOrderId with any type of body
func NewV2clientordersactionsstopLossOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLoss/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossLimitRequest calls the generic V2clientordersactionsstopLossLimit builder with application/json body
func NewV2clientordersactionsstopLossLimitRequest(server string, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossLimitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossLimitRequestWithBody generates requests for V2clientordersactionsstopLossLimit with any type of body
func NewV2clientordersactionsstopLossLimitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLossLimit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossLimitOrderIdRequest calls the generic V2clientordersactionsstopLossLimitOrderId builder with application/json body
func NewV2clientordersactionsstopLossLimitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody generates requests for V2clientordersactionsstopLossLimitOrderId with any type of body
func NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLossLimit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitRequest calls the generic V2clientordersactionstakeProfit builder with application/json body
func NewV2clientordersactionstakeProfitRequest(server string, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitRequestWithBody generates requests for V2clientordersactionstakeProfit with any type of body
func NewV2clientordersactionstakeProfitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitOrderIdRequest calls the generic V2clientordersactionstakeProfitOrderId builder with application/json body
func NewV2clientordersactionstakeProfitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitOrderIdRequestWithBody generates requests for V2clientordersactionstakeProfitOrderId with any type of body
func NewV2clientordersactionstakeProfitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitLimitRequest calls the generic V2clientordersactionstakeProfitLimit builder with application/json body
func NewV2clientordersactionstakeProfitLimitRequest(server string, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitLimitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitLimitRequestWithBody generates requests for V2clientordersactionstakeProfitLimit with any type of body
func NewV2clientordersactionstakeProfitLimitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfitLimit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitLimitOrderIdRequest calls the generic V2clientordersactionstakeProfitLimitOrderId builder with application/json body
func NewV2clientordersactionstakeProfitLimitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody generates requests for V2clientordersactionstakeProfitLimitOrderId with any type of body
func NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfitLimit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsOrderIdRequest generates requests for V2clientordersactionsOrderId
func NewV2clientordersactionsOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewWSProdUnsubscribeRequest calls the generic WSProdUnsubscribe builder with application/json body
func NewWSProdUnsubscribeRequest(server string, body WSProdUnsubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdUnsubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdUnsubscribeRequestWithBody generates requests for WSProdUnsubscribe with any type of body
func NewWSProdUnsubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws        ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdStopOrdersSubscribeRequest calls the generic WSProdStopOrdersSubscribe builder with application/json body
func NewWSProdStopOrdersSubscribeRequest(server string, body WSProdStopOrdersSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdStopOrdersSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdStopOrdersSubscribeRequestWithBody generates requests for WSProdStopOrdersSubscribe with any type of body
func NewWSProdStopOrdersSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws         ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdSummariesGetAndSubscribeV2Request calls the generic WSProdSummariesGetAndSubscribeV2 builder with application/json body
func NewWSProdSummariesGetAndSubscribeV2Request(server string, body WSProdSummariesGetAndSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdSummariesGetAndSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdSummariesGetAndSubscribeV2RequestWithBody generates requests for WSProdSummariesGetAndSubscribeV2 with any type of body
func NewWSProdSummariesGetAndSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws          ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdTradesSubscribeRequest calls the generic WSProdTradesSubscribe builder with application/json body
func NewWSProdTradesSubscribeRequest(server string, body WSProdTradesSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdTradesSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdTradesSubscribeRequestWithBody generates requests for WSProdTradesSubscribe with any type of body
func NewWSProdTradesSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws           ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdPositionsSubscribeRequest calls the generic WSProdPositionsSubscribe builder with application/json body
func NewWSProdPositionsSubscribeRequest(server string, body WSProdPositionsSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdPositionsSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdPositionsSubscribeRequestWithBody generates requests for WSProdPositionsSubscribe with any type of body
func NewWSProdPositionsSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws            ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdQuotesSubscribeRequest calls the generic WSProdQuotesSubscribe builder with application/json body
func NewWSProdQuotesSubscribeRequest(server string, body WSProdQuotesSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdQuotesSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdQuotesSubscribeRequestWithBody generates requests for WSProdQuotesSubscribe with any type of body
func NewWSProdQuotesSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws             ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdBarsGetRequest calls the generic WSProdBarsGet builder with application/json body
func NewWSProdBarsGetRequest(server string, body WSProdBarsGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdBarsGetRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdBarsGetRequestWithBody generates requests for WSProdBarsGet with any type of body
func NewWSProdBarsGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws              ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdOrderBookRequest calls the generic WSProdOrderBook builder with application/json body
func NewWSProdOrderBookRequest(server string, body WSProdOrderBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdOrderBookRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdOrderBookRequestWithBody generates requests for WSProdOrderBook with any type of body
func NewWSProdOrderBookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws               ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdRisksGetAndSubscribeRequest calls the generic WSProdRisksGetAndSubscribe builder with application/json body
func NewWSProdRisksGetAndSubscribeRequest(server string, body WSProdRisksGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdRisksGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdRisksGetAndSubscribeRequestWithBody generates requests for WSProdRisksGetAndSubscribe with any type of body
func NewWSProdRisksGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdOrdersSubscribeRequest calls the generic WSProdOrdersSubscribe builder with application/json body
func NewWSProdOrdersSubscribeRequest(server string, body WSProdOrdersSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdOrdersSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdOrdersSubscribeRequestWithBody generates requests for WSProdOrdersSubscribe with any type of body
func NewWSProdOrdersSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                 ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdSpectraRisksGetAndSubscribeRequest calls the generic WSProdSpectraRisksGetAndSubscribe builder with application/json body
func NewWSProdSpectraRisksGetAndSubscribeRequest(server string, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdSpectraRisksGetAndSubscribeRequestWithBody generates requests for WSProdSpectraRisksGetAndSubscribe with any type of body
func NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                  ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdStopOrdersSubscribeV2Request calls the generic WSProdStopOrdersSubscribeV2 builder with application/json body
func NewWSProdStopOrdersSubscribeV2Request(server string, body WSProdStopOrdersSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdStopOrdersSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdStopOrdersSubscribeV2RequestWithBody generates requests for WSProdStopOrdersSubscribeV2 with any type of body
func NewWSProdStopOrdersSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                   ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdAllTradesGetAndSubscribeRequest calls the generic WSProdAllTradesGetAndSubscribe builder with application/json body
func NewWSProdAllTradesGetAndSubscribeRequest(server string, body WSProdAllTradesGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdAllTradesGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdAllTradesGetAndSubscribeRequestWithBody generates requests for WSProdAllTradesGetAndSubscribe with any type of body
func NewWSProdAllTradesGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                    ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdInstrumentsGetAndSubscribeV2Request calls the generic WSProdInstrumentsGetAndSubscribeV2 builder with application/json body
func NewWSProdInstrumentsGetAndSubscribeV2Request(server string, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody generates requests for WSProdInstrumentsGetAndSubscribeV2 with any type of body
func NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                     ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DevUserPortfolio request
	DevUserPortfolioWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DevUserPortfolioResponse, error)

	// CommandAPIv2clientordersactionslimit request with any body
	CommandAPIv2clientordersactionslimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error)

	CommandAPIv2clientordersactionslimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error)

	// CommandAPIv2clientordersactionslimitput request with any body
	CommandAPIv2clientordersactionslimitputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error)

	CommandAPIv2clientordersactionslimitputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error)

	// CommandAPIv2clientordersactionsmarket request with any body
	CommandAPIv2clientordersactionsmarketWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error)

	CommandAPIv2clientordersactionsmarketWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error)

	// CommandAPIv2clientordersactionsmarketput request with any body
	CommandAPIv2clientordersactionsmarketputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error)

	CommandAPIv2clientordersactionsmarketputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error)

	// CommandAPIv2clientordersactionsstop request with any body
	CommandAPIv2clientordersactionsstopWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error)

	CommandAPIv2clientordersactionsstopWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error)

	// CommandAPIv2clientordersactionsstopLimit request with any body
	CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error)

	CommandAPIv2clientordersactionsstopLimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error)

	// CommandAPIv2clientordersactionsstopLimitStopOrderId request with any body
	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error)

	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error)

	// V2clientordersactionsestimate request with any body
	V2clientordersactionsestimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error)

	V2clientordersactionsestimateWithResponse(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error)

	// V2clientordersactionsestimateall request with any body
	V2clientordersactionsestimateallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error)

	V2clientordersactionsestimateallWithResponse(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error)

	// CommandAPIv2clientordersdelete request
	CommandAPIv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersdeleteResponse, error)

	// CommandAPIWarpv2clientordersdelete request
	CommandAPIWarpv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIWarpv2clientordersdeleteResponse, error)

	// TradeStats request
	TradeStatsWithResponse(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*TradeStatsResponse, error)

	// TradeStatsBySymbol request
	TradeStatsBySymbolWithResponse(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*TradeStatsBySymbolResponse, error)

	// Fortsrisk request
	FortsriskWithResponse(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*FortsriskResponse, error)

	// DevGetAllPositions request
	DevGetAllPositionsWithResponse(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*DevGetAllPositionsResponse, error)

	// DevGetOnePosition request
	DevGetOnePositionWithResponse(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*DevGetOnePositionResponse, error)

	// Risk request
	RiskWithResponse(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*RiskResponse, error)

	// DevGetAllTrades request
	DevGetAllTradesWithResponse(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*DevGetAllTradesResponse, error)

	// DevGetTickerTrades request
	DevGetTickerTradesWithResponse(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*DevGetTickerTradesResponse, error)

	// DevSecuritiesSearch request
	DevSecuritiesSearchWithResponse(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchResponse, error)

	// DevSecuritiesSearchExchange request
	DevSecuritiesSearchExchangeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeResponse, error)

	// DevSecuritiesSearchExchangeCode request
	DevSecuritiesSearchExchangeCodeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeCodeResponse, error)

	// DevSecuritiesFutures request
	DevSecuritiesFuturesWithResponse(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesFuturesResponse, error)

	// DevSecuritiesSearchAllTrades request
	DevSecuritiesSearchAllTradesWithResponse(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchAllTradesResponse, error)

	// DevQuotes request
	DevQuotesWithResponse(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*DevQuotesResponse, error)

	// ExchangePortfolioMoney request
	ExchangePortfolioMoneyWithResponse(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioMoneyResponse, error)

	// DevGetAllOrders request
	DevGetAllOrdersWithResponse(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllOrdersResponse, error)

	// DevGetOneOrder request
	DevGetOneOrderWithResponse(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneOrderResponse, error)

	// DevGetAllStopOrders request
	DevGetAllStopOrdersWithResponse(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllStopOrdersResponse, error)

	// DevGetOneStopOrder request
	DevGetOneStopOrderWithResponse(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneStopOrderResponse, error)

	// ExchangePortfolioSummary request
	ExchangePortfolioSummaryWithResponse(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioSummaryResponse, error)

	// DevHistory request
	DevHistoryWithResponse(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*DevHistoryResponse, error)

	// DevOrderbookExchangSeccode request
	DevOrderbookExchangSeccodeWithResponse(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*DevOrderbookExchangSeccodeResponse, error)

	// RiskRates request
	RiskRatesWithResponse(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*RiskRatesResponse, error)

	// LocalTime request
	LocalTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalTimeResponse, error)

	// V2clientordersactionsstopLoss request with any body
	V2clientordersactionsstopLossWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error)

	V2clientordersactionsstopLossWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error)

	// V2clientordersactionsstopLossOrderId request with any body
	V2clientordersactionsstopLossOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error)

	V2clientordersactionsstopLossOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error)

	// V2clientordersactionsstopLossLimit request with any body
	V2clientordersactionsstopLossLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error)

	V2clientordersactionsstopLossLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error)

	// V2clientordersactionsstopLossLimitOrderId request with any body
	V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error)

	V2clientordersactionsstopLossLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error)

	// V2clientordersactionstakeProfit request with any body
	V2clientordersactionstakeProfitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error)

	V2clientordersactionstakeProfitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error)

	// V2clientordersactionstakeProfitOrderId request with any body
	V2clientordersactionstakeProfitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error)

	V2clientordersactionstakeProfitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error)

	// V2clientordersactionstakeProfitLimit request with any body
	V2clientordersactionstakeProfitLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error)

	V2clientordersactionstakeProfitLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error)

	// V2clientordersactionstakeProfitLimitOrderId request with any body
	V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error)

	V2clientordersactionstakeProfitLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error)

	// V2clientordersactionsOrderId request
	V2clientordersactionsOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*V2clientordersactionsOrderIdResponse, error)

	// WSProdUnsubscribe request with any body
	WSProdUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error)

	WSProdUnsubscribeWithResponse(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error)

	// WSProdStopOrdersSubscribe request with any body
	WSProdStopOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error)

	WSProdStopOrdersSubscribeWithResponse(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error)

	// WSProdSummariesGetAndSubscribeV2 request with any body
	WSProdSummariesGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error)

	WSProdSummariesGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error)

	// WSProdTradesSubscribe request with any body
	WSProdTradesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error)

	WSProdTradesSubscribeWithResponse(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error)

	// WSProdPositionsSubscribe request with any body
	WSProdPositionsSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error)

	WSProdPositionsSubscribeWithResponse(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error)

	// WSProdQuotesSubscribe request with any body
	WSProdQuotesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error)

	WSProdQuotesSubscribeWithResponse(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error)

	// WSProdBarsGet request with any body
	WSProdBarsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error)

	WSProdBarsGetWithResponse(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error)

	// WSProdOrderBook request with any body
	WSProdOrderBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error)

	WSProdOrderBookWithResponse(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error)

	// WSProdRisksGetAndSubscribe request with any body
	WSProdRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error)

	WSProdRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error)

	// WSProdOrdersSubscribe request with any body
	WSProdOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error)

	WSProdOrdersSubscribeWithResponse(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error)

	// WSProdSpectraRisksGetAndSubscribe request with any body
	WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error)

	WSProdSpectraRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error)

	// WSProdStopOrdersSubscribeV2 request with any body
	WSProdStopOrdersSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error)

	WSProdStopOrdersSubscribeV2WithResponse(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error)

	// WSProdAllTradesGetAndSubscribe request with any body
	WSProdAllTradesGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error)

	WSProdAllTradesGetAndSubscribeWithResponse(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error)

	// WSProdInstrumentsGetAndSubscribeV2 request with any body
	WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error)

	WSProdInstrumentsGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error)
}

type DevUserPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServersInfo
}

// Status returns HTTPResponse.Status
func (r DevUserPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevUserPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionslimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionslimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionslimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionslimitputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarket
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionslimitputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionslimitputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsmarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsmarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsmarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsmarketputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarket
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsmarketputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsmarketputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsestimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EstimateOrderModel
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsestimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsestimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsestimateallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EstimateOrderModel
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsestimateallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsestimateallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersdeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderIdCommandAPI
	JSON400      *struct {
		// Code Тип ошибки
		Code *string `json:"code,omitempty"`

		// Message Описание ошибки
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersdeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersdeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIWarpv2clientordersdeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderIdCommandAPI
	JSON400      *struct {
		// Code Тип ошибки
		Code *string `json:"code,omitempty"`

		// Message Описание ошибки
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommandAPIWarpv2clientordersdeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIWarpv2clientordersdeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TradeStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r TradeStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TradeStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TradeStatsBySymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r TradeStatsBySymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TradeStatsBySymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FortsriskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Fortsrisk
}

// Status returns HTTPResponse.Status
func (r FortsriskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FortsriskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Positions
}

// Status returns HTTPResponse.Status
func (r DevGetAllPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOnePositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Position
}

// Status returns HTTPResponse.Status
func (r DevGetOnePositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOnePositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Risk
}

// Status returns HTTPResponse.Status
func (r RiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r DevGetAllTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetTickerTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r DevGetTickerTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetTickerTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Securities
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Securities
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchExchangeCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Security
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchExchangeCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchExchangeCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesFuturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SymbolFutures
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesFuturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesFuturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchAllTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alltrades
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchAllTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchAllTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevQuotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Symbols
}

// Status returns HTTPResponse.Status
func (r DevQuotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevQuotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExchangePortfolioMoneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Money
}

// Status returns HTTPResponse.Status
func (r ExchangePortfolioMoneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExchangePortfolioMoneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Orders
}

// Status returns HTTPResponse.Status
func (r DevGetAllOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOneOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r DevGetOneOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOneOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllStopOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopordersWarp
}

// Status returns HTTPResponse.Status
func (r DevGetAllStopOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllStopOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOneStopOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoporderWarp
}

// Status returns HTTPResponse.Status
func (r DevGetOneStopOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOneStopOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExchangePortfolioSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Summary
}

// Status returns HTTPResponse.Status
func (r ExchangePortfolioSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExchangePortfolioSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *History
}

// Status returns HTTPResponse.Status
func (r DevHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevOrderbookExchangSeccodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Orderbook
}

// Status returns HTTPResponse.Status
func (r DevOrderbookExchangSeccodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevOrderbookExchangSeccodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RiskRates
}

// Status returns HTTPResponse.Status
func (r RiskRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Time
}

// Status returns HTTPResponse.Status
func (r LocalTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossLimitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossLimitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossLimitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitLimitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitLimitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitLimitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderId
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdUnsubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdStopOrdersSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResStopOrdersGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdStopOrdersSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdStopOrdersSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdSummariesGetAndSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResSummariesGetAndSubscribeV2
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdSummariesGetAndSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdSummariesGetAndSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdTradesSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResTradesGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdTradesSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdTradesSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdPositionsSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResPositionsGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdPositionsSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdPositionsSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdQuotesSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResQuotesSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdQuotesSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdQuotesSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdBarsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResBarsGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdBarsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdBarsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdOrderBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResOrderBookGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdOrderBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdOrderBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdRisksGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResRisksGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdRisksGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdRisksGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdOrdersSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResOrdersGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdOrdersSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdOrdersSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdSpectraRisksGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResSpectraRisksGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdSpectraRisksGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdSpectraRisksGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdStopOrdersSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResStopOrdersGetAndSubscribeWarp
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdStopOrdersSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdStopOrdersSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdAllTradesGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *Alltrades
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdAllTradesGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdAllTradesGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdInstrumentsGetAndSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdInstrumentsGetAndSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdInstrumentsGetAndSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DevUserPortfolioWithResponse request returning *DevUserPortfolioResponse
func (c *ClientWithResponses) DevUserPortfolioWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DevUserPortfolioResponse, error) {
	rsp, err := c.DevUserPortfolio(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevUserPortfolioResponse(rsp)
}

// CommandAPIv2clientordersactionslimitWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionslimitResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitResponse(rsp)
}

// CommandAPIv2clientordersactionslimitputWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionslimitputResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitputWithBody(ctx, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitputResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitput(ctx, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitputResponse(rsp)
}

// CommandAPIv2clientordersactionsmarketWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsmarketResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarket(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketResponse(rsp)
}

// CommandAPIv2clientordersactionsmarketputWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsmarketputResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketputWithBody(ctx, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketputResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketput(ctx, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketputResponse(rsp)
}

// CommandAPIv2clientordersactionsstopWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstop(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopResponse(rsp)
}

// CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopLimitResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp)
}

// CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx, stopOrderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx, stopOrderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp)
}

// V2clientordersactionsestimateWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsestimateResponse
func (c *ClientWithResponses) V2clientordersactionsestimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error) {
	rsp, err := c.V2clientordersactionsestimateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsestimateWithResponse(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error) {
	rsp, err := c.V2clientordersactionsestimate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateResponse(rsp)
}

// V2clientordersactionsestimateallWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsestimateallResponse
func (c *ClientWithResponses) V2clientordersactionsestimateallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error) {
	rsp, err := c.V2clientordersactionsestimateallWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateallResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsestimateallWithResponse(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error) {
	rsp, err := c.V2clientordersactionsestimateall(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateallResponse(rsp)
}

// CommandAPIv2clientordersdeleteWithResponse request returning *CommandAPIv2clientordersdeleteResponse
func (c *ClientWithResponses) CommandAPIv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersdeleteResponse, error) {
	rsp, err := c.CommandAPIv2clientordersdelete(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersdeleteResponse(rsp)
}

// CommandAPIWarpv2clientordersdeleteWithResponse request returning *CommandAPIWarpv2clientordersdeleteResponse
func (c *ClientWithResponses) CommandAPIWarpv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIWarpv2clientordersdeleteResponse, error) {
	rsp, err := c.CommandAPIWarpv2clientordersdelete(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIWarpv2clientordersdeleteResponse(rsp)
}

// TradeStatsWithResponse request returning *TradeStatsResponse
func (c *ClientWithResponses) TradeStatsWithResponse(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*TradeStatsResponse, error) {
	rsp, err := c.TradeStats(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTradeStatsResponse(rsp)
}

// TradeStatsBySymbolWithResponse request returning *TradeStatsBySymbolResponse
func (c *ClientWithResponses) TradeStatsBySymbolWithResponse(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*TradeStatsBySymbolResponse, error) {
	rsp, err := c.TradeStatsBySymbol(ctx, exchange, portfolio, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTradeStatsBySymbolResponse(rsp)
}

// FortsriskWithResponse request returning *FortsriskResponse
func (c *ClientWithResponses) FortsriskWithResponse(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*FortsriskResponse, error) {
	rsp, err := c.Fortsrisk(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFortsriskResponse(rsp)
}

// DevGetAllPositionsWithResponse request returning *DevGetAllPositionsResponse
func (c *ClientWithResponses) DevGetAllPositionsWithResponse(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*DevGetAllPositionsResponse, error) {
	rsp, err := c.DevGetAllPositions(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllPositionsResponse(rsp)
}

// DevGetOnePositionWithResponse request returning *DevGetOnePositionResponse
func (c *ClientWithResponses) DevGetOnePositionWithResponse(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*DevGetOnePositionResponse, error) {
	rsp, err := c.DevGetOnePosition(ctx, exchange, portfolio, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOnePositionResponse(rsp)
}

// RiskWithResponse request returning *RiskResponse
func (c *ClientWithResponses) RiskWithResponse(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*RiskResponse, error) {
	rsp, err := c.Risk(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskResponse(rsp)
}

// DevGetAllTradesWithResponse request returning *DevGetAllTradesResponse
func (c *ClientWithResponses) DevGetAllTradesWithResponse(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*DevGetAllTradesResponse, error) {
	rsp, err := c.DevGetAllTrades(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllTradesResponse(rsp)
}

// DevGetTickerTradesWithResponse request returning *DevGetTickerTradesResponse
func (c *ClientWithResponses) DevGetTickerTradesWithResponse(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*DevGetTickerTradesResponse, error) {
	rsp, err := c.DevGetTickerTrades(ctx, exchange, portfolio, ticker, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetTickerTradesResponse(rsp)
}

// DevSecuritiesSearchWithResponse request returning *DevSecuritiesSearchResponse
func (c *ClientWithResponses) DevSecuritiesSearchWithResponse(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchResponse, error) {
	rsp, err := c.DevSecuritiesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchResponse(rsp)
}

// DevSecuritiesSearchExchangeWithResponse request returning *DevSecuritiesSearchExchangeResponse
func (c *ClientWithResponses) DevSecuritiesSearchExchangeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeResponse, error) {
	rsp, err := c.DevSecuritiesSearchExchange(ctx, exchange, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchExchangeResponse(rsp)
}

// DevSecuritiesSearchExchangeCodeWithResponse request returning *DevSecuritiesSearchExchangeCodeResponse
func (c *ClientWithResponses) DevSecuritiesSearchExchangeCodeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeCodeResponse, error) {
	rsp, err := c.DevSecuritiesSearchExchangeCode(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchExchangeCodeResponse(rsp)
}

// DevSecuritiesFuturesWithResponse request returning *DevSecuritiesFuturesResponse
func (c *ClientWithResponses) DevSecuritiesFuturesWithResponse(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesFuturesResponse, error) {
	rsp, err := c.DevSecuritiesFutures(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesFuturesResponse(rsp)
}

// DevSecuritiesSearchAllTradesWithResponse request returning *DevSecuritiesSearchAllTradesResponse
func (c *ClientWithResponses) DevSecuritiesSearchAllTradesWithResponse(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchAllTradesResponse, error) {
	rsp, err := c.DevSecuritiesSearchAllTrades(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchAllTradesResponse(rsp)
}

// DevQuotesWithResponse request returning *DevQuotesResponse
func (c *ClientWithResponses) DevQuotesWithResponse(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*DevQuotesResponse, error) {
	rsp, err := c.DevQuotes(ctx, symbols, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevQuotesResponse(rsp)
}

// ExchangePortfolioMoneyWithResponse request returning *ExchangePortfolioMoneyResponse
func (c *ClientWithResponses) ExchangePortfolioMoneyWithResponse(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioMoneyResponse, error) {
	rsp, err := c.ExchangePortfolioMoney(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExchangePortfolioMoneyResponse(rsp)
}

// DevGetAllOrdersWithResponse request returning *DevGetAllOrdersResponse
func (c *ClientWithResponses) DevGetAllOrdersWithResponse(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllOrdersResponse, error) {
	rsp, err := c.DevGetAllOrders(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllOrdersResponse(rsp)
}

// DevGetOneOrderWithResponse request returning *DevGetOneOrderResponse
func (c *ClientWithResponses) DevGetOneOrderWithResponse(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneOrderResponse, error) {
	rsp, err := c.DevGetOneOrder(ctx, exchange, portfolio, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOneOrderResponse(rsp)
}

// DevGetAllStopOrdersWithResponse request returning *DevGetAllStopOrdersResponse
func (c *ClientWithResponses) DevGetAllStopOrdersWithResponse(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllStopOrdersResponse, error) {
	rsp, err := c.DevGetAllStopOrders(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllStopOrdersResponse(rsp)
}

// DevGetOneStopOrderWithResponse request returning *DevGetOneStopOrderResponse
func (c *ClientWithResponses) DevGetOneStopOrderWithResponse(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneStopOrderResponse, error) {
	rsp, err := c.DevGetOneStopOrder(ctx, exchange, portfolio, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOneStopOrderResponse(rsp)
}

// ExchangePortfolioSummaryWithResponse request returning *ExchangePortfolioSummaryResponse
func (c *ClientWithResponses) ExchangePortfolioSummaryWithResponse(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioSummaryResponse, error) {
	rsp, err := c.ExchangePortfolioSummary(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExchangePortfolioSummaryResponse(rsp)
}

// DevHistoryWithResponse request returning *DevHistoryResponse
func (c *ClientWithResponses) DevHistoryWithResponse(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*DevHistoryResponse, error) {
	rsp, err := c.DevHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevHistoryResponse(rsp)
}

// DevOrderbookExchangSeccodeWithResponse request returning *DevOrderbookExchangSeccodeResponse
func (c *ClientWithResponses) DevOrderbookExchangSeccodeWithResponse(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*DevOrderbookExchangSeccodeResponse, error) {
	rsp, err := c.DevOrderbookExchangSeccode(ctx, exchange, seccode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevOrderbookExchangSeccodeResponse(rsp)
}

// RiskRatesWithResponse request returning *RiskRatesResponse
func (c *ClientWithResponses) RiskRatesWithResponse(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*RiskRatesResponse, error) {
	rsp, err := c.RiskRates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskRatesResponse(rsp)
}

// LocalTimeWithResponse request returning *LocalTimeResponse
func (c *ClientWithResponses) LocalTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalTimeResponse, error) {
	rsp, err := c.LocalTime(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalTimeResponse(rsp)
}

// V2clientordersactionsstopLossWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error) {
	rsp, err := c.V2clientordersactionsstopLoss(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossResponse(rsp)
}

// V2clientordersactionsstopLossOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossOrderIdResponse(rsp)
}

// V2clientordersactionsstopLossLimitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossLimitResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitResponse(rsp)
}

// V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossLimitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp)
}

// V2clientordersactionstakeProfitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitResponse(rsp)
}

// V2clientordersactionstakeProfitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitOrderIdResponse(rsp)
}

// V2clientordersactionstakeProfitLimitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitLimitResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitResponse(rsp)
}

// V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitLimitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp)
}

// V2clientordersactionsOrderIdWithResponse request returning *V2clientordersactionsOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*V2clientordersactionsOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsOrderId(ctx, tradeServerCode, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsOrderIdResponse(rsp)
}

// WSProdUnsubscribeWithBodyWithResponse request with arbitrary body returning *WSProdUnsubscribeResponse
func (c *ClientWithResponses) WSProdUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error) {
	rsp, err := c.WSProdUnsubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdUnsubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdUnsubscribeWithResponse(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error) {
	rsp, err := c.WSProdUnsubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdUnsubscribeResponse(rsp)
}

// WSProdStopOrdersSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdStopOrdersSubscribeResponse
func (c *ClientWithResponses) WSProdStopOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdStopOrdersSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdStopOrdersSubscribeWithResponse(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdStopOrdersSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeResponse(rsp)
}

// WSProdSummariesGetAndSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdSummariesGetAndSubscribeV2Response
func (c *ClientWithResponses) WSProdSummariesGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdSummariesGetAndSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSummariesGetAndSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdSummariesGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdSummariesGetAndSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSummariesGetAndSubscribeV2Response(rsp)
}

// WSProdTradesSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdTradesSubscribeResponse
func (c *ClientWithResponses) WSProdTradesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error) {
	rsp, err := c.WSProdTradesSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdTradesSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdTradesSubscribeWithResponse(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error) {
	rsp, err := c.WSProdTradesSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdTradesSubscribeResponse(rsp)
}

// WSProdPositionsSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdPositionsSubscribeResponse
func (c *ClientWithResponses) WSProdPositionsSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error) {
	rsp, err := c.WSProdPositionsSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdPositionsSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdPositionsSubscribeWithResponse(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error) {
	rsp, err := c.WSProdPositionsSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdPositionsSubscribeResponse(rsp)
}

// WSProdQuotesSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdQuotesSubscribeResponse
func (c *ClientWithResponses) WSProdQuotesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error) {
	rsp, err := c.WSProdQuotesSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdQuotesSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdQuotesSubscribeWithResponse(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error) {
	rsp, err := c.WSProdQuotesSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdQuotesSubscribeResponse(rsp)
}

// WSProdBarsGetWithBodyWithResponse request with arbitrary body returning *WSProdBarsGetResponse
func (c *ClientWithResponses) WSProdBarsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error) {
	rsp, err := c.WSProdBarsGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdBarsGetResponse(rsp)
}

func (c *ClientWithResponses) WSProdBarsGetWithResponse(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error) {
	rsp, err := c.WSProdBarsGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdBarsGetResponse(rsp)
}

// WSProdOrderBookWithBodyWithResponse request with arbitrary body returning *WSProdOrderBookResponse
func (c *ClientWithResponses) WSProdOrderBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error) {
	rsp, err := c.WSProdOrderBookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrderBookResponse(rsp)
}

func (c *ClientWithResponses) WSProdOrderBookWithResponse(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error) {
	rsp, err := c.WSProdOrderBook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrderBookResponse(rsp)
}

// WSProdRisksGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdRisksGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdRisksGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdRisksGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdRisksGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdRisksGetAndSubscribeResponse(rsp)
}

// WSProdOrdersSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdOrdersSubscribeResponse
func (c *ClientWithResponses) WSProdOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdOrdersSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrdersSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdOrdersSubscribeWithResponse(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdOrdersSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrdersSubscribeResponse(rsp)
}

// WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdSpectraRisksGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdSpectraRisksGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdSpectraRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdSpectraRisksGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp)
}

// WSProdStopOrdersSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdStopOrdersSubscribeV2Response
func (c *ClientWithResponses) WSProdStopOrdersSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error) {
	rsp, err := c.WSProdStopOrdersSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdStopOrdersSubscribeV2WithResponse(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error) {
	rsp, err := c.WSProdStopOrdersSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeV2Response(rsp)
}

// WSProdAllTradesGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdAllTradesGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdAllTradesGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdAllTradesGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdAllTradesGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdAllTradesGetAndSubscribeWithResponse(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdAllTradesGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdAllTradesGetAndSubscribeResponse(rsp)
}

// WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdInstrumentsGetAndSubscribeV2Response
func (c *ClientWithResponses) WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdInstrumentsGetAndSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdInstrumentsGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdInstrumentsGetAndSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp)
}

// ParseDevUserPortfolioResponse parses an HTTP response from a DevUserPortfolioWithResponse call
func ParseDevUserPortfolioResponse(rsp *http.Response) (*DevUserPortfolioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevUserPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServersInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionslimitResponse parses an HTTP response from a CommandAPIv2clientordersactionslimitWithResponse call
func ParseCommandAPIv2clientordersactionslimitResponse(rsp *http.Response) (*CommandAPIv2clientordersactionslimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionslimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionslimitputResponse parses an HTTP response from a CommandAPIv2clientordersactionslimitputWithResponse call
func ParseCommandAPIv2clientordersactionslimitputResponse(rsp *http.Response) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionslimitputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsmarketResponse parses an HTTP response from a CommandAPIv2clientordersactionsmarketWithResponse call
func ParseCommandAPIv2clientordersactionsmarketResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsmarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsmarketputResponse parses an HTTP response from a CommandAPIv2clientordersactionsmarketputWithResponse call
func ParseCommandAPIv2clientordersactionsmarketputResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsmarketputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopWithResponse call
func ParseCommandAPIv2clientordersactionsstopResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopLimitResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopLimitWithResponse call
func ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse call
func ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsestimateResponse parses an HTTP response from a V2clientordersactionsestimateWithResponse call
func ParseV2clientordersactionsestimateResponse(rsp *http.Response) (*V2clientordersactionsestimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsestimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EstimateOrderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseV2clientordersactionsestimateallResponse parses an HTTP response from a V2clientordersactionsestimateallWithResponse call
func ParseV2clientordersactionsestimateallResponse(rsp *http.Response) (*V2clientordersactionsestimateallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsestimateallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EstimateOrderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseCommandAPIv2clientordersdeleteResponse parses an HTTP response from a CommandAPIv2clientordersdeleteWithResponse call
func ParseCommandAPIv2clientordersdeleteResponse(rsp *http.Response) (*CommandAPIv2clientordersdeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersdeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderIdCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Тип ошибки
			Code *string `json:"code,omitempty"`

			// Message Описание ошибки
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIWarpv2clientordersdeleteResponse parses an HTTP response from a CommandAPIWarpv2clientordersdeleteWithResponse call
func ParseCommandAPIWarpv2clientordersdeleteResponse(rsp *http.Response) (*CommandAPIWarpv2clientordersdeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIWarpv2clientordersdeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderIdCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Тип ошибки
			Code *string `json:"code,omitempty"`

			// Message Описание ошибки
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTradeStatsResponse parses an HTTP response from a TradeStatsWithResponse call
func ParseTradeStatsResponse(rsp *http.Response) (*TradeStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TradeStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTradeStatsBySymbolResponse parses an HTTP response from a TradeStatsBySymbolWithResponse call
func ParseTradeStatsBySymbolResponse(rsp *http.Response) (*TradeStatsBySymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TradeStatsBySymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFortsriskResponse parses an HTTP response from a FortsriskWithResponse call
func ParseFortsriskResponse(rsp *http.Response) (*FortsriskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FortsriskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Fortsrisk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllPositionsResponse parses an HTTP response from a DevGetAllPositionsWithResponse call
func ParseDevGetAllPositionsResponse(rsp *http.Response) (*DevGetAllPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Positions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOnePositionResponse parses an HTTP response from a DevGetOnePositionWithResponse call
func ParseDevGetOnePositionResponse(rsp *http.Response) (*DevGetOnePositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOnePositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskResponse parses an HTTP response from a RiskWithResponse call
func ParseRiskResponse(rsp *http.Response) (*RiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Risk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllTradesResponse parses an HTTP response from a DevGetAllTradesWithResponse call
func ParseDevGetAllTradesResponse(rsp *http.Response) (*DevGetAllTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetTickerTradesResponse parses an HTTP response from a DevGetTickerTradesWithResponse call
func ParseDevGetTickerTradesResponse(rsp *http.Response) (*DevGetTickerTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetTickerTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchResponse parses an HTTP response from a DevSecuritiesSearchWithResponse call
func ParseDevSecuritiesSearchResponse(rsp *http.Response) (*DevSecuritiesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Securities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchExchangeResponse parses an HTTP response from a DevSecuritiesSearchExchangeWithResponse call
func ParseDevSecuritiesSearchExchangeResponse(rsp *http.Response) (*DevSecuritiesSearchExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Securities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchExchangeCodeResponse parses an HTTP response from a DevSecuritiesSearchExchangeCodeWithResponse call
func ParseDevSecuritiesSearchExchangeCodeResponse(rsp *http.Response) (*DevSecuritiesSearchExchangeCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchExchangeCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Security
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesFuturesResponse parses an HTTP response from a DevSecuritiesFuturesWithResponse call
func ParseDevSecuritiesFuturesResponse(rsp *http.Response) (*DevSecuritiesFuturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesFuturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SymbolFutures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchAllTradesResponse parses an HTTP response from a DevSecuritiesSearchAllTradesWithResponse call
func ParseDevSecuritiesSearchAllTradesResponse(rsp *http.Response) (*DevSecuritiesSearchAllTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchAllTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alltrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevQuotesResponse parses an HTTP response from a DevQuotesWithResponse call
func ParseDevQuotesResponse(rsp *http.Response) (*DevQuotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevQuotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Symbols
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExchangePortfolioMoneyResponse parses an HTTP response from a ExchangePortfolioMoneyWithResponse call
func ParseExchangePortfolioMoneyResponse(rsp *http.Response) (*ExchangePortfolioMoneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExchangePortfolioMoneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Money
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllOrdersResponse parses an HTTP response from a DevGetAllOrdersWithResponse call
func ParseDevGetAllOrdersResponse(rsp *http.Response) (*DevGetAllOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Orders
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOneOrderResponse parses an HTTP response from a DevGetOneOrderWithResponse call
func ParseDevGetOneOrderResponse(rsp *http.Response) (*DevGetOneOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOneOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllStopOrdersResponse parses an HTTP response from a DevGetAllStopOrdersWithResponse call
func ParseDevGetAllStopOrdersResponse(rsp *http.Response) (*DevGetAllStopOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllStopOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopordersWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOneStopOrderResponse parses an HTTP response from a DevGetOneStopOrderWithResponse call
func ParseDevGetOneStopOrderResponse(rsp *http.Response) (*DevGetOneStopOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOneStopOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoporderWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExchangePortfolioSummaryResponse parses an HTTP response from a ExchangePortfolioSummaryWithResponse call
func ParseExchangePortfolioSummaryResponse(rsp *http.Response) (*ExchangePortfolioSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExchangePortfolioSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Summary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevHistoryResponse parses an HTTP response from a DevHistoryWithResponse call
func ParseDevHistoryResponse(rsp *http.Response) (*DevHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest History
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevOrderbookExchangSeccodeResponse parses an HTTP response from a DevOrderbookExchangSeccodeWithResponse call
func ParseDevOrderbookExchangSeccodeResponse(rsp *http.Response) (*DevOrderbookExchangSeccodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevOrderbookExchangSeccodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Orderbook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskRatesResponse parses an HTTP response from a RiskRatesWithResponse call
func ParseRiskRatesResponse(rsp *http.Response) (*RiskRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RiskRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLocalTimeResponse parses an HTTP response from a LocalTimeWithResponse call
func ParseLocalTimeResponse(rsp *http.Response) (*LocalTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossResponse parses an HTTP response from a V2clientordersactionsstopLossWithResponse call
func ParseV2clientordersactionsstopLossResponse(rsp *http.Response) (*V2clientordersactionsstopLossResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossOrderIdResponse parses an HTTP response from a V2clientordersactionsstopLossOrderIdWithResponse call
func ParseV2clientordersactionsstopLossOrderIdResponse(rsp *http.Response) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossLimitResponse parses an HTTP response from a V2clientordersactionsstopLossLimitWithResponse call
func ParseV2clientordersactionsstopLossLimitResponse(rsp *http.Response) (*V2clientordersactionsstopLossLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossLimitOrderIdResponse parses an HTTP response from a V2clientordersactionsstopLossLimitOrderIdWithResponse call
func ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp *http.Response) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossLimitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitResponse parses an HTTP response from a V2clientordersactionstakeProfitWithResponse call
func ParseV2clientordersactionstakeProfitResponse(rsp *http.Response) (*V2clientordersactionstakeProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitOrderIdResponse parses an HTTP response from a V2clientordersactionstakeProfitOrderIdWithResponse call
func ParseV2clientordersactionstakeProfitOrderIdResponse(rsp *http.Response) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitLimitResponse parses an HTTP response from a V2clientordersactionstakeProfitLimitWithResponse call
func ParseV2clientordersactionstakeProfitLimitResponse(rsp *http.Response) (*V2clientordersactionstakeProfitLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitLimitOrderIdResponse parses an HTTP response from a V2clientordersactionstakeProfitLimitOrderIdWithResponse call
func ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp *http.Response) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitLimitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsOrderIdResponse parses an HTTP response from a V2clientordersactionsOrderIdWithResponse call
func ParseV2clientordersactionsOrderIdResponse(rsp *http.Response) (*V2clientordersactionsOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdUnsubscribeResponse parses an HTTP response from a WSProdUnsubscribeWithResponse call
func ParseWSProdUnsubscribeResponse(rsp *http.Response) (*WSProdUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdStopOrdersSubscribeResponse parses an HTTP response from a WSProdStopOrdersSubscribeWithResponse call
func ParseWSProdStopOrdersSubscribeResponse(rsp *http.Response) (*WSProdStopOrdersSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdStopOrdersSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResStopOrdersGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdSummariesGetAndSubscribeV2Response parses an HTTP response from a WSProdSummariesGetAndSubscribeV2WithResponse call
func ParseWSProdSummariesGetAndSubscribeV2Response(rsp *http.Response) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdSummariesGetAndSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResSummariesGetAndSubscribeV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdTradesSubscribeResponse parses an HTTP response from a WSProdTradesSubscribeWithResponse call
func ParseWSProdTradesSubscribeResponse(rsp *http.Response) (*WSProdTradesSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdTradesSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResTradesGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdPositionsSubscribeResponse parses an HTTP response from a WSProdPositionsSubscribeWithResponse call
func ParseWSProdPositionsSubscribeResponse(rsp *http.Response) (*WSProdPositionsSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdPositionsSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResPositionsGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdQuotesSubscribeResponse parses an HTTP response from a WSProdQuotesSubscribeWithResponse call
func ParseWSProdQuotesSubscribeResponse(rsp *http.Response) (*WSProdQuotesSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdQuotesSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResQuotesSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdBarsGetResponse parses an HTTP response from a WSProdBarsGetWithResponse call
func ParseWSProdBarsGetResponse(rsp *http.Response) (*WSProdBarsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdBarsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResBarsGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdOrderBookResponse parses an HTTP response from a WSProdOrderBookWithResponse call
func ParseWSProdOrderBookResponse(rsp *http.Response) (*WSProdOrderBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdOrderBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResOrderBookGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdRisksGetAndSubscribeResponse parses an HTTP response from a WSProdRisksGetAndSubscribeWithResponse call
func ParseWSProdRisksGetAndSubscribeResponse(rsp *http.Response) (*WSProdRisksGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdRisksGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResRisksGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdOrdersSubscribeResponse parses an HTTP response from a WSProdOrdersSubscribeWithResponse call
func ParseWSProdOrdersSubscribeResponse(rsp *http.Response) (*WSProdOrdersSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdOrdersSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResOrdersGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdSpectraRisksGetAndSubscribeResponse parses an HTTP response from a WSProdSpectraRisksGetAndSubscribeWithResponse call
func ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp *http.Response) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdSpectraRisksGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResSpectraRisksGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdStopOrdersSubscribeV2Response parses an HTTP response from a WSProdStopOrdersSubscribeV2WithResponse call
func ParseWSProdStopOrdersSubscribeV2Response(rsp *http.Response) (*WSProdStopOrdersSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdStopOrdersSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResStopOrdersGetAndSubscribeWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdAllTradesGetAndSubscribeResponse parses an HTTP response from a WSProdAllTradesGetAndSubscribeWithResponse call
func ParseWSProdAllTradesGetAndSubscribeResponse(rsp *http.Response) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdAllTradesGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest Alltrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdInstrumentsGetAndSubscribeV2Response parses an HTTP response from a WSProdInstrumentsGetAndSubscribeV2WithResponse call
func ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp *http.Response) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdInstrumentsGetAndSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка серверов портфелей
	// (GET /client/v1.0/users/{username}/portfolios)
	DevUserPortfolio(ctx echo.Context, username string) error
	// Создание лимитной заявки
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/actions/limit)
	CommandAPIv2clientordersactionslimit(ctx echo.Context, params CommandAPIv2clientordersactionslimitParams) error
	// Изменение лимитной заявки
	// (PUT /commandapi/warptrans/TRADE/v2/client/orders/actions/limit/{orderId})
	CommandAPIv2clientordersactionslimitput(ctx echo.Context, orderId string, params CommandAPIv2clientordersactionslimitputParams) error
	// Создание рыночной заявки
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/actions/market)
	CommandAPIv2clientordersactionsmarket(ctx echo.Context, params CommandAPIv2clientordersactionsmarketParams) error
	// Изменение рыночной заявки
	// (PUT /commandapi/warptrans/TRADE/v2/client/orders/actions/market/{orderId})
	CommandAPIv2clientordersactionsmarketput(ctx echo.Context, orderId string, params CommandAPIv2clientordersactionsmarketputParams) error
	// Создание стоп заявки
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/actions/stop)
	CommandAPIv2clientordersactionsstop(ctx echo.Context, params CommandAPIv2clientordersactionsstopParams) error
	// Создание стоп-лимитной заявки
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit)
	CommandAPIv2clientordersactionsstopLimit(ctx echo.Context, params CommandAPIv2clientordersactionsstopLimitParams) error
	// Изменение стоп-лимитной заявки
	// (PUT /commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit/{stopOrderId})
	CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx echo.Context, stopOrderId int, params CommandAPIv2clientordersactionsstopLimitStopOrderIdParams) error
	// Провести оценку одной заявки
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/estimate)
	V2clientordersactionsestimate(ctx echo.Context) error
	// Провести оценку нескольких заявок
	// (POST /commandapi/warptrans/TRADE/v2/client/orders/estimate/all)
	V2clientordersactionsestimateall(ctx echo.Context) error
	// Снятие заявки
	// (DELETE /commandapi/warptrans/TRADE/v2/client/orders/{orderId})
	CommandAPIv2clientordersdelete(ctx echo.Context, orderId int, params CommandAPIv2clientordersdeleteParams) error
	// Снятие заявки
	// (DELETE /commandapi/warptrans/TRADE/v2/client/orders/{orderId}/)
	CommandAPIWarpv2clientordersdelete(ctx echo.Context, orderId int, params CommandAPIWarpv2clientordersdeleteParams) error
	// Получение истории сделок
	// (GET /md/stats/{exchange}/{portfolio}/history/trades)
	TradeStats(ctx echo.Context, exchange TradeStatsParamsExchange, portfolio string, params TradeStatsParams) error
	// Получение истории сделок (один тикер)
	// (GET /md/stats/{exchange}/{portfolio}/history/trades/{symbol})
	TradeStatsBySymbol(ctx echo.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params TradeStatsBySymbolParams) error
	// Получение информации о рисках на срочном рынке
	// (GET /md/v2/Clients/{exchange}/{portfolio}/fortsrisk)
	Fortsrisk(ctx echo.Context, exchange FortsriskParamsExchange, portfolio string, params FortsriskParams) error
	// Получение информации о позициях
	// (GET /md/v2/Clients/{exchange}/{portfolio}/positions)
	DevGetAllPositions(ctx echo.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params DevGetAllPositionsParams) error
	// Получение информации о позициях выбранного инструмента
	// (GET /md/v2/Clients/{exchange}/{portfolio}/positions/{symbol})
	DevGetOnePosition(ctx echo.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params DevGetOnePositionParams) error
	// Получение информации о рисках
	// (GET /md/v2/Clients/{exchange}/{portfolio}/risk)
	Risk(ctx echo.Context, exchange RiskParamsExchange, portfolio string, params RiskParams) error
	// Получение информации о сделках
	// (GET /md/v2/Clients/{exchange}/{portfolio}/trades)
	DevGetAllTrades(ctx echo.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params DevGetAllTradesParams) error
	// Получение информации о сделках по выбранному инструменту
	// (GET /md/v2/Clients/{exchange}/{portfolio}/{ticker}/trades)
	DevGetTickerTrades(ctx echo.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params DevGetTickerTradesParams) error
	// Получение информации о торговых инструментах
	// (GET /md/v2/Securities)
	DevSecuritiesSearch(ctx echo.Context, params DevSecuritiesSearchParams) error
	// Получение информации о торговых инструментах на выбранной бирже
	// (GET /md/v2/Securities/{exchange})
	DevSecuritiesSearchExchange(ctx echo.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params DevSecuritiesSearchExchangeParams) error
	// Получение информации о выбранном финансовом инструменте
	// (GET /md/v2/Securities/{exchange}/{symbol})
	DevSecuritiesSearchExchangeCode(ctx echo.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params DevSecuritiesSearchExchangeCodeParams) error
	// Получение котировки по ближайшему фьючерсу (код)
	// (GET /md/v2/Securities/{exchange}/{symbol}/actualFuturesQuote)
	DevSecuritiesFutures(ctx echo.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params DevSecuritiesFuturesParams) error
	// Получение информации о всех сделках по ценным бумагам за сегодня
	// (GET /md/v2/Securities/{exchange}/{symbol}/alltrades)
	DevSecuritiesSearchAllTrades(ctx echo.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params DevSecuritiesSearchAllTradesParams) error
	// Получение информации о котировках для выбранных инструментов
	// (GET /md/v2/Securities/{symbols}/quotes)
	DevQuotes(ctx echo.Context, symbols string, params DevQuotesParams) error
	// Получение информации по деньгам для выбранного портфеля
	// (GET /md/v2/clients/legacy/{exchange}/{portfolio}/money)
	ExchangePortfolioMoney(ctx echo.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params ExchangePortfolioMoneyParams) error
	// Получение информации о всех заявках
	// (GET /md/v2/clients/{exchange}/{portfolio}/orders)
	DevGetAllOrders(ctx echo.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params DevGetAllOrdersParams) error
	// Получение информации о выбранной заявке
	// (GET /md/v2/clients/{exchange}/{portfolio}/orders/{orderId})
	DevGetOneOrder(ctx echo.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params DevGetOneOrderParams) error
	// Получение информации о стоп-заявках
	// (GET /md/v2/clients/{exchange}/{portfolio}/stoporders)
	DevGetAllStopOrders(ctx echo.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params DevGetAllStopOrdersParams) error
	// Получение информации о выбранной стоп-заявке
	// (GET /md/v2/clients/{exchange}/{portfolio}/stoporders/{orderId})
	DevGetOneStopOrder(ctx echo.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params DevGetOneStopOrderParams) error
	// Получение информации о портфеле
	// (GET /md/v2/clients/{exchange}/{portfolio}/summary)
	ExchangePortfolioSummary(ctx echo.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params ExchangePortfolioSummaryParams) error
	// Запрос истории для выбранных биржи и инструмента
	// (GET /md/v2/history)
	DevHistory(ctx echo.Context, params DevHistoryParams) error
	// Получение информации о биржевом стакане
	// (GET /md/v2/orderbooks/{exchange}/{seccode})
	DevOrderbookExchangSeccode(ctx echo.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params DevOrderbookExchangSeccodeParams) error
	// Запрос ставок риска
	// (GET /md/v2/risk/rates)
	RiskRates(ctx echo.Context, params RiskRatesParams) error
	// Запрос текущего UTC времени в формате Unix
	// (GET /md/v2/time)
	LocalTime(ctx echo.Context) error
	// Создание стоп-лосс заявки
	// (POST /warptrans/{tradeServerCode}/v2/client/orders/actions/stopLoss)
	V2clientordersactionsstopLoss(ctx echo.Context, tradeServerCode string, params V2clientordersactionsstopLossParams) error
	// Изменение стоп-лосс заявки
	// (PUT /warptrans/{tradeServerCode}/v2/client/orders/actions/stopLoss/{orderId})
	V2clientordersactionsstopLossOrderId(ctx echo.Context, tradeServerCode string, orderId int, params V2clientordersactionsstopLossOrderIdParams) error
	// Создание стоп-лосс лимит заявки
	// (POST /warptrans/{tradeServerCode}/v2/client/orders/actions/stopLossLimit)
	V2clientordersactionsstopLossLimit(ctx echo.Context, tradeServerCode string, params V2clientordersactionsstopLossLimitParams) error
	// Изменение стоп-лосс лимит заявки
	// (PUT /warptrans/{tradeServerCode}/v2/client/orders/actions/stopLossLimit/{orderId})
	V2clientordersactionsstopLossLimitOrderId(ctx echo.Context, tradeServerCode string, orderId int, params V2clientordersactionsstopLossLimitOrderIdParams) error
	// Создание стоп-заявки
	// (POST /warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfit)
	V2clientordersactionstakeProfit(ctx echo.Context, tradeServerCode string, params V2clientordersactionstakeProfitParams) error
	// Изменение стоп-заявки
	// (PUT /warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfit/{orderId})
	V2clientordersactionstakeProfitOrderId(ctx echo.Context, tradeServerCode string, orderId int, params V2clientordersactionstakeProfitOrderIdParams) error
	// Создание стоп-лимит заявки
	// (POST /warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfitLimit)
	V2clientordersactionstakeProfitLimit(ctx echo.Context, tradeServerCode string, params V2clientordersactionstakeProfitLimitParams) error
	// Изменение стоп-лимит заявки
	// (PUT /warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfitLimit/{orderId})
	V2clientordersactionstakeProfitLimitOrderId(ctx echo.Context, tradeServerCode string, orderId int, params V2clientordersactionstakeProfitLimitOrderIdParams) error
	// Снятие стоп-заявки
	// (DELETE /warptrans/{tradeServerCode}/v2/client/orders/{orderId})
	V2clientordersactionsOrderId(ctx echo.Context, tradeServerCode string, orderId int, params V2clientordersactionsOrderIdParams) error
	// WebSocket отмена существующей подписки.
	// (TRACE /ws        )
	WSProdUnsubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию о стоп-заявках
	// (TRACE /ws         )
	WSProdStopOrdersSubscribe(ctx echo.Context) error
	// WebSocket подписка на сводную информацию по портфелю
	// (TRACE /ws          )
	WSProdSummariesGetAndSubscribeV2(ctx echo.Context) error
	// WebSocket подписка на сделки
	// (TRACE /ws           )
	WSProdTradesSubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию о текущих позиция по торговым инструментам и деньгам
	// (TRACE /ws            )
	WSProdPositionsSubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию о котировках
	// (TRACE /ws             )
	WSProdQuotesSubscribe(ctx echo.Context) error
	// WebSocket подписка на историю цен (свечи)
	// (TRACE /ws              )
	WSProdBarsGet(ctx echo.Context) error
	// WebSocket подписка на "биржевой стакан"
	// (TRACE /ws               )
	WSProdOrderBook(ctx echo.Context) error
	// WebSocket подписка на информацию по портфельным рискам
	// (TRACE /ws                )
	WSProdRisksGetAndSubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию о заявках
	// (TRACE /ws                 )
	WSProdOrdersSubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию по рискам срочного рынка (FORTS)
	// (TRACE /ws                  )
	WSProdSpectraRisksGetAndSubscribe(ctx echo.Context) error
	// WebSocket подписка на информацию о стоп-заявках
	// (TRACE /ws                   )
	WSProdStopOrdersSubscribeV2(ctx echo.Context) error
	// WebSocket подписка на все сделки
	// (TRACE /ws                    )
	WSProdAllTradesGetAndSubscribe(ctx echo.Context) error
	// WebSocket подписка на изменение информации о финансовых инструментах
	// (TRACE /ws                     )
	WSProdInstrumentsGetAndSubscribeV2(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DevUserPortfolio converts echo context to params.
func (w *ServerInterfaceWrapper) DevUserPortfolio(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevUserPortfolio(ctx, username)
	return err
}

// CommandAPIv2clientordersactionslimit converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionslimit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionslimitParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionslimit(ctx, params)
	return err
}

// CommandAPIv2clientordersactionslimitput converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionslimitput(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionslimitputParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionslimitput(ctx, orderId, params)
	return err
}

// CommandAPIv2clientordersactionsmarket converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionsmarket(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionsmarketParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionsmarket(ctx, params)
	return err
}

// CommandAPIv2clientordersactionsmarketput converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionsmarketput(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionsmarketputParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionsmarketput(ctx, orderId, params)
	return err
}

// CommandAPIv2clientordersactionsstop converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionsstop(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionsstopParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionsstop(ctx, params)
	return err
}

// CommandAPIv2clientordersactionsstopLimit converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionsstopLimit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionsstopLimitParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionsstopLimit(ctx, params)
	return err
}

// CommandAPIv2clientordersactionsstopLimitStopOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stopOrderId" -------------
	var stopOrderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "stopOrderId", runtime.ParamLocationPath, ctx.Param("stopOrderId"), &stopOrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stopOrderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersactionsstopLimitStopOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx, stopOrderId, params)
	return err
}

// V2clientordersactionsestimate converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsestimate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsestimate(ctx)
	return err
}

// V2clientordersactionsestimateall converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsestimateall(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsestimateall(ctx)
	return err
}

// CommandAPIv2clientordersdelete converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIv2clientordersdelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIv2clientordersdeleteParams
	// ------------- Required query parameter "portfolio" -------------

	err = runtime.BindQueryParameter("form", true, true, "portfolio", ctx.QueryParams(), &params.Portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Required query parameter "exchange" -------------

	err = runtime.BindQueryParameter("form", true, true, "exchange", ctx.QueryParams(), &params.Exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Required query parameter "stop" -------------

	err = runtime.BindQueryParameter("form", true, true, "stop", ctx.QueryParams(), &params.Stop)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stop: %s", err))
	}

	// ------------- Optional query parameter "jsonResponse" -------------

	err = runtime.BindQueryParameter("form", true, false, "jsonResponse", ctx.QueryParams(), &params.JsonResponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jsonResponse: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIv2clientordersdelete(ctx, orderId, params)
	return err
}

// CommandAPIWarpv2clientordersdelete converts echo context to params.
func (w *ServerInterfaceWrapper) CommandAPIWarpv2clientordersdelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommandAPIWarpv2clientordersdeleteParams
	// ------------- Required query parameter "portfolio" -------------

	err = runtime.BindQueryParameter("form", true, true, "portfolio", ctx.QueryParams(), &params.Portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Required query parameter "exchange" -------------

	err = runtime.BindQueryParameter("form", true, true, "exchange", ctx.QueryParams(), &params.Exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Required query parameter "stop" -------------

	err = runtime.BindQueryParameter("form", true, true, "stop", ctx.QueryParams(), &params.Stop)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stop: %s", err))
	}

	// ------------- Optional query parameter "jsonResponse" -------------

	err = runtime.BindQueryParameter("form", true, false, "jsonResponse", ctx.QueryParams(), &params.JsonResponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jsonResponse: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CommandAPIWarpv2clientordersdelete(ctx, orderId, params)
	return err
}

// TradeStats converts echo context to params.
func (w *ServerInterfaceWrapper) TradeStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange TradeStatsParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TradeStatsParams
	// ------------- Optional query parameter "dateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateFrom", ctx.QueryParams(), &params.DateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dateFrom: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "descending" -------------

	err = runtime.BindQueryParameter("form", true, false, "descending", ctx.QueryParams(), &params.Descending)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter descending: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TradeStats(ctx, exchange, portfolio, params)
	return err
}

// TradeStatsBySymbol converts echo context to params.
func (w *ServerInterfaceWrapper) TradeStatsBySymbol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange TradeStatsBySymbolParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol", runtime.ParamLocationPath, ctx.Param("symbol"), &symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TradeStatsBySymbolParams
	// ------------- Optional query parameter "dateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateFrom", ctx.QueryParams(), &params.DateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dateFrom: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "descending" -------------

	err = runtime.BindQueryParameter("form", true, false, "descending", ctx.QueryParams(), &params.Descending)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter descending: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TradeStatsBySymbol(ctx, exchange, portfolio, symbol, params)
	return err
}

// Fortsrisk converts echo context to params.
func (w *ServerInterfaceWrapper) Fortsrisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange FortsriskParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FortsriskParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Fortsrisk(ctx, exchange, portfolio, params)
	return err
}

// DevGetAllPositions converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetAllPositions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetAllPositionsParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetAllPositionsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "withoutCurrency" -------------

	err = runtime.BindQueryParameter("form", true, false, "withoutCurrency", ctx.QueryParams(), &params.WithoutCurrency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter withoutCurrency: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetAllPositions(ctx, exchange, portfolio, params)
	return err
}

// DevGetOnePosition converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetOnePosition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetOnePositionParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol", runtime.ParamLocationPath, ctx.Param("symbol"), &symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetOnePositionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetOnePosition(ctx, exchange, portfolio, symbol, params)
	return err
}

// Risk converts echo context to params.
func (w *ServerInterfaceWrapper) Risk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange RiskParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RiskParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Risk(ctx, exchange, portfolio, params)
	return err
}

// DevGetAllTrades converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetAllTrades(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetAllTradesParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetAllTradesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetAllTrades(ctx, exchange, portfolio, params)
	return err
}

// DevGetTickerTrades converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetTickerTrades(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetTickerTradesParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Path parameter "ticker" -------------
	var ticker string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ticker", runtime.ParamLocationPath, ctx.Param("ticker"), &ticker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticker: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetTickerTradesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetTickerTrades(ctx, exchange, portfolio, ticker, params)
	return err
}

// DevSecuritiesSearch converts echo context to params.
func (w *ServerInterfaceWrapper) DevSecuritiesSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevSecuritiesSearchParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sector" -------------

	err = runtime.BindQueryParameter("form", true, false, "sector", ctx.QueryParams(), &params.Sector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sector: %s", err))
	}

	// ------------- Optional query parameter "cficode" -------------

	err = runtime.BindQueryParameter("form", true, false, "cficode", ctx.QueryParams(), &params.Cficode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cficode: %s", err))
	}

	// ------------- Optional query parameter "exchange" -------------

	err = runtime.BindQueryParameter("form", true, false, "exchange", ctx.QueryParams(), &params.Exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevSecuritiesSearch(ctx, params)
	return err
}

// DevSecuritiesSearchExchange converts echo context to params.
func (w *ServerInterfaceWrapper) DevSecuritiesSearchExchange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevSecuritiesSearchExchangeParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevSecuritiesSearchExchangeParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevSecuritiesSearchExchange(ctx, exchange, params)
	return err
}

// DevSecuritiesSearchExchangeCode converts echo context to params.
func (w *ServerInterfaceWrapper) DevSecuritiesSearchExchangeCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevSecuritiesSearchExchangeCodeParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol", runtime.ParamLocationPath, ctx.Param("symbol"), &symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevSecuritiesSearchExchangeCodeParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevSecuritiesSearchExchangeCode(ctx, exchange, symbol, params)
	return err
}

// DevSecuritiesFutures converts echo context to params.
func (w *ServerInterfaceWrapper) DevSecuritiesFutures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevSecuritiesFuturesParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol", runtime.ParamLocationPath, ctx.Param("symbol"), &symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevSecuritiesFuturesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevSecuritiesFutures(ctx, exchange, symbol, params)
	return err
}

// DevSecuritiesSearchAllTrades converts echo context to params.
func (w *ServerInterfaceWrapper) DevSecuritiesSearchAllTrades(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevSecuritiesSearchAllTradesParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol", runtime.ParamLocationPath, ctx.Param("symbol"), &symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevSecuritiesSearchAllTradesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "descending" -------------

	err = runtime.BindQueryParameter("form", true, false, "descending", ctx.QueryParams(), &params.Descending)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter descending: %s", err))
	}

	// ------------- Optional query parameter "includeVirtualTrades" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeVirtualTrades", ctx.QueryParams(), &params.IncludeVirtualTrades)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeVirtualTrades: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevSecuritiesSearchAllTrades(ctx, exchange, symbol, params)
	return err
}

// DevQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) DevQuotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "symbols" -------------
	var symbols string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbols", runtime.ParamLocationPath, ctx.Param("symbols"), &symbols)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbols: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevQuotesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevQuotes(ctx, symbols, params)
	return err
}

// ExchangePortfolioMoney converts echo context to params.
func (w *ServerInterfaceWrapper) ExchangePortfolioMoney(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange ExchangePortfolioMoneyParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExchangePortfolioMoneyParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExchangePortfolioMoney(ctx, exchange, portfolio, params)
	return err
}

// DevGetAllOrders converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetAllOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetAllOrdersParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetAllOrdersParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetAllOrders(ctx, exchange, portfolio, params)
	return err
}

// DevGetOneOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetOneOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetOneOrderParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetOneOrderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetOneOrder(ctx, exchange, portfolio, orderId, params)
	return err
}

// DevGetAllStopOrders converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetAllStopOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetAllStopOrdersParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetAllStopOrdersParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetAllStopOrders(ctx, exchange, portfolio, params)
	return err
}

// DevGetOneStopOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DevGetOneStopOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevGetOneStopOrderParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevGetOneStopOrderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevGetOneStopOrder(ctx, exchange, portfolio, orderId, params)
	return err
}

// ExchangePortfolioSummary converts echo context to params.
func (w *ServerInterfaceWrapper) ExchangePortfolioSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange ExchangePortfolioSummaryParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "portfolio" -------------
	var portfolio string

	err = runtime.BindStyledParameterWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, ctx.Param("portfolio"), &portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExchangePortfolioSummaryParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExchangePortfolioSummary(ctx, exchange, portfolio, params)
	return err
}

// DevHistory converts echo context to params.
func (w *ServerInterfaceWrapper) DevHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevHistoryParams
	// ------------- Required query parameter "symbol" -------------

	err = runtime.BindQueryParameter("form", true, true, "symbol", ctx.QueryParams(), &params.Symbol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	// ------------- Required query parameter "exchange" -------------

	err = runtime.BindQueryParameter("form", true, true, "exchange", ctx.QueryParams(), &params.Exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Required query parameter "tf" -------------

	err = runtime.BindQueryParameter("form", true, true, "tf", ctx.QueryParams(), &params.Tf)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tf: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "untraded" -------------

	err = runtime.BindQueryParameter("form", true, false, "untraded", ctx.QueryParams(), &params.Untraded)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter untraded: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevHistory(ctx, params)
	return err
}

// DevOrderbookExchangSeccode converts echo context to params.
func (w *ServerInterfaceWrapper) DevOrderbookExchangSeccode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exchange" -------------
	var exchange DevOrderbookExchangSeccodeParamsExchange

	err = runtime.BindStyledParameterWithLocation("simple", false, "exchange", runtime.ParamLocationPath, ctx.Param("exchange"), &exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Path parameter "seccode" -------------
	var seccode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "seccode", runtime.ParamLocationPath, ctx.Param("seccode"), &seccode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seccode: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevOrderbookExchangSeccodeParams
	// ------------- Optional query parameter "depth" -------------

	err = runtime.BindQueryParameter("form", true, false, "depth", ctx.QueryParams(), &params.Depth)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter depth: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevOrderbookExchangSeccode(ctx, exchange, seccode, params)
	return err
}

// RiskRates converts echo context to params.
func (w *ServerInterfaceWrapper) RiskRates(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RiskRatesParams
	// ------------- Required query parameter "exchange" -------------

	err = runtime.BindQueryParameter("form", false, true, "exchange", ctx.QueryParams(), &params.Exchange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exchange: %s", err))
	}

	// ------------- Optional query parameter "ticker" -------------

	err = runtime.BindQueryParameter("form", true, false, "ticker", ctx.QueryParams(), &params.Ticker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticker: %s", err))
	}

	// ------------- Optional query parameter "riskCategoryId" -------------

	err = runtime.BindQueryParameter("form", true, false, "riskCategoryId", ctx.QueryParams(), &params.RiskCategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter riskCategoryId: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskRates(ctx, params)
	return err
}

// LocalTime converts echo context to params.
func (w *ServerInterfaceWrapper) LocalTime(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LocalTime(ctx)
	return err
}

// V2clientordersactionsstopLoss converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsstopLoss(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionsstopLossParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsstopLoss(ctx, tradeServerCode, params)
	return err
}

// V2clientordersactionsstopLossOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsstopLossOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionsstopLossOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsstopLossOrderId(ctx, tradeServerCode, orderId, params)
	return err
}

// V2clientordersactionsstopLossLimit converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsstopLossLimit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionsstopLossLimitParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsstopLossLimit(ctx, tradeServerCode, params)
	return err
}

// V2clientordersactionsstopLossLimitOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsstopLossLimitOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionsstopLossLimitOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsstopLossLimitOrderId(ctx, tradeServerCode, orderId, params)
	return err
}

// V2clientordersactionstakeProfit converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionstakeProfit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionstakeProfitParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionstakeProfit(ctx, tradeServerCode, params)
	return err
}

// V2clientordersactionstakeProfitOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionstakeProfitOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionstakeProfitOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionstakeProfitOrderId(ctx, tradeServerCode, orderId, params)
	return err
}

// V2clientordersactionstakeProfitLimit converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionstakeProfitLimit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionstakeProfitLimitParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionstakeProfitLimit(ctx, tradeServerCode, params)
	return err
}

// V2clientordersactionstakeProfitLimitOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionstakeProfitLimitOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionstakeProfitLimitOrderIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionstakeProfitLimitOrderId(ctx, tradeServerCode, orderId, params)
	return err
}

// V2clientordersactionsOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) V2clientordersactionsOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tradeServerCode" -------------
	var tradeServerCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, ctx.Param("tradeServerCode"), &tradeServerCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tradeServerCode: %s", err))
	}

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2clientordersactionsOrderIdParams
	// ------------- Required query parameter "portfolio" -------------

	err = runtime.BindQueryParameter("form", true, true, "portfolio", ctx.QueryParams(), &params.Portfolio)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter portfolio: %s", err))
	}

	// ------------- Required query parameter "stop" -------------

	err = runtime.BindQueryParameter("form", true, true, "stop", ctx.QueryParams(), &params.Stop)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stop: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-ALOR-REQID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-ALOR-REQID")]; found {
		var XALORREQID string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-ALOR-REQID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, valueList[0], &XALORREQID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-ALOR-REQID: %s", err))
		}

		params.XALORREQID = XALORREQID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-ALOR-REQID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V2clientordersactionsOrderId(ctx, tradeServerCode, orderId, params)
	return err
}

// WSProdUnsubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdUnsubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdUnsubscribe(ctx)
	return err
}

// WSProdStopOrdersSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdStopOrdersSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdStopOrdersSubscribe(ctx)
	return err
}

// WSProdSummariesGetAndSubscribeV2 converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdSummariesGetAndSubscribeV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdSummariesGetAndSubscribeV2(ctx)
	return err
}

// WSProdTradesSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdTradesSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdTradesSubscribe(ctx)
	return err
}

// WSProdPositionsSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdPositionsSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdPositionsSubscribe(ctx)
	return err
}

// WSProdQuotesSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdQuotesSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdQuotesSubscribe(ctx)
	return err
}

// WSProdBarsGet converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdBarsGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdBarsGet(ctx)
	return err
}

// WSProdOrderBook converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdOrderBook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdOrderBook(ctx)
	return err
}

// WSProdRisksGetAndSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdRisksGetAndSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdRisksGetAndSubscribe(ctx)
	return err
}

// WSProdOrdersSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdOrdersSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdOrdersSubscribe(ctx)
	return err
}

// WSProdSpectraRisksGetAndSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdSpectraRisksGetAndSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdSpectraRisksGetAndSubscribe(ctx)
	return err
}

// WSProdStopOrdersSubscribeV2 converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdStopOrdersSubscribeV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdStopOrdersSubscribeV2(ctx)
	return err
}

// WSProdAllTradesGetAndSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdAllTradesGetAndSubscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdAllTradesGetAndSubscribe(ctx)
	return err
}

// WSProdInstrumentsGetAndSubscribeV2 converts echo context to params.
func (w *ServerInterfaceWrapper) WSProdInstrumentsGetAndSubscribeV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WSProdInstrumentsGetAndSubscribeV2(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/client/v1.0/users/:username/portfolios", wrapper.DevUserPortfolio)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/limit", wrapper.CommandAPIv2clientordersactionslimit)
	router.PUT(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/limit/:orderId", wrapper.CommandAPIv2clientordersactionslimitput)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/market", wrapper.CommandAPIv2clientordersactionsmarket)
	router.PUT(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/market/:orderId", wrapper.CommandAPIv2clientordersactionsmarketput)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/stop", wrapper.CommandAPIv2clientordersactionsstop)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit", wrapper.CommandAPIv2clientordersactionsstopLimit)
	router.PUT(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit/:stopOrderId", wrapper.CommandAPIv2clientordersactionsstopLimitStopOrderId)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/estimate", wrapper.V2clientordersactionsestimate)
	router.POST(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/estimate/all", wrapper.V2clientordersactionsestimateall)
	router.DELETE(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/:orderId", wrapper.CommandAPIv2clientordersdelete)
	router.DELETE(baseURL+"/commandapi/warptrans/TRADE/v2/client/orders/:orderId/", wrapper.CommandAPIWarpv2clientordersdelete)
	router.GET(baseURL+"/md/stats/:exchange/:portfolio/history/trades", wrapper.TradeStats)
	router.GET(baseURL+"/md/stats/:exchange/:portfolio/history/trades/:symbol", wrapper.TradeStatsBySymbol)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/fortsrisk", wrapper.Fortsrisk)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/positions", wrapper.DevGetAllPositions)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/positions/:symbol", wrapper.DevGetOnePosition)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/risk", wrapper.Risk)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/trades", wrapper.DevGetAllTrades)
	router.GET(baseURL+"/md/v2/Clients/:exchange/:portfolio/:ticker/trades", wrapper.DevGetTickerTrades)
	router.GET(baseURL+"/md/v2/Securities", wrapper.DevSecuritiesSearch)
	router.GET(baseURL+"/md/v2/Securities/:exchange", wrapper.DevSecuritiesSearchExchange)
	router.GET(baseURL+"/md/v2/Securities/:exchange/:symbol", wrapper.DevSecuritiesSearchExchangeCode)
	router.GET(baseURL+"/md/v2/Securities/:exchange/:symbol/actualFuturesQuote", wrapper.DevSecuritiesFutures)
	router.GET(baseURL+"/md/v2/Securities/:exchange/:symbol/alltrades", wrapper.DevSecuritiesSearchAllTrades)
	router.GET(baseURL+"/md/v2/Securities/:symbols/quotes", wrapper.DevQuotes)
	router.GET(baseURL+"/md/v2/clients/legacy/:exchange/:portfolio/money", wrapper.ExchangePortfolioMoney)
	router.GET(baseURL+"/md/v2/clients/:exchange/:portfolio/orders", wrapper.DevGetAllOrders)
	router.GET(baseURL+"/md/v2/clients/:exchange/:portfolio/orders/:orderId", wrapper.DevGetOneOrder)
	router.GET(baseURL+"/md/v2/clients/:exchange/:portfolio/stoporders", wrapper.DevGetAllStopOrders)
	router.GET(baseURL+"/md/v2/clients/:exchange/:portfolio/stoporders/:orderId", wrapper.DevGetOneStopOrder)
	router.GET(baseURL+"/md/v2/clients/:exchange/:portfolio/summary", wrapper.ExchangePortfolioSummary)
	router.GET(baseURL+"/md/v2/history", wrapper.DevHistory)
	router.GET(baseURL+"/md/v2/orderbooks/:exchange/:seccode", wrapper.DevOrderbookExchangSeccode)
	router.GET(baseURL+"/md/v2/risk/rates", wrapper.RiskRates)
	router.GET(baseURL+"/md/v2/time", wrapper.LocalTime)
	router.POST(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/stopLoss", wrapper.V2clientordersactionsstopLoss)
	router.PUT(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/stopLoss/:orderId", wrapper.V2clientordersactionsstopLossOrderId)
	router.POST(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/stopLossLimit", wrapper.V2clientordersactionsstopLossLimit)
	router.PUT(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/stopLossLimit/:orderId", wrapper.V2clientordersactionsstopLossLimitOrderId)
	router.POST(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/takeProfit", wrapper.V2clientordersactionstakeProfit)
	router.PUT(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/takeProfit/:orderId", wrapper.V2clientordersactionstakeProfitOrderId)
	router.POST(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/takeProfitLimit", wrapper.V2clientordersactionstakeProfitLimit)
	router.PUT(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/actions/takeProfitLimit/:orderId", wrapper.V2clientordersactionstakeProfitLimitOrderId)
	router.DELETE(baseURL+"/warptrans/:tradeServerCode/v2/client/orders/:orderId", wrapper.V2clientordersactionsOrderId)
	router.TRACE(baseURL+"/ws        ", wrapper.WSProdUnsubscribe)
	router.TRACE(baseURL+"/ws         ", wrapper.WSProdStopOrdersSubscribe)
	router.TRACE(baseURL+"/ws          ", wrapper.WSProdSummariesGetAndSubscribeV2)
	router.TRACE(baseURL+"/ws           ", wrapper.WSProdTradesSubscribe)
	router.TRACE(baseURL+"/ws            ", wrapper.WSProdPositionsSubscribe)
	router.TRACE(baseURL+"/ws             ", wrapper.WSProdQuotesSubscribe)
	router.TRACE(baseURL+"/ws              ", wrapper.WSProdBarsGet)
	router.TRACE(baseURL+"/ws               ", wrapper.WSProdOrderBook)
	router.TRACE(baseURL+"/ws                ", wrapper.WSProdRisksGetAndSubscribe)
	router.TRACE(baseURL+"/ws                 ", wrapper.WSProdOrdersSubscribe)
	router.TRACE(baseURL+"/ws                  ", wrapper.WSProdSpectraRisksGetAndSubscribe)
	router.TRACE(baseURL+"/ws                   ", wrapper.WSProdStopOrdersSubscribeV2)
	router.TRACE(baseURL+"/ws                    ", wrapper.WSProdAllTradesGetAndSubscribe)
	router.TRACE(baseURL+"/ws                     ", wrapper.WSProdInstrumentsGetAndSubscribeV2)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4PnQBLyKAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
