// Package alor4go provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package alor4go

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AlltradeSide.
const (
	AlltradeSideBuy  AlltradeSide = "buy"
	AlltradeSideSell AlltradeSide = "sell"
)

// Defines values for BodyrequestOrdersActionsLimitTVSide.
const (
	BodyrequestOrdersActionsLimitTVSideBuy  BodyrequestOrdersActionsLimitTVSide = "buy"
	BodyrequestOrdersActionsLimitTVSideSell BodyrequestOrdersActionsLimitTVSide = "sell"
)

// Defines values for BodyrequestOrdersActionsLimitTVputSide.
const (
	BodyrequestOrdersActionsLimitTVputSideBuy  BodyrequestOrdersActionsLimitTVputSide = "buy"
	BodyrequestOrdersActionsLimitTVputSideSell BodyrequestOrdersActionsLimitTVputSide = "sell"
)

// Defines values for BodyrequestOrdersActionsMarketTVSide.
const (
	BodyrequestOrdersActionsMarketTVSideBuy  BodyrequestOrdersActionsMarketTVSide = "buy"
	BodyrequestOrdersActionsMarketTVSideSell BodyrequestOrdersActionsMarketTVSide = "sell"
)

// Defines values for BodyrequestOrdersActionsMarketTVputSide.
const (
	BodyrequestOrdersActionsMarketTVputSideBuy  BodyrequestOrdersActionsMarketTVputSide = "buy"
	BodyrequestOrdersActionsMarketTVputSideSell BodyrequestOrdersActionsMarketTVputSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopSide.
const (
	BodyrequestOrdersActionsStopSideBuy  BodyrequestOrdersActionsStopSide = "buy"
	BodyrequestOrdersActionsStopSideSell BodyrequestOrdersActionsStopSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopLimitTVWarpSide.
const (
	BodyrequestOrdersActionsStopLimitTVWarpSideBuy  BodyrequestOrdersActionsStopLimitTVWarpSide = "buy"
	BodyrequestOrdersActionsStopLimitTVWarpSideSell BodyrequestOrdersActionsStopLimitTVWarpSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStopMarketTVWarpSide.
const (
	BodyrequestOrdersActionsStopMarketTVWarpSideBuy  BodyrequestOrdersActionsStopMarketTVWarpSide = "buy"
	BodyrequestOrdersActionsStopMarketTVWarpSideSell BodyrequestOrdersActionsStopMarketTVWarpSide = "sell"
)

// Defines values for BodyrequestOrdersActionsStoplimitSide.
const (
	BodyrequestOrdersActionsStoplimitSideBuy  BodyrequestOrdersActionsStoplimitSide = "buy"
	BodyrequestOrdersActionsStoplimitSideSell BodyrequestOrdersActionsStoplimitSide = "sell"
)

// Defines values for OrderSide.
const (
	OrderSideBuy  OrderSide = "buy"
	OrderSideSell OrderSide = "sell"
)

// Defines values for OrderStatus.
const (
	OrderStatusCanceled OrderStatus = "canceled"
	OrderStatusFilled   OrderStatus = "filled"
	OrderStatusRejected OrderStatus = "rejected"
	OrderStatusWorking  OrderStatus = "working"
)

// Defines values for OrderType.
const (
	Limit  OrderType = "limit"
	Market OrderType = "market"
)

// Defines values for StoporderSide.
const (
	StoporderSideBuy  StoporderSide = "buy"
	StoporderSideSell StoporderSide = "sell"
)

// Defines values for StoporderStatus.
const (
	StoporderStatusCanceled StoporderStatus = "canceled"
	StoporderStatusFilled   StoporderStatus = "filled"
	StoporderStatusRejected StoporderStatus = "rejected"
	StoporderStatusWorking  StoporderStatus = "working"
)

// Defines values for StoporderType.
const (
	StoporderTypeStop      StoporderType = "stop"
	StoporderTypeStoplimit StoporderType = "stoplimit"
)

// Defines values for StoporderWarpSide.
const (
	StoporderWarpSideBuy  StoporderWarpSide = "buy"
	StoporderWarpSideSell StoporderWarpSide = "sell"
)

// Defines values for StoporderWarpStatus.
const (
	Canceled StoporderWarpStatus = "canceled"
	Filled   StoporderWarpStatus = "filled"
	Rejected StoporderWarpStatus = "rejected"
	Working  StoporderWarpStatus = "working"
)

// Defines values for StoporderWarpType.
const (
	StoporderWarpTypeStop      StoporderWarpType = "stop"
	StoporderWarpTypeStoplimit StoporderWarpType = "stoplimit"
)

// Defines values for TradeSide.
const (
	Buy  TradeSide = "buy"
	Sell TradeSide = "sell"
)

// Defines values for WsReqAllTradesGetAndSubscribeExchange.
const (
	WsReqAllTradesGetAndSubscribeExchangeMOEX WsReqAllTradesGetAndSubscribeExchange = "MOEX"
	WsReqAllTradesGetAndSubscribeExchangeSPBX WsReqAllTradesGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqAllTradesGetAndSubscribeFormat.
const (
	WsReqAllTradesGetAndSubscribeFormatSimple WsReqAllTradesGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqAllTradesGetAndSubscribeOpcode.
const (
	AllTradesGetAndSubscribe WsReqAllTradesGetAndSubscribeOpcode = "AllTradesGetAndSubscribe"
)

// Defines values for WsReqBarsGetAndSubscribeExchange.
const (
	WsReqBarsGetAndSubscribeExchangeMOEX WsReqBarsGetAndSubscribeExchange = "MOEX"
	WsReqBarsGetAndSubscribeExchangeSPBX WsReqBarsGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqBarsGetAndSubscribeOpcode.
const (
	BarsGetAndSubscribe WsReqBarsGetAndSubscribeOpcode = "BarsGetAndSubscribe"
)

// Defines values for WsReqBarsGetAndSubscribeTf.
const (
	WsReqBarsGetAndSubscribeTfD     WsReqBarsGetAndSubscribeTf = "D"
	WsReqBarsGetAndSubscribeTfM     WsReqBarsGetAndSubscribeTf = "M"
	WsReqBarsGetAndSubscribeTfN15   WsReqBarsGetAndSubscribeTf = "15"
	WsReqBarsGetAndSubscribeTfN300  WsReqBarsGetAndSubscribeTf = "300"
	WsReqBarsGetAndSubscribeTfN3600 WsReqBarsGetAndSubscribeTf = "3600"
	WsReqBarsGetAndSubscribeTfN60   WsReqBarsGetAndSubscribeTf = "60"
	WsReqBarsGetAndSubscribeTfW     WsReqBarsGetAndSubscribeTf = "W"
	WsReqBarsGetAndSubscribeTfY     WsReqBarsGetAndSubscribeTf = "Y"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Exchange.
const (
	WsReqInstrumentsGetAndSubscribeV2ExchangeMOEX WsReqInstrumentsGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Format.
const (
	WsReqInstrumentsGetAndSubscribeV2FormatSimple WsReqInstrumentsGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqInstrumentsGetAndSubscribeV2Opcode.
const (
	InstrumentsGetAndSubscribeV2 WsReqInstrumentsGetAndSubscribeV2Opcode = "InstrumentsGetAndSubscribeV2"
)

// Defines values for WsReqOrderBookGetAndSubscribeExchange.
const (
	WsReqOrderBookGetAndSubscribeExchangeMOEX WsReqOrderBookGetAndSubscribeExchange = "MOEX"
	WsReqOrderBookGetAndSubscribeExchangeSPBX WsReqOrderBookGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqOrderBookGetAndSubscribeOpcode.
const (
	OrderBookGetAndSubscribe WsReqOrderBookGetAndSubscribeOpcode = "OrderBookGetAndSubscribe"
)

// Defines values for WsReqOrdersGetAndSubscribeExchange.
const (
	WsReqOrdersGetAndSubscribeExchangeMOEX WsReqOrdersGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqOrdersGetAndSubscribeFormat.
const (
	WsReqOrdersGetAndSubscribeFormatSimple WsReqOrdersGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqOrdersGetAndSubscribeOpcode.
const (
	OrdersGetAndSubscribeV2 WsReqOrdersGetAndSubscribeOpcode = "OrdersGetAndSubscribeV2"
)

// Defines values for WsReqPositionsGetAndSubscribeExchange.
const (
	WsReqPositionsGetAndSubscribeExchangeMOEX WsReqPositionsGetAndSubscribeExchange = "MOEX"
	WsReqPositionsGetAndSubscribeExchangeSPBX WsReqPositionsGetAndSubscribeExchange = "SPBX"
)

// Defines values for WsReqPositionsGetAndSubscribeOpcode.
const (
	PositionsGetAndSubscribeV2 WsReqPositionsGetAndSubscribeOpcode = "PositionsGetAndSubscribeV2"
)

// Defines values for WsReqQuotesSubscribeExchange.
const (
	WsReqQuotesSubscribeExchangeMOEX WsReqQuotesSubscribeExchange = "MOEX"
	WsReqQuotesSubscribeExchangeSPBX WsReqQuotesSubscribeExchange = "SPBX"
)

// Defines values for WsReqRisksGetAndSubscribeExchange.
const (
	WsReqRisksGetAndSubscribeExchangeMOEX WsReqRisksGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqRisksGetAndSubscribeFormat.
const (
	WsReqRisksGetAndSubscribeFormatSimple WsReqRisksGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeExchange.
const (
	WsReqSpectraRisksGetAndSubscribeExchangeMOEX WsReqSpectraRisksGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeFormat.
const (
	WsReqSpectraRisksGetAndSubscribeFormatSimple WsReqSpectraRisksGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqSpectraRisksGetAndSubscribeOpcode.
const (
	SpectraRisksGetAndSubscribe WsReqSpectraRisksGetAndSubscribeOpcode = "SpectraRisksGetAndSubscribe"
)

// Defines values for WsReqStopOrdersGetAndSubscribeExchange.
const (
	WsReqStopOrdersGetAndSubscribeExchangeMOEX WsReqStopOrdersGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqStopOrdersGetAndSubscribeFormat.
const (
	WsReqStopOrdersGetAndSubscribeFormatSimple WsReqStopOrdersGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqStopOrdersGetAndSubscribeOpcode.
const (
	StopOrdersGetAndSubscribe WsReqStopOrdersGetAndSubscribeOpcode = "StopOrdersGetAndSubscribe"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Exchange.
const (
	WsReqStopOrdersGetAndSubscribeV2ExchangeMOEX WsReqStopOrdersGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Format.
const (
	WsReqStopOrdersGetAndSubscribeV2FormatSimple WsReqStopOrdersGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqStopOrdersGetAndSubscribeV2Opcode.
const (
	StopOrdersGetAndSubscribeV2 WsReqStopOrdersGetAndSubscribeV2Opcode = "StopOrdersGetAndSubscribeV2"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Exchange.
const (
	WsReqSummariesGetAndSubscribeV2ExchangeMOEX WsReqSummariesGetAndSubscribeV2Exchange = "MOEX"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Format.
const (
	WsReqSummariesGetAndSubscribeV2FormatSimple WsReqSummariesGetAndSubscribeV2Format = "Simple"
)

// Defines values for WsReqSummariesGetAndSubscribeV2Opcode.
const (
	SummariesGetAndSubscribeV2 WsReqSummariesGetAndSubscribeV2Opcode = "SummariesGetAndSubscribeV2"
)

// Defines values for WsReqTradesGetAndSubscribeExchange.
const (
	WsReqTradesGetAndSubscribeExchangeMOEX WsReqTradesGetAndSubscribeExchange = "MOEX"
)

// Defines values for WsReqTradesGetAndSubscribeFormat.
const (
	WsReqTradesGetAndSubscribeFormatSimple WsReqTradesGetAndSubscribeFormat = "Simple"
)

// Defines values for WsReqTradesGetAndSubscribeOpcode.
const (
	TradesGetAndSubscribeV2 WsReqTradesGetAndSubscribeOpcode = "TradesGetAndSubscribeV2"
)

// Defines values for WsReqUnsubscribeOpcode.
const (
	Unsubscribe WsReqUnsubscribeOpcode = "unsubscribe"
)

// Defines values for CommandAPIv2clientordersdeleteParamsExchange.
const (
	CommandAPIv2clientordersdeleteParamsExchangeMOEX CommandAPIv2clientordersdeleteParamsExchange = "MOEX"
)

// Defines values for CommandAPIv2clientordersdeleteParamsStop.
const (
	CommandAPIv2clientordersdeleteParamsStopFalse CommandAPIv2clientordersdeleteParamsStop = "false"
	CommandAPIv2clientordersdeleteParamsStopTrue  CommandAPIv2clientordersdeleteParamsStop = "true"
)

// Defines values for CommandAPIv2clientordersdeleteParamsJsonResponse.
const (
	CommandAPIv2clientordersdeleteParamsJsonResponseFalse CommandAPIv2clientordersdeleteParamsJsonResponse = false
	CommandAPIv2clientordersdeleteParamsJsonResponseTrue  CommandAPIv2clientordersdeleteParamsJsonResponse = true
)

// Defines values for CommandAPIv2clientordersdeleteParamsFormat.
const (
	CommandAPIv2clientordersdeleteParamsFormatSimple CommandAPIv2clientordersdeleteParamsFormat = "Simple"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsExchange.
const (
	CommandAPIWarpv2clientordersdeleteParamsExchangeMOEX CommandAPIWarpv2clientordersdeleteParamsExchange = "MOEX"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsStop.
const (
	CommandAPIWarpv2clientordersdeleteParamsStopFalse CommandAPIWarpv2clientordersdeleteParamsStop = "false"
	CommandAPIWarpv2clientordersdeleteParamsStopTrue  CommandAPIWarpv2clientordersdeleteParamsStop = "true"
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsJsonResponse.
const (
	CommandAPIWarpv2clientordersdeleteParamsJsonResponseFalse CommandAPIWarpv2clientordersdeleteParamsJsonResponse = false
	CommandAPIWarpv2clientordersdeleteParamsJsonResponseTrue  CommandAPIWarpv2clientordersdeleteParamsJsonResponse = true
)

// Defines values for CommandAPIWarpv2clientordersdeleteParamsFormat.
const (
	CommandAPIWarpv2clientordersdeleteParamsFormatSimple CommandAPIWarpv2clientordersdeleteParamsFormat = "Simple"
)

// Defines values for TradeStatsParamsFormat.
const (
	TradeStatsParamsFormatSimple TradeStatsParamsFormat = "Simple"
)

// Defines values for TradeStatsParamsExchange.
const (
	TradeStatsParamsExchangeMOEX TradeStatsParamsExchange = "MOEX"
	TradeStatsParamsExchangeSPBX TradeStatsParamsExchange = "SPBX"
)

// Defines values for TradeStatsBySymbolParamsFormat.
const (
	TradeStatsBySymbolParamsFormatSimple TradeStatsBySymbolParamsFormat = "Simple"
)

// Defines values for TradeStatsBySymbolParamsExchange.
const (
	TradeStatsBySymbolParamsExchangeMOEX TradeStatsBySymbolParamsExchange = "MOEX"
	TradeStatsBySymbolParamsExchangeSPBX TradeStatsBySymbolParamsExchange = "SPBX"
)

// Defines values for FortsriskParamsFormat.
const (
	FortsriskParamsFormatSimple FortsriskParamsFormat = "Simple"
)

// Defines values for FortsriskParamsExchange.
const (
	FortsriskParamsExchangeMOEX FortsriskParamsExchange = "MOEX"
)

// Defines values for DevGetAllPositionsParamsFormat.
const (
	DevGetAllPositionsParamsFormatSimple DevGetAllPositionsParamsFormat = "Simple"
)

// Defines values for DevGetAllPositionsParamsWithoutCurrency.
const (
	DevGetAllPositionsParamsWithoutCurrencyFalse DevGetAllPositionsParamsWithoutCurrency = false
	DevGetAllPositionsParamsWithoutCurrencyTrue  DevGetAllPositionsParamsWithoutCurrency = true
)

// Defines values for DevGetAllPositionsParamsExchange.
const (
	DevGetAllPositionsParamsExchangeMOEX DevGetAllPositionsParamsExchange = "MOEX"
	DevGetAllPositionsParamsExchangeSPBX DevGetAllPositionsParamsExchange = "SPBX"
)

// Defines values for DevGetOnePositionParamsFormat.
const (
	DevGetOnePositionParamsFormatSimple DevGetOnePositionParamsFormat = "Simple"
)

// Defines values for DevGetOnePositionParamsExchange.
const (
	DevGetOnePositionParamsExchangeMOEX DevGetOnePositionParamsExchange = "MOEX"
	DevGetOnePositionParamsExchangeSPBX DevGetOnePositionParamsExchange = "SPBX"
)

// Defines values for RiskParamsFormat.
const (
	RiskParamsFormatSimple RiskParamsFormat = "Simple"
)

// Defines values for RiskParamsExchange.
const (
	RiskParamsExchangeMOEX RiskParamsExchange = "MOEX"
	RiskParamsExchangeSPBX RiskParamsExchange = "SPBX"
)

// Defines values for DevGetAllTradesParamsFormat.
const (
	DevGetAllTradesParamsFormatSimple DevGetAllTradesParamsFormat = "Simple"
)

// Defines values for DevGetAllTradesParamsExchange.
const (
	DevGetAllTradesParamsExchangeMOEX DevGetAllTradesParamsExchange = "MOEX"
	DevGetAllTradesParamsExchangeSPBX DevGetAllTradesParamsExchange = "SPBX"
)

// Defines values for DevGetTickerTradesParamsFormat.
const (
	DevGetTickerTradesParamsFormatSimple DevGetTickerTradesParamsFormat = "Simple"
)

// Defines values for DevGetTickerTradesParamsExchange.
const (
	DevGetTickerTradesParamsExchangeMOEX DevGetTickerTradesParamsExchange = "MOEX"
	DevGetTickerTradesParamsExchangeSPBX DevGetTickerTradesParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchParamsSector.
const (
	CURR  DevSecuritiesSearchParamsSector = "CURR"
	FOND  DevSecuritiesSearchParamsSector = "FOND"
	FORTS DevSecuritiesSearchParamsSector = "FORTS"
)

// Defines values for DevSecuritiesSearchParamsExchange.
const (
	DevSecuritiesSearchParamsExchangeMOEX DevSecuritiesSearchParamsExchange = "MOEX"
	DevSecuritiesSearchParamsExchangeSPBX DevSecuritiesSearchParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchParamsFormat.
const (
	DevSecuritiesSearchParamsFormatSimple DevSecuritiesSearchParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeParamsFormat.
const (
	DevSecuritiesSearchExchangeParamsFormatSimple DevSecuritiesSearchExchangeParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeParamsExchange.
const (
	DevSecuritiesSearchExchangeParamsExchangeMOEX DevSecuritiesSearchExchangeParamsExchange = "MOEX"
	DevSecuritiesSearchExchangeParamsExchangeSPBX DevSecuritiesSearchExchangeParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesSearchExchangeCodeParamsFormat.
const (
	DevSecuritiesSearchExchangeCodeParamsFormatSimple DevSecuritiesSearchExchangeCodeParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchExchangeCodeParamsExchange.
const (
	DevSecuritiesSearchExchangeCodeParamsExchangeMOEX DevSecuritiesSearchExchangeCodeParamsExchange = "MOEX"
	DevSecuritiesSearchExchangeCodeParamsExchangeSPBX DevSecuritiesSearchExchangeCodeParamsExchange = "SPBX"
)

// Defines values for DevSecuritiesFuturesParamsFormat.
const (
	DevSecuritiesFuturesParamsFormatSimple DevSecuritiesFuturesParamsFormat = "Simple"
)

// Defines values for DevSecuritiesFuturesParamsExchange.
const (
	DevSecuritiesFuturesParamsExchangeMOEX DevSecuritiesFuturesParamsExchange = "MOEX"
)

// Defines values for DevSecuritiesSearchAllTradesParamsFormat.
const (
	DevSecuritiesSearchAllTradesParamsFormatSimple DevSecuritiesSearchAllTradesParamsFormat = "Simple"
)

// Defines values for DevSecuritiesSearchAllTradesParamsExchange.
const (
	DevSecuritiesSearchAllTradesParamsExchangeMOEX DevSecuritiesSearchAllTradesParamsExchange = "MOEX"
	DevSecuritiesSearchAllTradesParamsExchangeSPBX DevSecuritiesSearchAllTradesParamsExchange = "SPBX"
)

// Defines values for DevQuotesParamsFormat.
const (
	DevQuotesParamsFormatSimple DevQuotesParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioMoneyParamsFormat.
const (
	ExchangePortfolioMoneyParamsFormatSimple ExchangePortfolioMoneyParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioMoneyParamsExchange.
const (
	ExchangePortfolioMoneyParamsExchangeMOEX ExchangePortfolioMoneyParamsExchange = "MOEX"
	ExchangePortfolioMoneyParamsExchangeSPBX ExchangePortfolioMoneyParamsExchange = "SPBX"
)

// Defines values for DevGetAllOrdersParamsFormat.
const (
	DevGetAllOrdersParamsFormatSimple DevGetAllOrdersParamsFormat = "Simple"
)

// Defines values for DevGetAllOrdersParamsExchange.
const (
	DevGetAllOrdersParamsExchangeMOEX DevGetAllOrdersParamsExchange = "MOEX"
	DevGetAllOrdersParamsExchangeSPBX DevGetAllOrdersParamsExchange = "SPBX"
)

// Defines values for DevGetOneOrderParamsFormat.
const (
	DevGetOneOrderParamsFormatSimple DevGetOneOrderParamsFormat = "Simple"
)

// Defines values for DevGetOneOrderParamsExchange.
const (
	DevGetOneOrderParamsExchangeMOEX DevGetOneOrderParamsExchange = "MOEX"
	DevGetOneOrderParamsExchangeSPBX DevGetOneOrderParamsExchange = "SPBX"
)

// Defines values for DevGetAllStopOrdersParamsFormat.
const (
	DevGetAllStopOrdersParamsFormatSimple DevGetAllStopOrdersParamsFormat = "Simple"
)

// Defines values for DevGetAllStopOrdersParamsExchange.
const (
	DevGetAllStopOrdersParamsExchangeMOEX DevGetAllStopOrdersParamsExchange = "MOEX"
	DevGetAllStopOrdersParamsExchangeSPBX DevGetAllStopOrdersParamsExchange = "SPBX"
)

// Defines values for DevGetOneStopOrderParamsFormat.
const (
	DevGetOneStopOrderParamsFormatSimple DevGetOneStopOrderParamsFormat = "Simple"
)

// Defines values for DevGetOneStopOrderParamsExchange.
const (
	DevGetOneStopOrderParamsExchangeMOEX DevGetOneStopOrderParamsExchange = "MOEX"
	DevGetOneStopOrderParamsExchangeSPBX DevGetOneStopOrderParamsExchange = "SPBX"
)

// Defines values for ExchangePortfolioSummaryParamsFormat.
const (
	ExchangePortfolioSummaryParamsFormatSimple ExchangePortfolioSummaryParamsFormat = "Simple"
)

// Defines values for ExchangePortfolioSummaryParamsExchange.
const (
	ExchangePortfolioSummaryParamsExchangeMOEX ExchangePortfolioSummaryParamsExchange = "MOEX"
	ExchangePortfolioSummaryParamsExchangeSPBX ExchangePortfolioSummaryParamsExchange = "SPBX"
)

// Defines values for DevHistoryParamsExchange.
const (
	DevHistoryParamsExchangeMOEX DevHistoryParamsExchange = "MOEX"
	DevHistoryParamsExchangeSPBX DevHistoryParamsExchange = "SPBX"
)

// Defines values for DevHistoryParamsTf.
const (
	DevHistoryParamsTfD     DevHistoryParamsTf = "D"
	DevHistoryParamsTfM     DevHistoryParamsTf = "M"
	DevHistoryParamsTfN15   DevHistoryParamsTf = "15"
	DevHistoryParamsTfN300  DevHistoryParamsTf = "300"
	DevHistoryParamsTfN3600 DevHistoryParamsTf = "3600"
	DevHistoryParamsTfN60   DevHistoryParamsTf = "60"
	DevHistoryParamsTfW     DevHistoryParamsTf = "W"
	DevHistoryParamsTfY     DevHistoryParamsTf = "Y"
)

// Defines values for DevHistoryParamsUntraded.
const (
	DevHistoryParamsUntradedFalse DevHistoryParamsUntraded = false
	DevHistoryParamsUntradedTrue  DevHistoryParamsUntraded = true
)

// Defines values for DevHistoryParamsFormat.
const (
	DevHistoryParamsFormatSimple DevHistoryParamsFormat = "Simple"
)

// Defines values for DevOrderbookExchangSeccodeParamsFormat.
const (
	Simple DevOrderbookExchangSeccodeParamsFormat = "Simple"
)

// Defines values for DevOrderbookExchangSeccodeParamsExchange.
const (
	DevOrderbookExchangSeccodeParamsExchangeMOEX DevOrderbookExchangSeccodeParamsExchange = "MOEX"
	DevOrderbookExchangSeccodeParamsExchangeSPBX DevOrderbookExchangSeccodeParamsExchange = "SPBX"
)

// Defines values for RiskRatesParamsExchange.
const (
	MOEX RiskRatesParamsExchange = "MOEX"
	SPBX RiskRatesParamsExchange = "SPBX"
)

// Alltrade defines model for alltrade.
type Alltrade struct {
	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор.
	Id *int `json:"id,omitempty"`

	// Oi Открытый интерес (open interest). Если не поддерживается инстурментом - значение 0.
	Oi *int `json:"oi,omitempty"`

	// Orderno Идентификатор заявки
	Orderno *int `json:"orderno,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество
	Qty *int `json:"qty,omitempty"`

	// Side Направление агрессивной заявки. Поле может быть пустым
	Side *AlltradeSide `json:"side,omitempty"`

	// Symbol Тикер (Код финансового инструмента). "[N/A]" используется если symbol не определен.
	Symbol *string `json:"symbol,omitempty"`

	// Time Дата и время (UTC) закрытия заявки
	Time *string `json:"time,omitempty"`

	// Timestamp Время (UTC) в формате Unix Time Milliseconds
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// AlltradeSide Направление агрессивной заявки. Поле может быть пустым
type AlltradeSide string

// Alltrades defines model for alltrades.
type Alltrades = []Alltrade

// BodyrequestOrdersActionsLimitTV defines model for bodyrequest_OrdersActionsLimitTV.
type BodyrequestOrdersActionsLimitTV struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsLimitTVSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsLimitTVSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsLimitTVSide string

// BodyrequestOrdersActionsLimitTVput defines model for bodyrequest_OrdersActionsLimitTVput.
type BodyrequestOrdersActionsLimitTVput struct {
	// Id Идентификатор заявки
	Id         *int `json:"id,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsLimitTVputSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsLimitTVputSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsLimitTVputSide string

// BodyrequestOrdersActionsMarketTV defines model for bodyrequest_OrdersActionsMarketTV.
type BodyrequestOrdersActionsMarketTV struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsMarketTVSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsMarketTVSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsMarketTVSide string

// BodyrequestOrdersActionsMarketTVput defines model for bodyrequest_OrdersActionsMarketTVput.
type BodyrequestOrdersActionsMarketTVput struct {
	// Id Идентификатор заявки
	Id         *int `json:"id,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsMarketTVputSide `json:"side,omitempty"`

	// Type Тип заявки
	Type *string `json:"type,omitempty"`
	User *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsMarketTVputSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsMarketTVputSide string

// BodyrequestOrdersActionsStop defines model for bodyrequest_OrdersActionsStop.
type BodyrequestOrdersActionsStop struct {
	// Instrument Информация об инструмента и бирже
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"Exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"Symbol,omitempty"`
	} `json:"Instrument,omitempty"`

	// OrderEndUnixTime Время (UTC) завершения сделки в формате Unix Time Seconds
	OrderEndUnixTime *int64 `json:"OrderEndUnixTime,omitempty"`

	// Quantity Количество
	Quantity *int `json:"Quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopSide `json:"Side,omitempty"`

	// TriggerPrice Стоп-цена
	TriggerPrice *int `json:"TriggerPrice,omitempty"`

	// User Информация о пользователе
	User *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"Account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"Portfolio,omitempty"`
	} `json:"User,omitempty"`
}

// BodyrequestOrdersActionsStopSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopSide string

// BodyrequestOrdersActionsStopLimitTVWarp defines model for bodyrequest_OrdersActionsStopLimitTVWarp.
type BodyrequestOrdersActionsStopLimitTVWarp struct {
	// Condition Условие срабатывания more/less
	Condition  *string `json:"condition,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// InstrumentGroup Борд
		InstrumentGroup *string `json:"instrumentGroup,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Price Цена выставления лимитной заявки
	Price *float64 `json:"price,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopLimitTVWarpSide `json:"side,omitempty"`

	// StopEndUnixTime Срок действия (UTC) в формате Unix Time seconds
	StopEndUnixTime *int64 `json:"stopEndUnixTime,omitempty"`

	// TriggerPrice Цена срабатывания
	TriggerPrice *float64 `json:"triggerPrice,omitempty"`
	User         *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsStopLimitTVWarpSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopLimitTVWarpSide string

// BodyrequestOrdersActionsStopMarketTVWarp defines model for bodyrequest_OrdersActionsStopMarketTVWarp.
type BodyrequestOrdersActionsStopMarketTVWarp struct {
	// Condition Условие срабатывания more/less
	Condition  *string `json:"condition,omitempty"`
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// InstrumentGroup Борд
		InstrumentGroup *string `json:"instrumentGroup,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
	} `json:"instrument,omitempty"`

	// Quantity Количество (лоты)
	Quantity *int `json:"quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStopMarketTVWarpSide `json:"side,omitempty"`

	// StopEndUnixTime Срок действия (UTC) в формате Unix Time seconds
	StopEndUnixTime *int64 `json:"stopEndUnixTime,omitempty"`

	// TriggerPrice Цена срабатывания
	TriggerPrice *float64 `json:"triggerPrice,omitempty"`
	User         *struct {
		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"portfolio,omitempty"`
	} `json:"user,omitempty"`
}

// BodyrequestOrdersActionsStopMarketTVWarpSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStopMarketTVWarpSide string

// BodyrequestOrdersActionsStoplimit defines model for bodyrequest_OrdersActionsStoplimit.
type BodyrequestOrdersActionsStoplimit struct {
	Instrument *struct {
		// Exchange Биржа
		Exchange *string `json:"Exchange,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"Symbol,omitempty"`
	} `json:"Instrument,omitempty"`

	// OrderEndUnixTime Время (UTC) завершения сделки в формате Unix Time seconds
	OrderEndUnixTime *int64 `json:"OrderEndUnixTime,omitempty"`

	// Price Цена
	Price *int `json:"Price,omitempty"`

	// Quantity Количество
	Quantity *int `json:"Quantity,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *BodyrequestOrdersActionsStoplimitSide `json:"Side,omitempty"`

	// TriggerPrice Стоп-цена
	TriggerPrice *int `json:"TriggerPrice,omitempty"`
	User         *struct {
		// Account Идентификатор аккаунта пользователя
		Account *string `json:"Account,omitempty"`

		// Portfolio Идентификатор клиентского портфеля
		Portfolio *string `json:"Portfolio,omitempty"`
	} `json:"User,omitempty"`
}

// BodyrequestOrdersActionsStoplimitSide Направление сделки. Купля либо продажа.
type BodyrequestOrdersActionsStoplimitSide string

// EstimateOrderModel Модель результата оценки стоимости и количества в лотах
type EstimateOrderModel struct {
	// Commission Комиссия
	Commission *float64 `json:"commission,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange"`

	// NotMarginQuantityToBuy Количество в лотах к покупке без плеча
	NotMarginQuantityToBuy *float64 `json:"notMarginQuantityToBuy,omitempty"`

	// NotMarginQuantityToSell Количество в лотах к продаже без плеча
	NotMarginQuantityToSell *float64 `json:"notMarginQuantityToSell,omitempty"`

	// OrderEvaluation Стоимость заявки
	OrderEvaluation *float64 `json:"orderEvaluation,omitempty"`

	// Portfolio Портфель клиента
	Portfolio *string `json:"portfolio"`

	// QuantityToBuy Количество в лотах к покупке с плечом
	QuantityToBuy *float64 `json:"quantityToBuy,omitempty"`

	// QuantityToSell Количество в лотах к продаже с плечом
	QuantityToSell *float64 `json:"quantityToSell,omitempty"`

	// Ticker Инструмент
	Ticker *string `json:"ticker"`
}

// EstimateOrderViewModel Модель заявки для оценки стоимости и количества в лотах
type EstimateOrderViewModel struct {
	// Board Режим торгов (борд)
	Board *string `json:"board"`

	// Exchange Биржа
	Exchange *string `json:"exchange"`

	// LotQuantity Количество лотов
	LotQuantity *int64 `json:"lotQuantity,omitempty"`

	// Portfolio Портфель клиента
	Portfolio *string `json:"portfolio"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Ticker Инструмент
	Ticker *string `json:"ticker"`
}

// Fortsrisk defines model for fortsrisk.
type Fortsrisk struct {
	// BalanceMoney Сальдо денежных торговых переводов за текущую сессию (поле будет удалено в будущих обновлениях)
	BalanceMoney *float64 `json:"balanceMoney,omitempty"`

	// Fee Списанный сбор
	Fee *float64 `json:"fee,omitempty"`

	// IsLimitsSet Наличие установленных денежного и залогового лимитов
	IsLimitsSet *bool `json:"isLimitsSet,omitempty"`

	// MoneyAmount Общее количество рублей и дисконтированных в рубли залогов
	MoneyAmount *float64 `json:"moneyAmount,omitempty"`

	// MoneyBlocked Средства, заблокированные под ГО
	MoneyBlocked *float64 `json:"moneyBlocked,omitempty"`

	// MoneyFree Свободные средства. Сумма рублей и залогов, дисконтированных в рубли, доступная для открытия позиций. (MoneyFree = MoneyAmount + VmInterCl – MoneyBlocked – VmReserve – Fee)
	MoneyFree *float64 `json:"moneyFree,omitempty"`

	// MoneyOld Общее количество рублей и дисконтированных в рубли залогов на начало сессии
	MoneyOld *float64 `json:"moneyOld,omitempty"`

	// MoneyPledgeAmount Сумма залогов, дисконтированных в рубли
	MoneyPledgeAmount *float64 `json:"moneyPledgeAmount,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// VarMargin VmCurrentPositions + VmInterCl
	VarMargin *float64 `json:"varMargin,omitempty"`

	// VmCurrentPositions Сагрегированная вармаржа по текущим позициям
	VmCurrentPositions *float64 `json:"vmCurrentPositions,omitempty"`

	// VmInterCl Вариационная маржа, списанная или полученная в пром. клиринг
	VmInterCl *float64 `json:"vmInterCl,omitempty"`
}

// History defines model for history.
type History struct {
	History *[]HistoryObject `json:"history,omitempty"`

	// Next Время (UTC) начала следующей свечи
	Next *int `json:"next"`

	// Prev Время (UTC) начала предыдущей свечи
	Prev *int `json:"prev"`
}

// HistoryObject defines model for history_object.
type HistoryObject struct {
	// Close Цена при закрытии
	Close *float64 `json:"close,omitempty"`

	// High Максимальная цена
	High *float64 `json:"high,omitempty"`

	// Low Миниимальная цена
	Low *float64 `json:"low,omitempty"`

	// Open Цена при открытии
	Open *float64 `json:"open,omitempty"`

	// Time Время (UTC) (Unix time seconds)
	Time *int64 `json:"time,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// Money defines model for money.
type Money struct {
	// Cash Количество средств
	Cash *float64 `json:"cash,omitempty"`

	// Changes Изменения
	Changes *float64 `json:"changes,omitempty"`

	// Comission Комиссия (в рублях)
	Comission *float64 `json:"comission,omitempty"`

	// Free Свободные средства
	Free *float64 `json:"free,omitempty"`

	// Open Средства на момент открытия
	Open *float64 `json:"open,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *float64 `json:"portfolio,omitempty"`

	// Profit Прибыль
	Profit *float64 `json:"profit,omitempty"`

	// ProfitRate Прибыль в процентах
	ProfitRate *float64 `json:"profitRate,omitempty"`

	// Used Количество использованных
	Used *float64 `json:"used,omitempty"`
}

// Order defines model for order.
type Order struct {
	// BrokerSymbol Пара биржа-Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// EndTime Время завершения (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Filled Количество исполненных (лоты)
	Filled *float64 `json:"filled,omitempty"`

	// FilledQtyBatch Количество исполненных (лоты)
	FilledQtyBatch *float64 `json:"filledQtyBatch,omitempty"`

	// FilledQtyUnits Количество исполненных (штуки)
	FilledQtyUnits *float64 `json:"filledQtyUnits,omitempty"`

	// Id Уникальный идентификатор заявки
	Id *string `json:"id,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Количество (лоты)
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *OrderSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *OrderStatus `json:"status,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// TransTime Время выставления (UTC)
	TransTime *string `json:"transTime,omitempty"`

	// Type Тип заявки. Лимитная либо рыночная.
	Type *OrderType `json:"type,omitempty"`
}

// OrderSide Направление сделки. Купля либо продажа.
type OrderSide string

// OrderStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type OrderStatus string

// OrderType Тип заявки. Лимитная либо рыночная.
type OrderType string

// Orderbook Данные о запрашиваемом "биржевом стакане"
type Orderbook struct {
	// Asks Аски
	Asks *[]OrderbookAsk `json:"asks,omitempty"`

	// Bids Биды
	Bids *[]OrderbookBid `json:"bids,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// MsTimestamp Время(UTC) в формате Unix Time Milliseconds
	MsTimestamp *int64 `json:"ms_timestamp,omitempty"`

	// Snapshot Deprecated. Устаревшее поле, будет удалено в будущих обновлениях.
	//Snapshot *bool `json:"snapshot,omitempty"`

	// Timestamp Deprecated. Устаревшее поле, будет удалено в будущих обновлениях. Вместо этого поля используйте поле "ms_timestamp".
	//Timestamp *float64 `json:"timestamp,omitempty"`
}

// OrderbookAsk defines model for orderbook_ask.
type OrderbookAsk struct {
	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// OrderbookBid defines model for orderbook_bid.
type OrderbookBid struct {
	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Volume Объём
	Volume *int `json:"volume,omitempty"`
}

// Orders defines model for orders.
type Orders = []Order

// OrdersActions400 defines model for orders_actions_400.
type OrdersActions400 struct {
	// Message Вид ответа для случая отвергнутой заявки.
	Message *string `json:"message,omitempty"`
}

// OrdersActions400CommandAPI defines model for orders_actions_400_CommandAPI.
type OrdersActions400CommandAPI struct {
	// Message Вид ответа для неуникального X-ALOR-REQID
	Message     *string `json:"message,omitempty"`
	OldResponse *struct {
		Body       *string `json:"body,omitempty"`
		StatusCode *int    `json:"statusCode,omitempty"`
	} `json:"oldResponse,omitempty"`
}

// OrdersActionsDeleteOrderId Вид ответа на успешно выполненный запрос.
type OrdersActionsDeleteOrderId = string

// OrdersActionsDeleteOrderIdCommandAPI Вид ответа на успешно выполненный запрос.
type OrdersActionsDeleteOrderIdCommandAPI = string

// OrdersActionsLimitMarket defines model for orders_actions_LimitMarket.
type OrdersActionsLimitMarket struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *int `json:"orderNumber,omitempty"`
}

// OrdersActionsLimitMarketCommandAPI defines model for orders_actions_LimitMarket_CommandAPI.
type OrdersActionsLimitMarketCommandAPI struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// OrdersActionsStopProfitLoss defines model for orders_actions_StopProfitLoss.
type OrdersActionsStopProfitLoss struct {
	// Message Вид ответа на успешно выполненный запрос.
	Message *string `json:"message,omitempty"`

	// OrderNumber Идентификатор заявки
	OrderNumber *int `json:"orderNumber,omitempty"`
}

// Position defines model for position.
type Position struct {
	// AvgPrice Средняя цена
	AvgPrice *float64 `json:"avgPrice,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// IsCurrency True для валютных остатков (денег), false - для торговых инструментов
	IsCurrency *bool `json:"isCurrency,omitempty"`

	// LotSize Размер лота
	LotSize *float64 `json:"lotSize,omitempty"`

	// Open Агрегированное количество на момент открытия (начала торгов) (штуки)
	Open *float64 `json:"open,omitempty"`

	// OpenQtyBatch Агрегированное количество на момент открытия (начала торгов) (лоты)
	OpenQtyBatch *float64 `json:"openQtyBatch,omitempty"`

	// OpenUnits Количество открытых позиций на момент открытия (начала торгов)
	OpenUnits *float64 `json:"openUnits,omitempty"`

	// Qty Агрегированное количество (лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Агрегированное количество TFuture
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyT0 Агрегированное количество T0 (штуки)
	QtyT0 *float64 `json:"qtyT0,omitempty"`

	// QtyT0Batch Агрегированное количество T0 (лоты)
	QtyT0Batch *float64 `json:"qtyT0Batch,omitempty"`

	// QtyT1 Агрегированное количество T1 (штуки)
	QtyT1 *float64 `json:"qtyT1,omitempty"`

	// QtyT1Batch Агрегированное количество T1 (лоты)
	QtyT1Batch *float64 `json:"qtyT1Batch,omitempty"`

	// QtyT2 Агрегированное количество T2 (штуки)
	QtyT2 *float64 `json:"qtyT2,omitempty"`

	// QtyT2Batch Агрегированное количество T2 (лоты)
	QtyT2Batch *float64 `json:"qtyT2Batch,omitempty"`

	// QtyTFuture Количество (штуки)
	QtyTFuture *float64 `json:"qtyTFuture,omitempty"`

	// QtyTFutureBatch Агрегированное количество TFuture (лоты)
	QtyTFutureBatch *float64 `json:"qtyTFutureBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// ShortName Короткое наименование
	ShortName *string `json:"shortName,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol       *string  `json:"symbol,omitempty"`
	UnrealisedPl *float64 `json:"unrealisedPl,omitempty"`
}

// Positions defines model for positions.
type Positions = []Position

// Risk defines model for risk.
type Risk struct {
	// ClientType Тип клиента
	ClientType *string `json:"clientType,omitempty"`

	// CorrectedMargin Скорректированная маржа
	CorrectedMargin *float64 `json:"correctedMargin,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// HasForbiddenPositions Имеются ли запретные позиции
	HasForbiddenPositions *bool `json:"hasForbiddenPositions,omitempty"`

	// HasNegativeQuantity Имеются ли отрицательные количества
	HasNegativeQuantity *bool `json:"hasNegativeQuantity,omitempty"`

	// InitialMargin Начальная маржа
	InitialMargin *float64 `json:"initialMargin,omitempty"`

	// MinimalMargin Минимальная маржа
	MinimalMargin *float64 `json:"minimalMargin,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// PortfolioEvaluation Общая стоимость портфеля
	PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

	// PortfolioLiquidationValue Стоимость ликвидного портфеля
	PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

	// RiskCategoryId Категория риска
	RiskCategoryId *int `json:"riskCategoryId,omitempty"`

	// RiskCoverageRatioOne НПР1
	RiskCoverageRatioOne *float64 `json:"riskCoverageRatioOne,omitempty"`

	// RiskCoverageRatioTwo НПР2
	RiskCoverageRatioTwo *float64 `json:"riskCoverageRatioTwo,omitempty"`
}

// RiskRate defines model for riskRate.
type RiskRate struct {
	// AssetType Тип актива
	AssetType *string `json:"assetType,omitempty"`

	// CreatedAt Время добавления ставки риска
	CreatedAt *string `json:"createdAt,omitempty"`

	// CurrencyCode Код валюты расчетов
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Id Id записи
	Id *float64 `json:"id,omitempty"`

	// Instrument Инструмент
	Instrument *string `json:"instrument,omitempty"`

	// IsDirect Является ли зависимость инструмента к базовому активу прямой или обратной.
	IsDirect *bool `json:"isDirect,omitempty"`

	// IsMarginal Доступен ли данный инструмент в маржу. Т.е. есть ли он в списке маржинальных инструментов брокера.
	IsMarginal *bool `json:"isMarginal,omitempty"`

	// IsShortSellPossible Разрешен ли шорт по бумаге. True если да.
	IsShortSellPossible *bool `json:"isShortSellPossible,omitempty"`

	// Isin ISIN инструмента. Если есть.
	Isin *string `json:"isin,omitempty"`

	// RateDown Ставка риска понижения цены. Применяется для лонгов.
	RateDown *float64 `json:"rateDown,omitempty"`

	// RateSymmetric Симметричная ставка риска. Приведена для справки, не используется
	RateSymmetric *float64 `json:"rateSymmetric,omitempty"`

	// RateUp Ставка риска повышения цены. Применяется для шортов.
	RateUp *float64 `json:"rateUp,omitempty"`

	// RiskCategoryId Id категории риска
	RiskCategoryId *float64 `json:"riskCategoryId,omitempty"`

	// SecurityRiskCategoryId Id категории бумаги для категоризации.
	SecurityRiskCategoryId *float64 `json:"securityRiskCategoryId"`

	// SetName Чаще всего будет null. Поле показывает к множеству инструменту принадлежит данный инструмент.
	SetName *string `json:"setName"`

	// SetRate Ставка риска множества
	SetRate *float64 `json:"setRate,omitempty"`

	// UnderlyingAsset Чаще всего будет null. Поле показывает к какому базовому инструменту принадлежит данный инструмент.
	UnderlyingAsset *string `json:"underlyingAsset"`

	// UpdatedAt Время последнего обновления ставки риска
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// RiskRates defines model for riskRates.
type RiskRates struct {
	// List Ставка риска
	List *[]RiskRate `json:"list,omitempty"`

	// Total Количество записей
	Total *int `json:"total,omitempty"`
}

// Securities defines model for securities.
type Securities = []Security

// Security defines model for security.
type Security struct {
	// ISIN Идентификатор ценной бумаги согласно стандарту ISO 6166
	ISIN *string `json:"ISIN"`

	// Cancellation Дата и время (UTC) окончания действия
	Cancellation *string `json:"cancellation,omitempty"`

	// CfiCode Тип ценной бумаги согласно стандарту ISO 10962
	CfiCode *string `json:"cfiCode,omitempty"`

	// ComplexProductCategory Требуемая категория для осуществления торговли инструментом
	ComplexProductCategory *string `json:"complexProductCategory"`

	// Currency Валюта
	Currency *string `json:"currency,omitempty"`

	// Description Краткое описание инструмента
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Facevalue Номинальная стоимость
	Facevalue *float64 `json:"facevalue,omitempty"`

	// Lotsize Размер лота
	Lotsize *float64 `json:"lotsize,omitempty"`

	// Marginbuy Цена маржинальной покупки (заемные средства)
	Marginbuy *float64 `json:"marginbuy,omitempty"`

	// Marginrate Отношение цены маржинальной покупки к цене последней сделки
	Marginrate *float64 `json:"marginrate,omitempty"`

	// Marginsell Цена маржинальной продажи (заемные средства)
	Marginsell *float64 `json:"marginsell,omitempty"`

	// Minstep Минимальный шаг цены
	Minstep *float64 `json:"minstep,omitempty"`

	// PriceMax Максимальная цена
	PriceMax *float64 `json:"priceMax,omitempty"`

	// PriceMin Минимальная цена
	PriceMin *float64 `json:"priceMin,omitempty"`

	// Pricestep Минимальный шаг цены, выраженный в рублях
	Pricestep *float64 `json:"pricestep,omitempty"`

	// PrimaryBoard Код режима торгов
	PrimaryBoard *string  `json:"primary_board,omitempty"`
	Rating       *float64 `json:"rating,omitempty"`

	// Shortname Краткое наименование инструмента
	Shortname *string `json:"shortname,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol          *string  `json:"symbol,omitempty"`
	TheorPrice      *float64 `json:"theorPrice,omitempty"`
	TheorPriceLimit *float64 `json:"theorPriceLimit,omitempty"`

	// TradingStatus Торговый статус инструмента
	TradingStatus *int `json:"tradingStatus,omitempty"`

	// TradingStatusInfo Описание торгового статуса инструмента
	TradingStatusInfo *string `json:"tradingStatusInfo"`

	// Type Тип
	Type *string `json:"type,omitempty"`

	// Volatility Волативность
	Volatility *float64 `json:"volatility,omitempty"`
	Yield      *string  `json:"yield"`
}

// ServersInfo defines model for servers_info.
type ServersInfo struct {
	ВалютныйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Валютный Рынок,omitempty"`
	СрочныйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Срочный Рынок,omitempty"`
	ФондовыйРынок *[]struct {
		// Portfolio Идентификатор клиентского портфеля
		Portfolio        *string `json:"portfolio,omitempty"`
		Tks              *string `json:"tks,omitempty"`
		TradeServersInfo *[]struct {
			AccountNum *string `json:"accountNum"`
			Addresses  *string `json:"addresses"`
			Contracts  *string `json:"contracts,omitempty"`
			Market     *string `json:"market"`

			// TradeServerCode Код сервера
			TradeServerCode *string `json:"tradeServerCode,omitempty"`
			Type            *string `json:"type"`
		} `json:"tradeServersInfo,omitempty"`
	} `json:"Фондовый Рынок,omitempty"`
}

// Stoporder defines model for stoporder.
type Stoporder struct {
	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// EndTime Время действия заявки (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// FilledQtyBatch Количество исполненных
	FilledQtyBatch *float64 `json:"filledQtyBatch,omitempty"`

	// Id Уникальный идентификатор стоп-заявки
	Id *float64 `json:"id,omitempty"`

	// Price Цена(Лимит)
	Price *float64 `json:"price,omitempty"`

	// Qty Количество
	Qty *float64 `json:"qty,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *StoporderSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *StoporderStatus `json:"status,omitempty"`

	// StopPrice Условная цена
	StopPrice *float64 `json:"stopPrice,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// Type Тип заявки
	Type *StoporderType `json:"type,omitempty"`
}

// StoporderSide Направление сделки. Купля либо продажа.
type StoporderSide string

// StoporderStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type StoporderStatus string

// StoporderType Тип заявки
type StoporderType string

// StoporderWarp defines model for stoporderWarp.
type StoporderWarp struct {
	// AvgPrice Средняя цена
	AvgPrice *float64 `json:"avg_price,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Condition Условие срабатывания more/less
	Condition *string `json:"condition,omitempty"`

	// EndTime Время действия заявки (UTC)
	EndTime *string `json:"endTime,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// ExchangeOrderId Уникальный идентификатор стоп-заявки
	ExchangeOrderId *float64 `json:"exchangeOrderId,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор стоп-заявки
	Id *float64 `json:"id,omitempty"`

	// Portfolio Пара Биржа:Тикер
	Portfolio *string `json:"portfolio,omitempty"`

	// Price Цена(Лимит)
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (Лоты)
	Qty *float64 `json:"qty,omitempty"`

	// QtyBatch Количество (Лоты)
	QtyBatch *float64 `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (Штуки)
	QtyUnits *float64 `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *StoporderWarpSide `json:"side,omitempty"`

	// Status Статус исполнения. На исполнении, исполнена, отменена, отклонена.
	Status *StoporderWarpStatus `json:"status,omitempty"`

	// StopPrice Условная цена
	StopPrice *float64 `json:"stopPrice,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`

	// TransTime Время выставления заявки (UTC)
	TransTime *string `json:"transTime,omitempty"`

	// Type Тип заявки (stop/stoplimit)
	Type *StoporderWarpType `json:"type,omitempty"`
}

// StoporderWarpSide Направление сделки. Купля либо продажа.
type StoporderWarpSide string

// StoporderWarpStatus Статус исполнения. На исполнении, исполнена, отменена, отклонена.
type StoporderWarpStatus string

// StoporderWarpType Тип заявки (stop/stoplimit)
type StoporderWarpType string

// StopordersWarp defines model for stopordersWarp.
type StopordersWarp = []StoporderWarp

// Summary defines model for summary.
type Summary struct {
	// BuyingPower Покупательская способность
	BuyingPower *float64 `json:"buyingPower,omitempty"`

	// BuyingPowerAtMorning Покупательская способность на утро
	BuyingPowerAtMorning *float64 `json:"buyingPowerAtMorning,omitempty"`

	// Commission Суммарная комиссия (null для Срочного рынка)
	Commission *float64 `json:"commission"`

	// InitialMargin Маржа
	InitialMargin *float64 `json:"initialMargin,omitempty"`

	// PortfolioEvaluation Ликвидный портфель
	PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

	// PortfolioLiquidationValue Оценка портфеля
	PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

	// Profit Прибыль за сегодня
	Profit *float64 `json:"profit,omitempty"`

	// ProfitRate Норма прибыли, %
	ProfitRate *float64 `json:"profitRate,omitempty"`

	// RiskBeforeForcePositionClosing Риск до закрытия
	RiskBeforeForcePositionClosing *float64 `json:"riskBeforeForcePositionClosing,omitempty"`
}

// Symbol defines model for symbol.
type Symbol struct {
	// AccruedInt Начислено
	AccruedInt *int `json:"accruedInt,omitempty"`

	// AccruedInterest Начислено
	AccruedInterest *int `json:"accrued_interest,omitempty"`

	// Ask Аск
	Ask *float64 `json:"ask,omitempty"`

	// Bid Бид
	Bid *float64 `json:"bid,omitempty"`

	// Change Разность цены и цены предыдущего закрытия
	Change *float64 `json:"change,omitempty"`

	// ChangePercent Относительное изменение цены
	ChangePercent *float64 `json:"change_percent,omitempty"`

	// Description Короткое описание на русском языке
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange  *string  `json:"exchange,omitempty"`
	Facevalue *float64 `json:"facevalue,omitempty"`

	// HighPrice Максимальная цена
	HighPrice *float64 `json:"high_price,omitempty"`

	// LastPrice Последняя цена
	LastPrice *float64 `json:"last_price,omitempty"`

	// LastPriceTimestamp UTC-timestamp для значения поля "last_price"
	LastPriceTimestamp *int64 `json:"last_price_timestamp,omitempty"`

	// Lotsize Размер лота
	Lotsize  *float64 `json:"lotsize,omitempty"`
	Lotvalue *float64 `json:"lotvalue,omitempty"`

	// LowPrice Минимальная цена
	LowPrice     *float64 `json:"low_price,omitempty"`
	OpenInterest *float64 `json:"open_interest"`

	// OpenPrice Цена открытия
	OpenPrice *float64 `json:"open_price,omitempty"`

	// PrevClosePrice Цена предыдущего закрытия
	PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`
	Type   *string `json:"type,omitempty"`

	// Volume Объём
	Volume *float64 `json:"volume,omitempty"`
	Yield  *int     `json:"yield,omitempty"`
}

// SymbolFutures defines model for symbol_futures.
type SymbolFutures struct {
	// AccruedInt Начислено
	AccruedInt *int `json:"accruedInt"`

	// AccruedInterest Начислено
	AccruedInterest *int `json:"accrued_interest"`

	// Ask Аск
	Ask *float64 `json:"ask,omitempty"`

	// Bid Бид
	Bid *float64 `json:"bid,omitempty"`

	// Change Разность цены и цены предыдущего закрытия
	Change *float64 `json:"change"`

	// ChangePercent Относительное изменение цены
	ChangePercent *float64 `json:"change_percent"`

	// Description Короткое описание на русском языке
	Description *string `json:"description,omitempty"`

	// Exchange Биржа
	Exchange  *string  `json:"exchange,omitempty"`
	Facevalue *float64 `json:"facevalue,omitempty"`

	// HighPrice Максимальная цена
	HighPrice *float64 `json:"high_price,omitempty"`

	// LastPrice Последняя цена
	LastPrice *float64 `json:"last_price,omitempty"`

	// LastPriceTimestamp Время последней цены (UTC)
	LastPriceTimestamp *int64 `json:"last_price_timestamp,omitempty"`

	// Lotsize Размер лота
	Lotsize  *float64 `json:"lotsize,omitempty"`
	Lotvalue *float64 `json:"lotvalue,omitempty"`

	// LowPrice Минимальная цена
	LowPrice *float64 `json:"low_price,omitempty"`

	// OpenPrice Цена открытия
	OpenPrice *float64 `json:"open_price,omitempty"`

	// PrevClosePrice Цена предыдущего закрытия
	PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

	// Symbol Тикер (Код финансового инструмента)
	Symbol *string `json:"symbol,omitempty"`
	Type   *string `json:"type,omitempty"`

	// Volume Объём
	Volume *float64 `json:"volume,omitempty"`
	Yield  *int     `json:"yield,omitempty"`
}

// Symbols defines model for symbols.
type Symbols = []Symbol

// Time Текущее время (UTC) в формате Unix time seconds
type Time = int64

// Trade defines model for trade.
type Trade struct {
	// Board Код режима торгов
	Board *string `json:"board,omitempty"`

	// BrokerSymbol Пара Биржа:Тикер
	BrokerSymbol *string `json:"brokerSymbol,omitempty"`

	// Date Дата и время (UTC) закрытия заявки
	Date *string `json:"date,omitempty"`

	// Exchange Биржа
	Exchange *string `json:"exchange,omitempty"`

	// Existing True - для данных из "снепшота", то есть из истории. False - для новых событий
	Existing *bool `json:"existing,omitempty"`

	// Id Уникальный идентификатор сделки
	Id *json.Number `json:"id,omitempty"`

	// Orderno Идентификатор заявки
	Orderno *json.Number `json:"orderno,omitempty"`

	// Price Цена
	Price *float64 `json:"price,omitempty"`

	// Qty Количество (лоты)
	Qty *int `json:"qty,omitempty"`

	// QtyBatch Количество (лоты)
	QtyBatch *int `json:"qtyBatch,omitempty"`

	// QtyUnits Количество (штуки)
	QtyUnits *int `json:"qtyUnits,omitempty"`

	// Side Направление сделки. Купля либо продажа.
	Side *TradeSide `json:"side,omitempty"`

	// Symbol Тикер (Код финансового инструмента). "[N/A]" используется если symbol не определен.
	Symbol *string `json:"symbol,omitempty"`
}

// TradeSide Направление сделки. Купля либо продажа.
type TradeSide string

// Trades defines model for trades.
type Trades = []Trade

// WsReqAllTradesGetAndSubscribe defines model for ws_req_AllTradesGetAndSubscribe.
type WsReqAllTradesGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Depth Если указать, то перед актуальными данными придут данные о последних N сделках. Максимум 5000.
	Depth *float64 `json:"depth,omitempty"`

	// Exchange Биржа
	Exchange *WsReqAllTradesGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqAllTradesGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// IncludeVirtualTrades Указывает, нужно ли отправлять виртуальные (индикативные) сделки
	IncludeVirtualTrades *bool `json:"includeVirtualTrades,omitempty"`

	// Opcode Код операции
	Opcode *WsReqAllTradesGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqAllTradesGetAndSubscribeExchange Биржа
type WsReqAllTradesGetAndSubscribeExchange string

// WsReqAllTradesGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqAllTradesGetAndSubscribeFormat string

// WsReqAllTradesGetAndSubscribeOpcode Код операции
type WsReqAllTradesGetAndSubscribeOpcode string

// WsReqBarsGetAndSubscribe defines model for ws_req_BarsGetAndSubscribe.
type WsReqBarsGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Delayed Данные c задержкой в 15 минут. Для авторизованых клиентов задержка не применяется.
	Delayed *string `json:"delayed,omitempty"`

	// Exchange Биржа
	Exchange *WsReqBarsGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// From Дата и время (UTC) для первой запрашиваемой свечи
	From *int `json:"from,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqBarsGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Tf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
	Tf *WsReqBarsGetAndSubscribeTf `json:"tf,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqBarsGetAndSubscribeExchange Биржа
type WsReqBarsGetAndSubscribeExchange string

// WsReqBarsGetAndSubscribeOpcode Код операции
type WsReqBarsGetAndSubscribeOpcode string

// WsReqBarsGetAndSubscribeTf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
type WsReqBarsGetAndSubscribeTf string

// WsReqInstrumentsGetAndSubscribeV2 defines model for ws_req_InstrumentsGetAndSubscribeV2.
type WsReqInstrumentsGetAndSubscribeV2 struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Exchange Биржа
	Exchange *WsReqInstrumentsGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqInstrumentsGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqInstrumentsGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqInstrumentsGetAndSubscribeV2Exchange Биржа
type WsReqInstrumentsGetAndSubscribeV2Exchange string

// WsReqInstrumentsGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqInstrumentsGetAndSubscribeV2Format string

// WsReqInstrumentsGetAndSubscribeV2Opcode Код операции
type WsReqInstrumentsGetAndSubscribeV2Opcode string

// WsReqOrderBookGetAndSubscribe defines model for ws_req_OrderBookGetAndSubscribe.
type WsReqOrderBookGetAndSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Depth Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
	Depth *int `json:"depth,omitempty"`

	// Exchange Биржа
	Exchange *WsReqOrderBookGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqOrderBookGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqOrderBookGetAndSubscribeExchange Биржа
type WsReqOrderBookGetAndSubscribeExchange string

// WsReqOrderBookGetAndSubscribeOpcode Код операции
type WsReqOrderBookGetAndSubscribeOpcode string

// WsReqOrdersGetAndSubscribe defines model for ws_req_OrdersGetAndSubscribe.
type WsReqOrdersGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqOrdersGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqOrdersGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqOrdersGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqOrdersGetAndSubscribeExchange Биржа
type WsReqOrdersGetAndSubscribeExchange string

// WsReqOrdersGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqOrdersGetAndSubscribeFormat string

// WsReqOrdersGetAndSubscribeOpcode Код операции
type WsReqOrdersGetAndSubscribeOpcode string

// WsReqPositionsGetAndSubscribe defines model for ws_req_PositionsGetAndSubscribe.
type WsReqPositionsGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqPositionsGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqPositionsGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqPositionsGetAndSubscribeExchange Биржа
type WsReqPositionsGetAndSubscribeExchange string

// WsReqPositionsGetAndSubscribeOpcode Код операции
type WsReqPositionsGetAndSubscribeOpcode string

// WsReqQuotesSubscribe defines model for ws_req_QuotesSubscribe.
type WsReqQuotesSubscribe struct {
	// Code Тикер
	Code *string `json:"code,omitempty"`

	// Exchange Биржа
	Exchange *WsReqQuotesSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *string `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *interface{} `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqQuotesSubscribeExchange Биржа
type WsReqQuotesSubscribeExchange string

// WsReqRisksGetAndSubscribe defines model for ws_req_RisksGetAndSubscribe.
type WsReqRisksGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqRisksGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqRisksGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *string `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqRisksGetAndSubscribeExchange Биржа
type WsReqRisksGetAndSubscribeExchange string

// WsReqRisksGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqRisksGetAndSubscribeFormat string

// WsReqSpectraRisksGetAndSubscribe defines model for ws_req_SpectraRisksGetAndSubscribe.
type WsReqSpectraRisksGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqSpectraRisksGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqSpectraRisksGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqSpectraRisksGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqSpectraRisksGetAndSubscribeExchange Биржа
type WsReqSpectraRisksGetAndSubscribeExchange string

// WsReqSpectraRisksGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqSpectraRisksGetAndSubscribeFormat string

// WsReqSpectraRisksGetAndSubscribeOpcode Код операции
type WsReqSpectraRisksGetAndSubscribeOpcode string

// WsReqStopOrdersGetAndSubscribe defines model for ws_req_StopOrdersGetAndSubscribe.
type WsReqStopOrdersGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqStopOrdersGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqStopOrdersGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqStopOrdersGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqStopOrdersGetAndSubscribeExchange Биржа
type WsReqStopOrdersGetAndSubscribeExchange string

// WsReqStopOrdersGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqStopOrdersGetAndSubscribeFormat string

// WsReqStopOrdersGetAndSubscribeOpcode Код операции
type WsReqStopOrdersGetAndSubscribeOpcode string

// WsReqStopOrdersGetAndSubscribeV2 defines model for ws_req_StopOrdersGetAndSubscribeV2.
type WsReqStopOrdersGetAndSubscribeV2 struct {
	// Exchange Биржа
	Exchange *WsReqStopOrdersGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqStopOrdersGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqStopOrdersGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqStopOrdersGetAndSubscribeV2Exchange Биржа
type WsReqStopOrdersGetAndSubscribeV2Exchange string

// WsReqStopOrdersGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqStopOrdersGetAndSubscribeV2Format string

// WsReqStopOrdersGetAndSubscribeV2Opcode Код операции
type WsReqStopOrdersGetAndSubscribeV2Opcode string

// WsReqSummariesGetAndSubscribeV2 defines model for ws_req_SummariesGetAndSubscribeV2.
type WsReqSummariesGetAndSubscribeV2 struct {
	// Exchange Биржа
	Exchange *WsReqSummariesGetAndSubscribeV2Exchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqSummariesGetAndSubscribeV2Format `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqSummariesGetAndSubscribeV2Opcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqSummariesGetAndSubscribeV2Exchange Биржа
type WsReqSummariesGetAndSubscribeV2Exchange string

// WsReqSummariesGetAndSubscribeV2Format Формат возвращаемого сервером JSON
type WsReqSummariesGetAndSubscribeV2Format string

// WsReqSummariesGetAndSubscribeV2Opcode Код операции
type WsReqSummariesGetAndSubscribeV2Opcode string

// WsReqTradesGetAndSubscribe defines model for ws_req_TradesGetAndSubscribe.
type WsReqTradesGetAndSubscribe struct {
	// Exchange Биржа
	Exchange *WsReqTradesGetAndSubscribeExchange `json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *WsReqTradesGetAndSubscribeFormat `json:"format,omitempty"`

	// Guid Уникальный идентификатор сообщений создаваемой подписки. Все входящие сообщения, соответствующие этой подписке, будут иметь такое значение поля guid.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqTradesGetAndSubscribeOpcode `json:"opcode,omitempty"`

	// Portfolio Идентификатор клиентского портфеля
	Portfolio *string `json:"portfolio,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqTradesGetAndSubscribeExchange Биржа
type WsReqTradesGetAndSubscribeExchange string

// WsReqTradesGetAndSubscribeFormat Формат возвращаемого сервером JSON
type WsReqTradesGetAndSubscribeFormat string

// WsReqTradesGetAndSubscribeOpcode Код операции
type WsReqTradesGetAndSubscribeOpcode string

// WsReqUnsubscribe defines model for ws_req_Unsubscribe.
type WsReqUnsubscribe struct {
	// Guid Уникальный идентификатор подписки, от которой отписываемся.
	Guid *string `json:"guid,omitempty"`

	// Opcode Код операции
	Opcode *WsReqUnsubscribeOpcode `json:"opcode,omitempty"`

	// Token JWT токен для авторизации
	Token *string `json:"token,omitempty"`
}

// WsReqUnsubscribeOpcode Код операции
type WsReqUnsubscribeOpcode string

// WsResBarsGetAndSubscribe defines model for ws_res_BarsGetAndSubscribe.
type WsResBarsGetAndSubscribe struct {
	// Data Сообщение с данными о ценах на рынке (свечи)
	Data *struct {
		// Close Цена при закрытии
		Close *float64 `json:"close,omitempty"`

		// High Максимальная цена
		High *float64 `json:"high,omitempty"`

		// Low Минимальная цена
		Low *float64 `json:"low,omitempty"`

		// Open Цена при открытии
		Open *float64 `json:"open,omitempty"`

		// Time Время (UTC) (Unix time seconds)
		Time *int64 `json:"time,omitempty"`

		// Volume Объём
		Volume *int `json:"volume,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResHandledSuccessfully defines model for ws_res_HandledSuccessfully.
type WsResHandledSuccessfully struct {
	// HttpCode HTTP-код ответа
	HttpCode *int `json:"httpCode,omitempty"`

	// Message Информация по созданной/отменённой подписке
	Message *string `json:"message,omitempty"`

	// RequestGuid Уникальный идентификатор подписки. Значение во входящем сообщении равно значению поля \"guid\", переданному при установке соединения.
	RequestGuid *string `json:"requestGuid,omitempty"`
}

// WsResOrderBookGetAndSubscribe defines model for ws_res_OrderBookGetAndSubscribe.
type WsResOrderBookGetAndSubscribe struct {
	// Data Данные о запрашиваемом "биржевом стакане"
	Data *Orderbook `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResOrdersGetAndSubscribe defines model for ws_res_OrdersGetAndSubscribe.
type WsResOrdersGetAndSubscribe struct {
	Data *Order `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResPositionsGetAndSubscribe defines model for ws_res_PositionsGetAndSubscribe.
type WsResPositionsGetAndSubscribe struct {
	// Data Сообщение с данными о позициях по ценным бумагам и валютным остаткам
	Data *struct {
		// AvgPrice Средняя цена сделок по позициям
		AvgPrice *float64 `json:"avgPrice,omitempty"`

		// BrokerSymbol Биржа:Тикер
		BrokerSymbol *string `json:"brokerSymbol,omitempty"`

		// DailyUnrealisedPl Нереализованная прибыль за день
		DailyUnrealisedPl *float64 `json:"dailyUnrealisedPl,omitempty"`

		// Exchange Биржа
		Exchange *string `json:"exchange,omitempty"`

		// IsCurrency True для валютных остатков (денег), false - для торговых инструментов
		IsCurrency *bool `json:"isCurrency,omitempty"`

		// LotSize Размер лота
		LotSize *int `json:"lotSize,omitempty"`

		// Open Позиции на момент открытия (начала торгов)
		Open *int `json:"open,omitempty"`

		// OpenQtyBatch Позиции на момент открытия (начала торгов)
		OpenQtyBatch *int `json:"openQtyBatch,omitempty"`

		// OpenUnits Позиций на момент открытия (штуки)
		OpenUnits *int `json:"openUnits,omitempty"`

		// Qty Количество (лоты)
		Qty *int `json:"qty,omitempty"`

		// QtyBatch Количество (лоты)
		QtyBatch *int `json:"qtyBatch,omitempty"`

		// QtyT0 Количество на дату "Т0" (штуки)
		QtyT0 *int `json:"qtyT0,omitempty"`

		// QtyT0Batch Количество на дату "Т0" (лоты)
		QtyT0Batch *int `json:"qtyT0Batch,omitempty"`

		// QtyT1 Количество на дату "Т1" (штуки)
		QtyT1 *int `json:"qtyT1,omitempty"`

		// QtyT1Batch Количество на дату "Т1" (лоты)
		QtyT1Batch *int `json:"qtyT1Batch,omitempty"`

		// QtyT2 Количество на дату "Т2" (штуки)
		QtyT2 *int `json:"qtyT2,omitempty"`

		// QtyT2Batch Количество на дату "Т2" (лоты)
		QtyT2Batch *int `json:"qtyT2Batch,omitempty"`

		// QtyTFuture Количество на дату "TFuture" (штуки)
		QtyTFuture *int `json:"qtyTFuture,omitempty"`

		// QtyTFutureBatch Количество на дату "TFuture" (лоты)
		QtyTFutureBatch *int `json:"qtyTFutureBatch,omitempty"`

		// QtyUnits Количество (штуки)
		QtyUnits *int `json:"qtyUnits,omitempty"`

		// ShortName Наименование инструмента
		ShortName *string `json:"shortName,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`

		// UnrealisedPl Нереализованная прибыль
		UnrealisedPl *float64 `json:"unrealisedPl,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResQuotesSubscribe defines model for ws_res_QuotesSubscribe.
type WsResQuotesSubscribe struct {
	Data *struct {
		// AccruedInt Начислено
		AccruedInt *int `json:"accruedInt"`

		// AccruedInterest Начислено
		AccruedInterest *int `json:"accrued_interest"`

		// Ask Аск
		Ask *float64 `json:"ask,omitempty"`

		// Bid Бид
		Bid *float64 `json:"bid,omitempty"`

		// Change Разность цены и цены предыдущего закрытия
		Change *float64 `json:"change"`

		// ChangePercent Относительное изменение цены
		ChangePercent *float64 `json:"change_percent"`

		// Description Короткое описание на русском языке
		Description *string `json:"description,omitempty"`

		// Exchange Биржа
		Exchange  *string  `json:"exchange,omitempty"`
		Facevalue *float64 `json:"facevalue,omitempty"`

		// HighPrice Максимальная цена
		HighPrice *float64 `json:"high_price,omitempty"`

		// LastPrice Последняя цена
		LastPrice *float64 `json:"last_price,omitempty"`

		// LastPriceTimestamp Время последней цены (UTC)
		LastPriceTimestamp *int64 `json:"last_price_timestamp,omitempty"`

		// Lotsize Размер лота
		Lotsize  *float64 `json:"lotsize,omitempty"`
		Lotvalue *float64 `json:"lotvalue,omitempty"`

		// LowPrice Минимальная цена
		LowPrice *float64 `json:"low_price,omitempty"`

		// OpenPrice Цена открытия
		OpenPrice *float64 `json:"open_price,omitempty"`

		// PrevClosePrice Цена предыдущего закрытия
		PrevClosePrice *float64 `json:"prev_close_price,omitempty"`

		// Symbol Тикер (Код финансового инструмента)
		Symbol *string `json:"symbol,omitempty"`
		Type   *string `json:"type,omitempty"`

		// Volume Объём
		Volume *float64 `json:"volume,omitempty"`
		Yield  *int     `json:"yield,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResRisksGetAndSubscribe defines model for ws_res_RisksGetAndSubscribe.
type WsResRisksGetAndSubscribe struct {
	Data *Risk `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResSpectraRisksGetAndSubscribe defines model for ws_res_SpectraRisksGetAndSubscribe.
type WsResSpectraRisksGetAndSubscribe struct {
	Data *Fortsrisk `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResStopOrdersGetAndSubscribe defines model for ws_res_StopOrdersGetAndSubscribe.
type WsResStopOrdersGetAndSubscribe struct {
	Data *Stoporder `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResStopOrdersGetAndSubscribeWarp defines model for ws_res_StopOrdersGetAndSubscribeWarp.
type WsResStopOrdersGetAndSubscribeWarp struct {
	Data *StoporderWarp `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResSummariesGetAndSubscribeV2 defines model for ws_res_SummariesGetAndSubscribeV2.
type WsResSummariesGetAndSubscribeV2 struct {
	// Data Сообщение с данными о позициях по деньгам
	Data *struct {
		// BuyingPower Покупательская способность
		BuyingPower *float64 `json:"buyingPower,omitempty"`

		// BuyingPowerAtMorning Покупательская способность (на утро)
		BuyingPowerAtMorning *float64 `json:"buyingPowerAtMorning,omitempty"`

		// Commission Суммарная комиссия (null для Срочного рынка)
		Commission *float64 `json:"commission"`

		// InitialMargin Начальная маржа
		InitialMargin *float64 `json:"initialMargin,omitempty"`

		// PortfolioEvaluation Ликвидный портфель
		PortfolioEvaluation *float64 `json:"portfolioEvaluation,omitempty"`

		// PortfolioLiquidationValue Оценка портфеля
		PortfolioLiquidationValue *float64 `json:"portfolioLiquidationValue,omitempty"`

		// Profit Прибыль
		Profit *float64 `json:"profit,omitempty"`

		// ProfitRate Относительная прибыль
		ProfitRate *float64 `json:"profitRate,omitempty"`

		// RiskBeforeForcePositionClosing Риск до закрытия
		RiskBeforeForcePositionClosing *float64 `json:"riskBeforeForcePositionClosing,omitempty"`
	} `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// WsResTradesGetAndSubscribe defines model for ws_res_TradesGetAndSubscribe.
type WsResTradesGetAndSubscribe struct {
	Data *Trade `json:"data,omitempty"`

	// Guid Уникальный идентификатор сообщений подписки. Значение во входящем сообщении равно значению одноимённого поля, переданному при установке соединения.
	Guid *string `json:"guid,omitempty"`
}

// CommandAPIv2clientordersactionslimitParams defines parameters for CommandAPIv2clientordersactionslimit.
type CommandAPIv2clientordersactionslimitParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionslimitputParams defines parameters for CommandAPIv2clientordersactionslimitput.
type CommandAPIv2clientordersactionslimitputParams struct {
	// XALORREQID Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsmarketParams defines parameters for CommandAPIv2clientordersactionsmarket.
type CommandAPIv2clientordersactionsmarketParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsmarketputParams defines parameters for CommandAPIv2clientordersactionsmarketput.
type CommandAPIv2clientordersactionsmarketputParams struct {
	// XALORREQID Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopParams defines parameters for CommandAPIv2clientordersactionsstop.
type CommandAPIv2clientordersactionsstopParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopLimitParams defines parameters for CommandAPIv2clientordersactionsstopLimit.
type CommandAPIv2clientordersactionsstopLimitParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionsstopLimitStopOrderIdParams defines parameters for CommandAPIv2clientordersactionsstopLimitStopOrderId.
type CommandAPIv2clientordersactionsstopLimitStopOrderIdParams struct {
	// XALORREQID Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора.
	XALORREQID string `json:"X-ALOR-REQID"`
}

// v2clientordersactionsestimateallJSONBody defines parameters for V2clientordersactionsestimateall.
type v2clientordersactionsestimateallJSONBody = []EstimateOrderViewModel

// CommandAPIv2clientordersdeleteParams defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Exchange Биржа
	Exchange CommandAPIv2clientordersdeleteParamsExchange `form:"exchange" json:"exchange"`

	// Stop Является стоп-заявкой?
	Stop CommandAPIv2clientordersdeleteParamsStop `form:"stop" json:"stop"`

	// JsonResponse Ответ в формате JSON. В виде отдельного параметра для обратной совместимости.
	JsonResponse *CommandAPIv2clientordersdeleteParamsJsonResponse `form:"jsonResponse,omitempty" json:"jsonResponse,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *CommandAPIv2clientordersdeleteParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// CommandAPIv2clientordersdeleteParamsExchange defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsExchange string

// CommandAPIv2clientordersdeleteParamsStop defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsStop string

// CommandAPIv2clientordersdeleteParamsJsonResponse defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsJsonResponse bool

// CommandAPIv2clientordersdeleteParamsFormat defines parameters for CommandAPIv2clientordersdelete.
type CommandAPIv2clientordersdeleteParamsFormat string

// CommandAPIWarpv2clientordersdeleteParams defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Exchange Биржа
	Exchange CommandAPIWarpv2clientordersdeleteParamsExchange `form:"exchange" json:"exchange"`

	// Stop Является стоп-заявкой? (тестирование: всегда true)
	Stop CommandAPIWarpv2clientordersdeleteParamsStop `form:"stop" json:"stop"`

	// JsonResponse Ответ в формате JSON. В виде отдельного параметра для обратной совместимости.
	JsonResponse *CommandAPIWarpv2clientordersdeleteParamsJsonResponse `form:"jsonResponse,omitempty" json:"jsonResponse,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *CommandAPIWarpv2clientordersdeleteParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// CommandAPIWarpv2clientordersdeleteParamsExchange defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsExchange string

// CommandAPIWarpv2clientordersdeleteParamsStop defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsStop string

// CommandAPIWarpv2clientordersdeleteParamsJsonResponse defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsJsonResponse bool

// CommandAPIWarpv2clientordersdeleteParamsFormat defines parameters for CommandAPIWarpv2clientordersdelete.
type CommandAPIWarpv2clientordersdeleteParamsFormat string

// TradeStatsParams defines parameters for TradeStats.
type TradeStatsParams struct {
	// DateFrom Начиная с какой даты отдавать историю сделок
	DateFrom *openapi_types.Date `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// From Начиная с какого ID (номера сделки) отдавать историю сделок
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit Количество возвращаемых записей (максимум 1000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Descending Флаг обратной сортировки выдачи
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *TradeStatsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// TradeStatsParamsFormat defines parameters for TradeStats.
type TradeStatsParamsFormat string

// TradeStatsParamsExchange defines parameters for TradeStats.
type TradeStatsParamsExchange string

// TradeStatsBySymbolParams defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParams struct {
	// DateFrom Начиная с какой даты отдавать историю сделок
	DateFrom *openapi_types.Date `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// From Начиная с какого ID (номера сделки) отдавать историю сделок
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit Количество возвращаемых записей (максимум 1000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Descending Флаг обратной сортировки выдачи
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *TradeStatsBySymbolParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// TradeStatsBySymbolParamsFormat defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParamsFormat string

// TradeStatsBySymbolParamsExchange defines parameters for TradeStatsBySymbol.
type TradeStatsBySymbolParamsExchange string

// FortsriskParams defines parameters for Fortsrisk.
type FortsriskParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *FortsriskParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// FortsriskParamsFormat defines parameters for Fortsrisk.
type FortsriskParamsFormat string

// FortsriskParamsExchange defines parameters for Fortsrisk.
type FortsriskParamsExchange string

// DevGetAllPositionsParams defines parameters for DevGetAllPositions.
type DevGetAllPositionsParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllPositionsParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// WithoutCurrency Исключить из ответа все денежные инструменты, по умолчанию false
	WithoutCurrency *DevGetAllPositionsParamsWithoutCurrency `form:"withoutCurrency,omitempty" json:"withoutCurrency,omitempty"`
}

// DevGetAllPositionsParamsFormat defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsFormat string

// DevGetAllPositionsParamsWithoutCurrency defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsWithoutCurrency bool

// DevGetAllPositionsParamsExchange defines parameters for DevGetAllPositions.
type DevGetAllPositionsParamsExchange string

// DevGetOnePositionParams defines parameters for DevGetOnePosition.
type DevGetOnePositionParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOnePositionParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOnePositionParamsFormat defines parameters for DevGetOnePosition.
type DevGetOnePositionParamsFormat string

// DevGetOnePositionParamsExchange defines parameters for DevGetOnePosition.
type DevGetOnePositionParamsExchange string

// RiskParams defines parameters for Risk.
type RiskParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *RiskParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// RiskParamsFormat defines parameters for Risk.
type RiskParamsFormat string

// RiskParamsExchange defines parameters for Risk.
type RiskParamsExchange string

// DevGetAllTradesParams defines parameters for DevGetAllTrades.
type DevGetAllTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllTradesParamsFormat defines parameters for DevGetAllTrades.
type DevGetAllTradesParamsFormat string

// DevGetAllTradesParamsExchange defines parameters for DevGetAllTrades.
type DevGetAllTradesParamsExchange string

// DevGetTickerTradesParams defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetTickerTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetTickerTradesParamsFormat defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParamsFormat string

// DevGetTickerTradesParamsExchange defines parameters for DevGetTickerTrades.
type DevGetTickerTradesParamsExchange string

// DevSecuritiesSearchParams defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParams struct {
	// Query Тикер (Код финансового инструмента)
	Query string `form:"query" json:"query"`

	// Limit Ограничение на количество выдаваемых результатов поиска
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Смещение начала выборки (для пагинации)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Sector Рынок на бирже
	Sector *DevSecuritiesSearchParamsSector `form:"sector,omitempty" json:"sector,omitempty"`

	// Cficode Код финансового инструмента по стандарту ISO 10962
	Cficode *string `form:"cficode,omitempty" json:"cficode,omitempty"`

	// Exchange Биржа
	Exchange *DevSecuritiesSearchParamsExchange `form:"exchange,omitempty" json:"exchange,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchParamsSector defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsSector string

// DevSecuritiesSearchParamsExchange defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsExchange string

// DevSecuritiesSearchParamsFormat defines parameters for DevSecuritiesSearch.
type DevSecuritiesSearchParamsFormat string

// DevSecuritiesSearchExchangeParams defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchExchangeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchExchangeParamsFormat defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParamsFormat string

// DevSecuritiesSearchExchangeParamsExchange defines parameters for DevSecuritiesSearchExchange.
type DevSecuritiesSearchExchangeParamsExchange string

// DevSecuritiesSearchExchangeCodeParams defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchExchangeCodeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesSearchExchangeCodeParamsFormat defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParamsFormat string

// DevSecuritiesSearchExchangeCodeParamsExchange defines parameters for DevSecuritiesSearchExchangeCode.
type DevSecuritiesSearchExchangeCodeParamsExchange string

// DevSecuritiesFuturesParams defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesFuturesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevSecuritiesFuturesParamsFormat defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParamsFormat string

// DevSecuritiesFuturesParamsExchange defines parameters for DevSecuritiesFutures.
type DevSecuritiesFuturesParamsExchange string

// DevSecuritiesSearchAllTradesParams defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevSecuritiesSearchAllTradesParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// From Начало отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Конец отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// Take Количество загружаемых элементов
	Take *int `form:"take,omitempty" json:"take,omitempty"`

	// Descending Флаг загрузки элементов с конца списка
	Descending *bool `form:"descending,omitempty" json:"descending,omitempty"`

	// IncludeVirtualTrades Флаг загрузки виртуальных (индикативных) сделок, полученных из заявок на питерской бирже
	IncludeVirtualTrades *bool `form:"includeVirtualTrades,omitempty" json:"includeVirtualTrades,omitempty"`
}

// DevSecuritiesSearchAllTradesParamsFormat defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParamsFormat string

// DevSecuritiesSearchAllTradesParamsExchange defines parameters for DevSecuritiesSearchAllTrades.
type DevSecuritiesSearchAllTradesParamsExchange string

// DevQuotesParams defines parameters for DevQuotes.
type DevQuotesParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevQuotesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevQuotesParamsFormat defines parameters for DevQuotes.
type DevQuotesParamsFormat string

// ExchangePortfolioMoneyParams defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *ExchangePortfolioMoneyParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// ExchangePortfolioMoneyParamsFormat defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParamsFormat string

// ExchangePortfolioMoneyParamsExchange defines parameters for ExchangePortfolioMoney.
type ExchangePortfolioMoneyParamsExchange string

// DevGetAllOrdersParams defines parameters for DevGetAllOrders.
type DevGetAllOrdersParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllOrdersParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllOrdersParamsFormat defines parameters for DevGetAllOrders.
type DevGetAllOrdersParamsFormat string

// DevGetAllOrdersParamsExchange defines parameters for DevGetAllOrders.
type DevGetAllOrdersParamsExchange string

// DevGetOneOrderParams defines parameters for DevGetOneOrder.
type DevGetOneOrderParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOneOrderParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOneOrderParamsFormat defines parameters for DevGetOneOrder.
type DevGetOneOrderParamsFormat string

// DevGetOneOrderParamsExchange defines parameters for DevGetOneOrder.
type DevGetOneOrderParamsExchange string

// DevGetAllStopOrdersParams defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetAllStopOrdersParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetAllStopOrdersParamsFormat defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParamsFormat string

// DevGetAllStopOrdersParamsExchange defines parameters for DevGetAllStopOrders.
type DevGetAllStopOrdersParamsExchange string

// DevGetOneStopOrderParams defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *DevGetOneStopOrderParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevGetOneStopOrderParamsFormat defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParamsFormat string

// DevGetOneStopOrderParamsExchange defines parameters for DevGetOneStopOrder.
type DevGetOneStopOrderParamsExchange string

// ExchangePortfolioSummaryParams defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParams struct {
	// Format Формат возвращаемого сервером JSON
	Format *ExchangePortfolioSummaryParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// ExchangePortfolioSummaryParamsFormat defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParamsFormat string

// ExchangePortfolioSummaryParamsExchange defines parameters for ExchangePortfolioSummary.
type ExchangePortfolioSummaryParamsExchange string

// DevHistoryParams defines parameters for DevHistory.
type DevHistoryParams struct {
	// Symbol Тикер (Код финансового инструмента)
	Symbol string `form:"symbol" json:"symbol"`

	// Exchange Биржа
	Exchange DevHistoryParamsExchange `form:"exchange" json:"exchange"`

	// Tf Длительность таймфрейма в секундах или код ("D" - дни, "W" - недели, "M" - месяцы, "Y" - годы)
	Tf DevHistoryParamsTf `form:"tf" json:"tf"`

	// From Начало отрезка времени (UTC) в формате Unix Time Seconds
	From int64 `form:"from" json:"from"`

	// To Конец отрезка времени (UTC) в формате Unix Time Seconds
	To int64 `form:"to" json:"to"`

	// Untraded Флаг для поиска данных по устаревшим или экспирированным инструментам. При использовании требуется точное совпадение тикера
	Untraded *DevHistoryParamsUntraded `form:"untraded,omitempty" json:"untraded,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevHistoryParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevHistoryParamsExchange defines parameters for DevHistory.
type DevHistoryParamsExchange string

// DevHistoryParamsTf defines parameters for DevHistory.
type DevHistoryParamsTf string

// DevHistoryParamsUntraded defines parameters for DevHistory.
type DevHistoryParamsUntraded bool

// DevHistoryParamsFormat defines parameters for DevHistory.
type DevHistoryParamsFormat string

// DevOrderbookExchangSeccodeParams defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParams struct {
	// Depth Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
	Depth *int `form:"depth,omitempty" json:"depth,omitempty"`

	// Format Формат возвращаемого сервером JSON
	Format *DevOrderbookExchangSeccodeParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DevOrderbookExchangSeccodeParamsFormat defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParamsFormat string

// DevOrderbookExchangSeccodeParamsExchange defines parameters for DevOrderbookExchangSeccode.
type DevOrderbookExchangSeccodeParamsExchange string

// RiskRatesParams defines parameters for RiskRates.
type RiskRatesParams struct {
	// Exchange Биржа
	Exchange RiskRatesParamsExchange `form:"exchange" json:"exchange"`

	// Ticker Тикер\код инструмента, ISIN для облигаций
	Ticker *string `form:"ticker,omitempty" json:"ticker,omitempty"`

	// RiskCategoryId Id вашей (или той которая интересует) категории риска. Можно получить из запроса информации по клиенту или через кабинет клиента
	RiskCategoryId *string `form:"riskCategoryId,omitempty" json:"riskCategoryId,omitempty"`

	// Search Часть Тикера\кода инструмента, ISIN для облигаций. Вернет все совпадения, начинающиеся с
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// RiskRatesParamsExchange defines parameters for RiskRates.
type RiskRatesParamsExchange string

// V2clientordersactionsstopLossParams defines parameters for V2clientordersactionsstopLoss.
type V2clientordersactionsstopLossParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossOrderIdParams defines parameters for V2clientordersactionsstopLossOrderId.
type V2clientordersactionsstopLossOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossLimitParams defines parameters for V2clientordersactionsstopLossLimit.
type V2clientordersactionsstopLossLimitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsstopLossLimitOrderIdParams defines parameters for V2clientordersactionsstopLossLimitOrderId.
type V2clientordersactionsstopLossLimitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitParams defines parameters for V2clientordersactionstakeProfit.
type V2clientordersactionstakeProfitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitOrderIdParams defines parameters for V2clientordersactionstakeProfitOrderId.
type V2clientordersactionstakeProfitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitLimitParams defines parameters for V2clientordersactionstakeProfitLimit.
type V2clientordersactionstakeProfitLimitParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionstakeProfitLimitOrderIdParams defines parameters for V2clientordersactionstakeProfitLimitOrderId.
type V2clientordersactionstakeProfitLimitOrderIdParams struct {
	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// V2clientordersactionsOrderIdParams defines parameters for V2clientordersactionsOrderId.
type V2clientordersactionsOrderIdParams struct {
	// Portfolio Идентификатор клиентского портфеля
	Portfolio string `form:"portfolio" json:"portfolio"`

	// Stop Является стоп-заявкой?
	Stop bool `form:"stop" json:"stop"`

	// XALORREQID Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора
	XALORREQID string `json:"X-ALOR-REQID"`
}

// CommandAPIv2clientordersactionslimitJSONRequestBody defines body for CommandAPIv2clientordersactionslimit for application/json ContentType.
type CommandAPIv2clientordersactionslimitJSONRequestBody = BodyrequestOrdersActionsLimitTV

// CommandAPIv2clientordersactionslimitputJSONRequestBody defines body for CommandAPIv2clientordersactionslimitput for application/json ContentType.
type CommandAPIv2clientordersactionslimitputJSONRequestBody = BodyrequestOrdersActionsLimitTVput

// CommandAPIv2clientordersactionsmarketJSONRequestBody defines body for CommandAPIv2clientordersactionsmarket for application/json ContentType.
type CommandAPIv2clientordersactionsmarketJSONRequestBody = BodyrequestOrdersActionsMarketTV

// CommandAPIv2clientordersactionsmarketputJSONRequestBody defines body for CommandAPIv2clientordersactionsmarketput for application/json ContentType.
type CommandAPIv2clientordersactionsmarketputJSONRequestBody = BodyrequestOrdersActionsMarketTVput

// CommandAPIv2clientordersactionsstopJSONRequestBody defines body for CommandAPIv2clientordersactionsstop for application/json ContentType.
type CommandAPIv2clientordersactionsstopJSONRequestBody = BodyrequestOrdersActionsStopMarketTVWarp

// CommandAPIv2clientordersactionsstopLimitJSONRequestBody defines body for CommandAPIv2clientordersactionsstopLimit for application/json ContentType.
type CommandAPIv2clientordersactionsstopLimitJSONRequestBody = BodyrequestOrdersActionsStopLimitTVWarp

// CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody defines body for CommandAPIv2clientordersactionsstopLimitStopOrderId for application/json ContentType.
type CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody = BodyrequestOrdersActionsStopLimitTVWarp

// V2clientordersactionsestimateJSONRequestBody defines body for V2clientordersactionsestimate for application/*+json ContentType.
type V2clientordersactionsestimateJSONRequestBody = EstimateOrderViewModel

// V2clientordersactionsestimateallJSONRequestBody defines body for V2clientordersactionsestimateall for application/*+json ContentType.
type V2clientordersactionsestimateallJSONRequestBody = v2clientordersactionsestimateallJSONBody

// V2clientordersactionsstopLossJSONRequestBody defines body for V2clientordersactionsstopLoss for application/json ContentType.
type V2clientordersactionsstopLossJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionsstopLossOrderIdJSONRequestBody defines body for V2clientordersactionsstopLossOrderId for application/json ContentType.
type V2clientordersactionsstopLossOrderIdJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionsstopLossLimitJSONRequestBody defines body for V2clientordersactionsstopLossLimit for application/json ContentType.
type V2clientordersactionsstopLossLimitJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionsstopLossLimitOrderIdJSONRequestBody defines body for V2clientordersactionsstopLossLimitOrderId for application/json ContentType.
type V2clientordersactionsstopLossLimitOrderIdJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionstakeProfitJSONRequestBody defines body for V2clientordersactionstakeProfit for application/json ContentType.
type V2clientordersactionstakeProfitJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionstakeProfitOrderIdJSONRequestBody defines body for V2clientordersactionstakeProfitOrderId for application/json ContentType.
type V2clientordersactionstakeProfitOrderIdJSONRequestBody = BodyrequestOrdersActionsStop

// V2clientordersactionstakeProfitLimitJSONRequestBody defines body for V2clientordersactionstakeProfitLimit for application/json ContentType.
type V2clientordersactionstakeProfitLimitJSONRequestBody = BodyrequestOrdersActionsStoplimit

// V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody defines body for V2clientordersactionstakeProfitLimitOrderId for application/json ContentType.
type V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody = BodyrequestOrdersActionsStoplimit

// WSProdUnsubscribeJSONRequestBody defines body for WSProdUnsubscribe for application/json ContentType.
type WSProdUnsubscribeJSONRequestBody = WsReqUnsubscribe

// WSProdStopOrdersSubscribeJSONRequestBody defines body for WSProdStopOrdersSubscribe for application/json ContentType.
type WSProdStopOrdersSubscribeJSONRequestBody = WsReqStopOrdersGetAndSubscribe

// WSProdSummariesGetAndSubscribeV2JSONRequestBody defines body for WSProdSummariesGetAndSubscribeV2 for application/json ContentType.
type WSProdSummariesGetAndSubscribeV2JSONRequestBody = WsReqSummariesGetAndSubscribeV2

// WSProdTradesSubscribeJSONRequestBody defines body for WSProdTradesSubscribe for application/json ContentType.
type WSProdTradesSubscribeJSONRequestBody = WsReqTradesGetAndSubscribe

// WSProdPositionsSubscribeJSONRequestBody defines body for WSProdPositionsSubscribe for application/json ContentType.
type WSProdPositionsSubscribeJSONRequestBody = WsReqPositionsGetAndSubscribe

// WSProdQuotesSubscribeJSONRequestBody defines body for WSProdQuotesSubscribe for application/json ContentType.
type WSProdQuotesSubscribeJSONRequestBody = WsReqQuotesSubscribe

// WSProdBarsGetJSONRequestBody defines body for WSProdBarsGet for application/json ContentType.
type WSProdBarsGetJSONRequestBody = WsReqBarsGetAndSubscribe

// WSProdOrderBookJSONRequestBody defines body for WSProdOrderBook for application/json ContentType.
type WSProdOrderBookJSONRequestBody = WsReqOrderBookGetAndSubscribe

// WSProdRisksGetAndSubscribeJSONRequestBody defines body for WSProdRisksGetAndSubscribe for application/json ContentType.
type WSProdRisksGetAndSubscribeJSONRequestBody = WsReqRisksGetAndSubscribe

// WSProdOrdersSubscribeJSONRequestBody defines body for WSProdOrdersSubscribe for application/json ContentType.
type WSProdOrdersSubscribeJSONRequestBody = WsReqOrdersGetAndSubscribe

// WSProdSpectraRisksGetAndSubscribeJSONRequestBody defines body for WSProdSpectraRisksGetAndSubscribe for application/json ContentType.
type WSProdSpectraRisksGetAndSubscribeJSONRequestBody = WsReqSpectraRisksGetAndSubscribe

// WSProdStopOrdersSubscribeV2JSONRequestBody defines body for WSProdStopOrdersSubscribeV2 for application/json ContentType.
type WSProdStopOrdersSubscribeV2JSONRequestBody = WsReqStopOrdersGetAndSubscribeV2

// WSProdAllTradesGetAndSubscribeJSONRequestBody defines body for WSProdAllTradesGetAndSubscribe for application/json ContentType.
type WSProdAllTradesGetAndSubscribeJSONRequestBody = WsReqAllTradesGetAndSubscribe

// WSProdInstrumentsGetAndSubscribeV2JSONRequestBody defines body for WSProdInstrumentsGetAndSubscribeV2 for application/json ContentType.
type WSProdInstrumentsGetAndSubscribeV2JSONRequestBody = WsReqInstrumentsGetAndSubscribeV2

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DevUserPortfolio request
	DevUserPortfolio(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionslimit request with any body
	CommandAPIv2clientordersactionslimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionslimit(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionslimitput request with any body
	CommandAPIv2clientordersactionslimitputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionslimitput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsmarket request with any body
	CommandAPIv2clientordersactionsmarketWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsmarket(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsmarketput request with any body
	CommandAPIv2clientordersactionsmarketputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsmarketput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstop request with any body
	CommandAPIv2clientordersactionsstopWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstop(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstopLimit request with any body
	CommandAPIv2clientordersactionsstopLimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstopLimit(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersactionsstopLimitStopOrderId request with any body
	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsestimate request with any body
	V2clientordersactionsestimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsestimate(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsestimateall request with any body
	V2clientordersactionsestimateallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsestimateall(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIv2clientordersdelete request
	CommandAPIv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandAPIWarpv2clientordersdelete request
	CommandAPIWarpv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TradeStats request
	TradeStats(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TradeStatsBySymbol request
	TradeStatsBySymbol(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fortsrisk request
	Fortsrisk(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllPositions request
	DevGetAllPositions(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOnePosition request
	DevGetOnePosition(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Risk request
	Risk(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllTrades request
	DevGetAllTrades(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetTickerTrades request
	DevGetTickerTrades(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearch request
	DevSecuritiesSearch(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchExchange request
	DevSecuritiesSearchExchange(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchExchangeCode request
	DevSecuritiesSearchExchangeCode(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesFutures request
	DevSecuritiesFutures(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevSecuritiesSearchAllTrades request
	DevSecuritiesSearchAllTrades(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevQuotes request
	DevQuotes(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExchangePortfolioMoney request
	ExchangePortfolioMoney(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllOrders request
	DevGetAllOrders(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOneOrder request
	DevGetOneOrder(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetAllStopOrders request
	DevGetAllStopOrders(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevGetOneStopOrder request
	DevGetOneStopOrder(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExchangePortfolioSummary request
	ExchangePortfolioSummary(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevHistory request
	DevHistory(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevOrderbookExchangSeccode request
	DevOrderbookExchangSeccode(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskRates request
	RiskRates(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalTime request
	LocalTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLoss request with any body
	V2clientordersactionsstopLossWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLoss(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossOrderId request with any body
	V2clientordersactionsstopLossOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossLimit request with any body
	V2clientordersactionsstopLossLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsstopLossLimitOrderId request with any body
	V2clientordersactionsstopLossLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionsstopLossLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfit request with any body
	V2clientordersactionstakeProfitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitOrderId request with any body
	V2clientordersactionstakeProfitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitLimit request with any body
	V2clientordersactionstakeProfitLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionstakeProfitLimitOrderId request with any body
	V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2clientordersactionstakeProfitLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2clientordersactionsOrderId request
	V2clientordersactionsOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdUnsubscribe request with any body
	WSProdUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdUnsubscribe(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdStopOrdersSubscribe request with any body
	WSProdStopOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdStopOrdersSubscribe(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdSummariesGetAndSubscribeV2 request with any body
	WSProdSummariesGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdSummariesGetAndSubscribeV2(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdTradesSubscribe request with any body
	WSProdTradesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdTradesSubscribe(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdPositionsSubscribe request with any body
	WSProdPositionsSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdPositionsSubscribe(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdQuotesSubscribe request with any body
	WSProdQuotesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdQuotesSubscribe(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdBarsGet request with any body
	WSProdBarsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdBarsGet(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdOrderBook request with any body
	WSProdOrderBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdOrderBook(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdRisksGetAndSubscribe request with any body
	WSProdRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdRisksGetAndSubscribe(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdOrdersSubscribe request with any body
	WSProdOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdOrdersSubscribe(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdSpectraRisksGetAndSubscribe request with any body
	WSProdSpectraRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdSpectraRisksGetAndSubscribe(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdStopOrdersSubscribeV2 request with any body
	WSProdStopOrdersSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdStopOrdersSubscribeV2(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdAllTradesGetAndSubscribe request with any body
	WSProdAllTradesGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdAllTradesGetAndSubscribe(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WSProdInstrumentsGetAndSubscribeV2 request with any body
	WSProdInstrumentsGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WSProdInstrumentsGetAndSubscribeV2(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DevUserPortfolio(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevUserPortfolioRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimit(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitputRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionslimitput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionslimitputRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarket(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketputWithBody(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketputRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsmarketput(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsmarketputRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstop(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitWithBody(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimit(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(c.Server, stopOrderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest(c.Server, stopOrderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimate(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsestimateall(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsestimateallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIv2clientordersdeleteRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandAPIWarpv2clientordersdelete(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandAPIWarpv2clientordersdeleteRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TradeStats(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTradeStatsRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TradeStatsBySymbol(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTradeStatsBySymbolRequest(c.Server, exchange, portfolio, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fortsrisk(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFortsriskRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllPositions(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllPositionsRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOnePosition(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOnePositionRequest(c.Server, exchange, portfolio, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Risk(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllTrades(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllTradesRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetTickerTrades(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetTickerTradesRequest(c.Server, exchange, portfolio, ticker, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearch(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchExchange(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchExchangeRequest(c.Server, exchange, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchExchangeCode(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchExchangeCodeRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesFutures(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesFuturesRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevSecuritiesSearchAllTrades(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevSecuritiesSearchAllTradesRequest(c.Server, exchange, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevQuotes(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevQuotesRequest(c.Server, symbols, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExchangePortfolioMoney(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExchangePortfolioMoneyRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllOrders(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllOrdersRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOneOrder(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOneOrderRequest(c.Server, exchange, portfolio, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetAllStopOrders(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetAllStopOrdersRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevGetOneStopOrder(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevGetOneStopOrderRequest(c.Server, exchange, portfolio, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExchangePortfolioSummary(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExchangePortfolioSummaryRequest(c.Server, exchange, portfolio, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevHistory(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevOrderbookExchangSeccode(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevOrderbookExchangSeccodeRequest(c.Server, exchange, seccode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskRates(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskRatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalTimeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLoss(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsstopLossLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsstopLossLimitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitWithBody(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitRequestWithBody(c.Server, tradeServerCode, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimit(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitRequest(c.Server, tradeServerCode, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(c.Server, tradeServerCode, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionstakeProfitLimitOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionstakeProfitLimitOrderIdRequest(c.Server, tradeServerCode, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2clientordersactionsOrderId(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2clientordersactionsOrderIdRequest(c.Server, tradeServerCode, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdUnsubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdUnsubscribe(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdUnsubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribe(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSummariesGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSummariesGetAndSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSummariesGetAndSubscribeV2(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSummariesGetAndSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdTradesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdTradesSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdTradesSubscribe(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdTradesSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdPositionsSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdPositionsSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdPositionsSubscribe(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdPositionsSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdQuotesSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdQuotesSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdQuotesSubscribe(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdQuotesSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdBarsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdBarsGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdBarsGet(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdBarsGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrderBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrderBookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrderBook(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrderBookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdRisksGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdRisksGetAndSubscribe(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdRisksGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrdersSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrdersSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdOrdersSubscribe(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdOrdersSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSpectraRisksGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdSpectraRisksGetAndSubscribe(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdSpectraRisksGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdStopOrdersSubscribeV2(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdStopOrdersSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdAllTradesGetAndSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdAllTradesGetAndSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdAllTradesGetAndSubscribe(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdAllTradesGetAndSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdInstrumentsGetAndSubscribeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WSProdInstrumentsGetAndSubscribeV2(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWSProdInstrumentsGetAndSubscribeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDevUserPortfolioRequest generates requests for DevUserPortfolio
func NewDevUserPortfolioRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/v1.0/users/%s/portfolios", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommandAPIv2clientordersactionslimitRequest calls the generic CommandAPIv2clientordersactionslimit builder with application/json body
func NewCommandAPIv2clientordersactionslimitRequest(server string, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionslimitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionslimitRequestWithBody generates requests for CommandAPIv2clientordersactionslimit with any type of body
func NewCommandAPIv2clientordersactionslimitRequestWithBody(server string, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/limit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionslimitputRequest calls the generic CommandAPIv2clientordersactionslimitput builder with application/json body
func NewCommandAPIv2clientordersactionslimitputRequest(server string, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionslimitputRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionslimitputRequestWithBody generates requests for CommandAPIv2clientordersactionslimitput with any type of body
func NewCommandAPIv2clientordersactionslimitputRequestWithBody(server string, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/limit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsmarketRequest calls the generic CommandAPIv2clientordersactionsmarket builder with application/json body
func NewCommandAPIv2clientordersactionsmarketRequest(server string, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsmarketRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsmarketRequestWithBody generates requests for CommandAPIv2clientordersactionsmarket with any type of body
func NewCommandAPIv2clientordersactionsmarketRequestWithBody(server string, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/market")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsmarketputRequest calls the generic CommandAPIv2clientordersactionsmarketput builder with application/json body
func NewCommandAPIv2clientordersactionsmarketputRequest(server string, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsmarketputRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsmarketputRequestWithBody generates requests for CommandAPIv2clientordersactionsmarketput with any type of body
func NewCommandAPIv2clientordersactionsmarketputRequestWithBody(server string, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/market/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopRequest calls the generic CommandAPIv2clientordersactionsstop builder with application/json body
func NewCommandAPIv2clientordersactionsstopRequest(server string, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopRequestWithBody generates requests for CommandAPIv2clientordersactionsstop with any type of body
func NewCommandAPIv2clientordersactionsstopRequestWithBody(server string, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopLimitRequest calls the generic CommandAPIv2clientordersactionsstopLimit builder with application/json body
func NewCommandAPIv2clientordersactionsstopLimitRequest(server string, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopLimitRequestWithBody generates requests for CommandAPIv2clientordersactionsstopLimit with any type of body
func NewCommandAPIv2clientordersactionsstopLimitRequestWithBody(server string, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest calls the generic CommandAPIv2clientordersactionsstopLimitStopOrderId builder with application/json body
func NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequest(server string, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(server, stopOrderId, params, "application/json", bodyReader)
}

// NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody generates requests for CommandAPIv2clientordersactionsstopLimitStopOrderId with any type of body
func NewCommandAPIv2clientordersactionsstopLimitStopOrderIdRequestWithBody(server string, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "stopOrderId", runtime.ParamLocationPath, stopOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/actions/stopLimit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsestimateRequest calls the generic V2clientordersactionsestimate builder with application/*+json body
func NewV2clientordersactionsestimateRequest(server string, body V2clientordersactionsestimateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsestimateRequestWithBody(server, "application/*+json", bodyReader)
}

// NewV2clientordersactionsestimateRequestWithBody generates requests for V2clientordersactionsestimate with any type of body
func NewV2clientordersactionsestimateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV2clientordersactionsestimateallRequest calls the generic V2clientordersactionsestimateall builder with application/*+json body
func NewV2clientordersactionsestimateallRequest(server string, body V2clientordersactionsestimateallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsestimateallRequestWithBody(server, "application/*+json", bodyReader)
}

// NewV2clientordersactionsestimateallRequestWithBody generates requests for V2clientordersactionsestimateall with any type of body
func NewV2clientordersactionsestimateallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/estimate/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommandAPIv2clientordersdeleteRequest generates requests for CommandAPIv2clientordersdelete
func NewCommandAPIv2clientordersdeleteRequest(server string, orderId int, params *CommandAPIv2clientordersdeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.JsonResponse != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jsonResponse", runtime.ParamLocationQuery, *params.JsonResponse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommandAPIWarpv2clientordersdeleteRequest generates requests for CommandAPIWarpv2clientordersdelete
func NewCommandAPIWarpv2clientordersdeleteRequest(server string, orderId int, params *CommandAPIWarpv2clientordersdeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commandapi/warptrans/TRADE/v2/client/orders/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.JsonResponse != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jsonResponse", runtime.ParamLocationQuery, *params.JsonResponse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTradeStatsRequest generates requests for TradeStats
func NewTradeStatsRequest(server string, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/stats/%s/%s/history/trades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTradeStatsBySymbolRequest generates requests for TradeStatsBySymbol
func NewTradeStatsBySymbolRequest(server string, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/stats/%s/%s/history/trades/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFortsriskRequest generates requests for Fortsrisk
func NewFortsriskRequest(server string, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/fortsrisk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllPositionsRequest generates requests for DevGetAllPositions
func NewDevGetAllPositionsRequest(server string, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/positions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WithoutCurrency != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withoutCurrency", runtime.ParamLocationQuery, *params.WithoutCurrency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOnePositionRequest generates requests for DevGetOnePosition
func NewDevGetOnePositionRequest(server string, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/positions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskRequest generates requests for Risk
func NewRiskRequest(server string, exchange RiskParamsExchange, portfolio string, params *RiskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/risk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllTradesRequest generates requests for DevGetAllTrades
func NewDevGetAllTradesRequest(server string, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/trades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetTickerTradesRequest generates requests for DevGetTickerTrades
func NewDevGetTickerTradesRequest(server string, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ticker", runtime.ParamLocationPath, ticker)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Clients/%s/%s/%s/trades", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchRequest generates requests for DevSecuritiesSearch
func NewDevSecuritiesSearchRequest(server string, params *DevSecuritiesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sector != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sector", runtime.ParamLocationQuery, *params.Sector); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cficode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cficode", runtime.ParamLocationQuery, *params.Cficode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Exchange != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchExchangeRequest generates requests for DevSecuritiesSearchExchange
func NewDevSecuritiesSearchExchangeRequest(server string, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchExchangeCodeRequest generates requests for DevSecuritiesSearchExchangeCode
func NewDevSecuritiesSearchExchangeCodeRequest(server string, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesFuturesRequest generates requests for DevSecuritiesFutures
func NewDevSecuritiesFuturesRequest(server string, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s/actualFuturesQuote", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevSecuritiesSearchAllTradesRequest generates requests for DevSecuritiesSearchAllTrades
func NewDevSecuritiesSearchAllTradesRequest(server string, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/%s/alltrades", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Descending != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descending", runtime.ParamLocationQuery, *params.Descending); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeVirtualTrades != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeVirtualTrades", runtime.ParamLocationQuery, *params.IncludeVirtualTrades); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevQuotesRequest generates requests for DevQuotes
func NewDevQuotesRequest(server string, symbols string, params *DevQuotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbols", runtime.ParamLocationPath, symbols)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/Securities/%s/quotes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExchangePortfolioMoneyRequest generates requests for ExchangePortfolioMoney
func NewExchangePortfolioMoneyRequest(server string, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/legacy/%s/%s/money", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllOrdersRequest generates requests for DevGetAllOrders
func NewDevGetAllOrdersRequest(server string, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/orders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOneOrderRequest generates requests for DevGetOneOrder
func NewDevGetOneOrderRequest(server string, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/orders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetAllStopOrdersRequest generates requests for DevGetAllStopOrders
func NewDevGetAllStopOrdersRequest(server string, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/stoporders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevGetOneStopOrderRequest generates requests for DevGetOneStopOrder
func NewDevGetOneStopOrderRequest(server string, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/stoporders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExchangePortfolioSummaryRequest generates requests for ExchangePortfolioSummary
func NewExchangePortfolioSummaryRequest(server string, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portfolio", runtime.ParamLocationPath, portfolio)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/clients/%s/%s/summary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevHistoryRequest generates requests for DevHistory
func NewDevHistoryRequest(server string, params *DevHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tf", runtime.ParamLocationQuery, params.Tf); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Untraded != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "untraded", runtime.ParamLocationQuery, *params.Untraded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevOrderbookExchangSeccodeRequest generates requests for DevOrderbookExchangSeccode
func NewDevOrderbookExchangSeccodeRequest(server string, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exchange", runtime.ParamLocationPath, exchange)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seccode", runtime.ParamLocationPath, seccode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/orderbooks/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Depth != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskRatesRequest generates requests for RiskRates
func NewRiskRatesRequest(server string, params *RiskRatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/risk/rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exchange", runtime.ParamLocationQuery, params.Exchange); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Ticker != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticker", runtime.ParamLocationQuery, *params.Ticker); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RiskCategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskCategoryId", runtime.ParamLocationQuery, *params.RiskCategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalTimeRequest generates requests for LocalTime
func NewLocalTimeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/md/v2/time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2clientordersactionsstopLossRequest calls the generic V2clientordersactionsstopLoss builder with application/json body
func NewV2clientordersactionsstopLossRequest(server string, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossRequestWithBody generates requests for V2clientordersactionsstopLoss with any type of body
func NewV2clientordersactionsstopLossRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLoss", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossOrderIdRequest calls the generic V2clientordersactionsstopLossOrderId builder with application/json body
func NewV2clientordersactionsstopLossOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossOrderIdRequestWithBody generates requests for V2clientordersactionsstopLossOrderId with any type of body
func NewV2clientordersactionsstopLossOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLoss/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossLimitRequest calls the generic V2clientordersactionsstopLossLimit builder with application/json body
func NewV2clientordersactionsstopLossLimitRequest(server string, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossLimitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossLimitRequestWithBody generates requests for V2clientordersactionsstopLossLimit with any type of body
func NewV2clientordersactionsstopLossLimitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLossLimit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsstopLossLimitOrderIdRequest calls the generic V2clientordersactionsstopLossLimitOrderId builder with application/json body
func NewV2clientordersactionsstopLossLimitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody generates requests for V2clientordersactionsstopLossLimitOrderId with any type of body
func NewV2clientordersactionsstopLossLimitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/stopLossLimit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitRequest calls the generic V2clientordersactionstakeProfit builder with application/json body
func NewV2clientordersactionstakeProfitRequest(server string, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitRequestWithBody generates requests for V2clientordersactionstakeProfit with any type of body
func NewV2clientordersactionstakeProfitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitOrderIdRequest calls the generic V2clientordersactionstakeProfitOrderId builder with application/json body
func NewV2clientordersactionstakeProfitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitOrderIdRequestWithBody generates requests for V2clientordersactionstakeProfitOrderId with any type of body
func NewV2clientordersactionstakeProfitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitLimitRequest calls the generic V2clientordersactionstakeProfitLimit builder with application/json body
func NewV2clientordersactionstakeProfitLimitRequest(server string, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitLimitRequestWithBody(server, tradeServerCode, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitLimitRequestWithBody generates requests for V2clientordersactionstakeProfitLimit with any type of body
func NewV2clientordersactionstakeProfitLimitRequestWithBody(server string, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfitLimit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionstakeProfitLimitOrderIdRequest calls the generic V2clientordersactionstakeProfitLimitOrderId builder with application/json body
func NewV2clientordersactionstakeProfitLimitOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(server, tradeServerCode, orderId, params, "application/json", bodyReader)
}

// NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody generates requests for V2clientordersactionstakeProfitLimitOrderId with any type of body
func NewV2clientordersactionstakeProfitLimitOrderIdRequestWithBody(server string, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/actions/takeProfitLimit/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewV2clientordersactionsOrderIdRequest generates requests for V2clientordersactionsOrderId
func NewV2clientordersactionsOrderIdRequest(server string, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tradeServerCode", runtime.ParamLocationPath, tradeServerCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warptrans/%s/v2/client/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "portfolio", runtime.ParamLocationQuery, params.Portfolio); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop", runtime.ParamLocationQuery, params.Stop); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ALOR-REQID", runtime.ParamLocationHeader, params.XALORREQID)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-ALOR-REQID", headerParam0)

	return req, nil
}

// NewWSProdUnsubscribeRequest calls the generic WSProdUnsubscribe builder with application/json body
func NewWSProdUnsubscribeRequest(server string, body WSProdUnsubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdUnsubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdUnsubscribeRequestWithBody generates requests for WSProdUnsubscribe with any type of body
func NewWSProdUnsubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws        ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdStopOrdersSubscribeRequest calls the generic WSProdStopOrdersSubscribe builder with application/json body
func NewWSProdStopOrdersSubscribeRequest(server string, body WSProdStopOrdersSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdStopOrdersSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdStopOrdersSubscribeRequestWithBody generates requests for WSProdStopOrdersSubscribe with any type of body
func NewWSProdStopOrdersSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws         ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdSummariesGetAndSubscribeV2Request calls the generic WSProdSummariesGetAndSubscribeV2 builder with application/json body
func NewWSProdSummariesGetAndSubscribeV2Request(server string, body WSProdSummariesGetAndSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdSummariesGetAndSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdSummariesGetAndSubscribeV2RequestWithBody generates requests for WSProdSummariesGetAndSubscribeV2 with any type of body
func NewWSProdSummariesGetAndSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws          ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdTradesSubscribeRequest calls the generic WSProdTradesSubscribe builder with application/json body
func NewWSProdTradesSubscribeRequest(server string, body WSProdTradesSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdTradesSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdTradesSubscribeRequestWithBody generates requests for WSProdTradesSubscribe with any type of body
func NewWSProdTradesSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws           ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdPositionsSubscribeRequest calls the generic WSProdPositionsSubscribe builder with application/json body
func NewWSProdPositionsSubscribeRequest(server string, body WSProdPositionsSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdPositionsSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdPositionsSubscribeRequestWithBody generates requests for WSProdPositionsSubscribe with any type of body
func NewWSProdPositionsSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws            ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdQuotesSubscribeRequest calls the generic WSProdQuotesSubscribe builder with application/json body
func NewWSProdQuotesSubscribeRequest(server string, body WSProdQuotesSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdQuotesSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdQuotesSubscribeRequestWithBody generates requests for WSProdQuotesSubscribe with any type of body
func NewWSProdQuotesSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws             ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdBarsGetRequest calls the generic WSProdBarsGet builder with application/json body
func NewWSProdBarsGetRequest(server string, body WSProdBarsGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdBarsGetRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdBarsGetRequestWithBody generates requests for WSProdBarsGet with any type of body
func NewWSProdBarsGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws              ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdOrderBookRequest calls the generic WSProdOrderBook builder with application/json body
func NewWSProdOrderBookRequest(server string, body WSProdOrderBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdOrderBookRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdOrderBookRequestWithBody generates requests for WSProdOrderBook with any type of body
func NewWSProdOrderBookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws               ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdRisksGetAndSubscribeRequest calls the generic WSProdRisksGetAndSubscribe builder with application/json body
func NewWSProdRisksGetAndSubscribeRequest(server string, body WSProdRisksGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdRisksGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdRisksGetAndSubscribeRequestWithBody generates requests for WSProdRisksGetAndSubscribe with any type of body
func NewWSProdRisksGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdOrdersSubscribeRequest calls the generic WSProdOrdersSubscribe builder with application/json body
func NewWSProdOrdersSubscribeRequest(server string, body WSProdOrdersSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdOrdersSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdOrdersSubscribeRequestWithBody generates requests for WSProdOrdersSubscribe with any type of body
func NewWSProdOrdersSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                 ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdSpectraRisksGetAndSubscribeRequest calls the generic WSProdSpectraRisksGetAndSubscribe builder with application/json body
func NewWSProdSpectraRisksGetAndSubscribeRequest(server string, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdSpectraRisksGetAndSubscribeRequestWithBody generates requests for WSProdSpectraRisksGetAndSubscribe with any type of body
func NewWSProdSpectraRisksGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                  ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdStopOrdersSubscribeV2Request calls the generic WSProdStopOrdersSubscribeV2 builder with application/json body
func NewWSProdStopOrdersSubscribeV2Request(server string, body WSProdStopOrdersSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdStopOrdersSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdStopOrdersSubscribeV2RequestWithBody generates requests for WSProdStopOrdersSubscribeV2 with any type of body
func NewWSProdStopOrdersSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                   ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdAllTradesGetAndSubscribeRequest calls the generic WSProdAllTradesGetAndSubscribe builder with application/json body
func NewWSProdAllTradesGetAndSubscribeRequest(server string, body WSProdAllTradesGetAndSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdAllTradesGetAndSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdAllTradesGetAndSubscribeRequestWithBody generates requests for WSProdAllTradesGetAndSubscribe with any type of body
func NewWSProdAllTradesGetAndSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                    ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWSProdInstrumentsGetAndSubscribeV2Request calls the generic WSProdInstrumentsGetAndSubscribeV2 builder with application/json body
func NewWSProdInstrumentsGetAndSubscribeV2Request(server string, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody generates requests for WSProdInstrumentsGetAndSubscribeV2 with any type of body
func NewWSProdInstrumentsGetAndSubscribeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws                     ")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DevUserPortfolio request
	DevUserPortfolioWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DevUserPortfolioResponse, error)

	// CommandAPIv2clientordersactionslimit request with any body
	CommandAPIv2clientordersactionslimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error)

	CommandAPIv2clientordersactionslimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error)

	// CommandAPIv2clientordersactionslimitput request with any body
	CommandAPIv2clientordersactionslimitputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error)

	CommandAPIv2clientordersactionslimitputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error)

	// CommandAPIv2clientordersactionsmarket request with any body
	CommandAPIv2clientordersactionsmarketWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error)

	CommandAPIv2clientordersactionsmarketWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error)

	// CommandAPIv2clientordersactionsmarketput request with any body
	CommandAPIv2clientordersactionsmarketputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error)

	CommandAPIv2clientordersactionsmarketputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error)

	// CommandAPIv2clientordersactionsstop request with any body
	CommandAPIv2clientordersactionsstopWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error)

	CommandAPIv2clientordersactionsstopWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error)

	// CommandAPIv2clientordersactionsstopLimit request with any body
	CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error)

	CommandAPIv2clientordersactionsstopLimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error)

	// CommandAPIv2clientordersactionsstopLimitStopOrderId request with any body
	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error)

	CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error)

	// V2clientordersactionsestimate request with any body
	V2clientordersactionsestimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error)

	V2clientordersactionsestimateWithResponse(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error)

	// V2clientordersactionsestimateall request with any body
	V2clientordersactionsestimateallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error)

	V2clientordersactionsestimateallWithResponse(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error)

	// CommandAPIv2clientordersdelete request
	CommandAPIv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersdeleteResponse, error)

	// CommandAPIWarpv2clientordersdelete request
	CommandAPIWarpv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIWarpv2clientordersdeleteResponse, error)

	// TradeStats request
	TradeStatsWithResponse(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*TradeStatsResponse, error)

	// TradeStatsBySymbol request
	TradeStatsBySymbolWithResponse(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*TradeStatsBySymbolResponse, error)

	// Fortsrisk request
	FortsriskWithResponse(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*FortsriskResponse, error)

	// DevGetAllPositions request
	DevGetAllPositionsWithResponse(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*DevGetAllPositionsResponse, error)

	// DevGetOnePosition request
	DevGetOnePositionWithResponse(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*DevGetOnePositionResponse, error)

	// Risk request
	RiskWithResponse(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*RiskResponse, error)

	// DevGetAllTrades request
	DevGetAllTradesWithResponse(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*DevGetAllTradesResponse, error)

	// DevGetTickerTrades request
	DevGetTickerTradesWithResponse(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*DevGetTickerTradesResponse, error)

	// DevSecuritiesSearch request
	DevSecuritiesSearchWithResponse(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchResponse, error)

	// DevSecuritiesSearchExchange request
	DevSecuritiesSearchExchangeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeResponse, error)

	// DevSecuritiesSearchExchangeCode request
	DevSecuritiesSearchExchangeCodeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeCodeResponse, error)

	// DevSecuritiesFutures request
	DevSecuritiesFuturesWithResponse(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesFuturesResponse, error)

	// DevSecuritiesSearchAllTrades request
	DevSecuritiesSearchAllTradesWithResponse(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchAllTradesResponse, error)

	// DevQuotes request
	DevQuotesWithResponse(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*DevQuotesResponse, error)

	// ExchangePortfolioMoney request
	ExchangePortfolioMoneyWithResponse(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioMoneyResponse, error)

	// DevGetAllOrders request
	DevGetAllOrdersWithResponse(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllOrdersResponse, error)

	// DevGetOneOrder request
	DevGetOneOrderWithResponse(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneOrderResponse, error)

	// DevGetAllStopOrders request
	DevGetAllStopOrdersWithResponse(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllStopOrdersResponse, error)

	// DevGetOneStopOrder request
	DevGetOneStopOrderWithResponse(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneStopOrderResponse, error)

	// ExchangePortfolioSummary request
	ExchangePortfolioSummaryWithResponse(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioSummaryResponse, error)

	// DevHistory request
	DevHistoryWithResponse(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*DevHistoryResponse, error)

	// DevOrderbookExchangSeccode request
	DevOrderbookExchangSeccodeWithResponse(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*DevOrderbookExchangSeccodeResponse, error)

	// RiskRates request
	RiskRatesWithResponse(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*RiskRatesResponse, error)

	// LocalTime request
	LocalTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalTimeResponse, error)

	// V2clientordersactionsstopLoss request with any body
	V2clientordersactionsstopLossWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error)

	V2clientordersactionsstopLossWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error)

	// V2clientordersactionsstopLossOrderId request with any body
	V2clientordersactionsstopLossOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error)

	V2clientordersactionsstopLossOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error)

	// V2clientordersactionsstopLossLimit request with any body
	V2clientordersactionsstopLossLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error)

	V2clientordersactionsstopLossLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error)

	// V2clientordersactionsstopLossLimitOrderId request with any body
	V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error)

	V2clientordersactionsstopLossLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error)

	// V2clientordersactionstakeProfit request with any body
	V2clientordersactionstakeProfitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error)

	V2clientordersactionstakeProfitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error)

	// V2clientordersactionstakeProfitOrderId request with any body
	V2clientordersactionstakeProfitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error)

	V2clientordersactionstakeProfitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error)

	// V2clientordersactionstakeProfitLimit request with any body
	V2clientordersactionstakeProfitLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error)

	V2clientordersactionstakeProfitLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error)

	// V2clientordersactionstakeProfitLimitOrderId request with any body
	V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error)

	V2clientordersactionstakeProfitLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error)

	// V2clientordersactionsOrderId request
	V2clientordersactionsOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*V2clientordersactionsOrderIdResponse, error)

	// WSProdUnsubscribe request with any body
	WSProdUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error)

	WSProdUnsubscribeWithResponse(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error)

	// WSProdStopOrdersSubscribe request with any body
	WSProdStopOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error)

	WSProdStopOrdersSubscribeWithResponse(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error)

	// WSProdSummariesGetAndSubscribeV2 request with any body
	WSProdSummariesGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error)

	WSProdSummariesGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error)

	// WSProdTradesSubscribe request with any body
	WSProdTradesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error)

	WSProdTradesSubscribeWithResponse(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error)

	// WSProdPositionsSubscribe request with any body
	WSProdPositionsSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error)

	WSProdPositionsSubscribeWithResponse(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error)

	// WSProdQuotesSubscribe request with any body
	WSProdQuotesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error)

	WSProdQuotesSubscribeWithResponse(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error)

	// WSProdBarsGet request with any body
	WSProdBarsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error)

	WSProdBarsGetWithResponse(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error)

	// WSProdOrderBook request with any body
	WSProdOrderBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error)

	WSProdOrderBookWithResponse(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error)

	// WSProdRisksGetAndSubscribe request with any body
	WSProdRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error)

	WSProdRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error)

	// WSProdOrdersSubscribe request with any body
	WSProdOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error)

	WSProdOrdersSubscribeWithResponse(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error)

	// WSProdSpectraRisksGetAndSubscribe request with any body
	WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error)

	WSProdSpectraRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error)

	// WSProdStopOrdersSubscribeV2 request with any body
	WSProdStopOrdersSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error)

	WSProdStopOrdersSubscribeV2WithResponse(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error)

	// WSProdAllTradesGetAndSubscribe request with any body
	WSProdAllTradesGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error)

	WSProdAllTradesGetAndSubscribeWithResponse(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error)

	// WSProdInstrumentsGetAndSubscribeV2 request with any body
	WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error)

	WSProdInstrumentsGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error)
}

type DevUserPortfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServersInfo
}

// Status returns HTTPResponse.Status
func (r DevUserPortfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevUserPortfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionslimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionslimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionslimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionslimitputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarket
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionslimitputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionslimitputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsmarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsmarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsmarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsmarketputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarket
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsmarketputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsmarketputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsLimitMarketCommandAPI
	JSON400      *OrdersActions400CommandAPI
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsestimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EstimateOrderModel
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsestimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsestimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsestimateallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EstimateOrderModel
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsestimateallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsestimateallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIv2clientordersdeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderIdCommandAPI
	JSON400      *struct {
		// Code Тип ошибки
		Code *string `json:"code,omitempty"`

		// Message Описание ошибки
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommandAPIv2clientordersdeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIv2clientordersdeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandAPIWarpv2clientordersdeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderIdCommandAPI
	JSON400      *struct {
		// Code Тип ошибки
		Code *string `json:"code,omitempty"`

		// Message Описание ошибки
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommandAPIWarpv2clientordersdeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandAPIWarpv2clientordersdeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TradeStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r TradeStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TradeStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TradeStatsBySymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r TradeStatsBySymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TradeStatsBySymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FortsriskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Fortsrisk
}

// Status returns HTTPResponse.Status
func (r FortsriskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FortsriskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Positions
}

// Status returns HTTPResponse.Status
func (r DevGetAllPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOnePositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Position
}

// Status returns HTTPResponse.Status
func (r DevGetOnePositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOnePositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Risk
}

// Status returns HTTPResponse.Status
func (r RiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r DevGetAllTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetTickerTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trades
}

// Status returns HTTPResponse.Status
func (r DevGetTickerTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetTickerTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Securities
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Securities
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchExchangeCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Security
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchExchangeCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchExchangeCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesFuturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SymbolFutures
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesFuturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesFuturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevSecuritiesSearchAllTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alltrades
}

// Status returns HTTPResponse.Status
func (r DevSecuritiesSearchAllTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevSecuritiesSearchAllTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevQuotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Symbols
}

// Status returns HTTPResponse.Status
func (r DevQuotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevQuotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExchangePortfolioMoneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Money
}

// Status returns HTTPResponse.Status
func (r ExchangePortfolioMoneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExchangePortfolioMoneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Orders
}

// Status returns HTTPResponse.Status
func (r DevGetAllOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOneOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r DevGetOneOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOneOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetAllStopOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopordersWarp
}

// Status returns HTTPResponse.Status
func (r DevGetAllStopOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetAllStopOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevGetOneStopOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoporderWarp
}

// Status returns HTTPResponse.Status
func (r DevGetOneStopOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevGetOneStopOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExchangePortfolioSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Summary
}

// Status returns HTTPResponse.Status
func (r ExchangePortfolioSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExchangePortfolioSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *History
}

// Status returns HTTPResponse.Status
func (r DevHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevOrderbookExchangSeccodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Orderbook
}

// Status returns HTTPResponse.Status
func (r DevOrderbookExchangSeccodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevOrderbookExchangSeccodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RiskRates
}

// Status returns HTTPResponse.Status
func (r RiskRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Time
}

// Status returns HTTPResponse.Status
func (r LocalTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsstopLossLimitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsstopLossLimitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsstopLossLimitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
	JSON400      *OrdersActions400
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionstakeProfitLimitOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsStopProfitLoss
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionstakeProfitLimitOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionstakeProfitLimitOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2clientordersactionsOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrdersActionsDeleteOrderId
}

// Status returns HTTPResponse.Status
func (r V2clientordersactionsOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2clientordersactionsOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdUnsubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdStopOrdersSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResStopOrdersGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdStopOrdersSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdStopOrdersSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdSummariesGetAndSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResSummariesGetAndSubscribeV2
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdSummariesGetAndSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdSummariesGetAndSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdTradesSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResTradesGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdTradesSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdTradesSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdPositionsSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResPositionsGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdPositionsSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdPositionsSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdQuotesSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResQuotesSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdQuotesSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdQuotesSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdBarsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResBarsGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdBarsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdBarsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdOrderBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResOrderBookGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdOrderBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdOrderBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdRisksGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResRisksGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdRisksGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdRisksGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdOrdersSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResOrdersGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdOrdersSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdOrdersSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdSpectraRisksGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResSpectraRisksGetAndSubscribe
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdSpectraRisksGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdSpectraRisksGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdStopOrdersSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *WsResStopOrdersGetAndSubscribeWarp
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdStopOrdersSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdStopOrdersSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdAllTradesGetAndSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON100      *Alltrades
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdAllTradesGetAndSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdAllTradesGetAndSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WSProdInstrumentsGetAndSubscribeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WsResHandledSuccessfully
}

// Status returns HTTPResponse.Status
func (r WSProdInstrumentsGetAndSubscribeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WSProdInstrumentsGetAndSubscribeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DevUserPortfolioWithResponse request returning *DevUserPortfolioResponse
func (c *ClientWithResponses) DevUserPortfolioWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DevUserPortfolioResponse, error) {
	rsp, err := c.DevUserPortfolio(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevUserPortfolioResponse(rsp)
}

// CommandAPIv2clientordersactionslimitWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionslimitResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionslimitParams, body CommandAPIv2clientordersactionslimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitResponse(rsp)
}

// CommandAPIv2clientordersactionslimitputWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionslimitputResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitputWithBody(ctx, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitputResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionslimitputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionslimitputParams, body CommandAPIv2clientordersactionslimitputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionslimitput(ctx, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionslimitputResponse(rsp)
}

// CommandAPIv2clientordersactionsmarketWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsmarketResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsmarketParams, body CommandAPIv2clientordersactionsmarketJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarket(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketResponse(rsp)
}

// CommandAPIv2clientordersactionsmarketputWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsmarketputResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketputWithBodyWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketputWithBody(ctx, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketputResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsmarketputWithResponse(ctx context.Context, orderId string, params *CommandAPIv2clientordersactionsmarketputParams, body CommandAPIv2clientordersactionsmarketputJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsmarketput(ctx, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsmarketputResponse(rsp)
}

// CommandAPIv2clientordersactionsstopWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopParams, body CommandAPIv2clientordersactionsstopJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstop(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopResponse(rsp)
}

// CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopLimitResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitWithBodyWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitWithResponse(ctx context.Context, params *CommandAPIv2clientordersactionsstopLimitParams, body CommandAPIv2clientordersactionsstopLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp)
}

// CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse request with arbitrary body returning *CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse
func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBodyWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitStopOrderIdWithBody(ctx, stopOrderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp)
}

func (c *ClientWithResponses) CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse(ctx context.Context, stopOrderId int, params *CommandAPIv2clientordersactionsstopLimitStopOrderIdParams, body CommandAPIv2clientordersactionsstopLimitStopOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	rsp, err := c.CommandAPIv2clientordersactionsstopLimitStopOrderId(ctx, stopOrderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp)
}

// V2clientordersactionsestimateWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsestimateResponse
func (c *ClientWithResponses) V2clientordersactionsestimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error) {
	rsp, err := c.V2clientordersactionsestimateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsestimateWithResponse(ctx context.Context, body V2clientordersactionsestimateJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateResponse, error) {
	rsp, err := c.V2clientordersactionsestimate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateResponse(rsp)
}

// V2clientordersactionsestimateallWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsestimateallResponse
func (c *ClientWithResponses) V2clientordersactionsestimateallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error) {
	rsp, err := c.V2clientordersactionsestimateallWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateallResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsestimateallWithResponse(ctx context.Context, body V2clientordersactionsestimateallJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsestimateallResponse, error) {
	rsp, err := c.V2clientordersactionsestimateall(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsestimateallResponse(rsp)
}

// CommandAPIv2clientordersdeleteWithResponse request returning *CommandAPIv2clientordersdeleteResponse
func (c *ClientWithResponses) CommandAPIv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIv2clientordersdeleteResponse, error) {
	rsp, err := c.CommandAPIv2clientordersdelete(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIv2clientordersdeleteResponse(rsp)
}

// CommandAPIWarpv2clientordersdeleteWithResponse request returning *CommandAPIWarpv2clientordersdeleteResponse
func (c *ClientWithResponses) CommandAPIWarpv2clientordersdeleteWithResponse(ctx context.Context, orderId int, params *CommandAPIWarpv2clientordersdeleteParams, reqEditors ...RequestEditorFn) (*CommandAPIWarpv2clientordersdeleteResponse, error) {
	rsp, err := c.CommandAPIWarpv2clientordersdelete(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandAPIWarpv2clientordersdeleteResponse(rsp)
}

// TradeStatsWithResponse request returning *TradeStatsResponse
func (c *ClientWithResponses) TradeStatsWithResponse(ctx context.Context, exchange TradeStatsParamsExchange, portfolio string, params *TradeStatsParams, reqEditors ...RequestEditorFn) (*TradeStatsResponse, error) {
	rsp, err := c.TradeStats(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTradeStatsResponse(rsp)
}

// TradeStatsBySymbolWithResponse request returning *TradeStatsBySymbolResponse
func (c *ClientWithResponses) TradeStatsBySymbolWithResponse(ctx context.Context, exchange TradeStatsBySymbolParamsExchange, portfolio string, symbol string, params *TradeStatsBySymbolParams, reqEditors ...RequestEditorFn) (*TradeStatsBySymbolResponse, error) {
	rsp, err := c.TradeStatsBySymbol(ctx, exchange, portfolio, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTradeStatsBySymbolResponse(rsp)
}

// FortsriskWithResponse request returning *FortsriskResponse
func (c *ClientWithResponses) FortsriskWithResponse(ctx context.Context, exchange FortsriskParamsExchange, portfolio string, params *FortsriskParams, reqEditors ...RequestEditorFn) (*FortsriskResponse, error) {
	rsp, err := c.Fortsrisk(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFortsriskResponse(rsp)
}

// DevGetAllPositionsWithResponse request returning *DevGetAllPositionsResponse
func (c *ClientWithResponses) DevGetAllPositionsWithResponse(ctx context.Context, exchange DevGetAllPositionsParamsExchange, portfolio string, params *DevGetAllPositionsParams, reqEditors ...RequestEditorFn) (*DevGetAllPositionsResponse, error) {
	rsp, err := c.DevGetAllPositions(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllPositionsResponse(rsp)
}

// DevGetOnePositionWithResponse request returning *DevGetOnePositionResponse
func (c *ClientWithResponses) DevGetOnePositionWithResponse(ctx context.Context, exchange DevGetOnePositionParamsExchange, portfolio string, symbol string, params *DevGetOnePositionParams, reqEditors ...RequestEditorFn) (*DevGetOnePositionResponse, error) {
	rsp, err := c.DevGetOnePosition(ctx, exchange, portfolio, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOnePositionResponse(rsp)
}

// RiskWithResponse request returning *RiskResponse
func (c *ClientWithResponses) RiskWithResponse(ctx context.Context, exchange RiskParamsExchange, portfolio string, params *RiskParams, reqEditors ...RequestEditorFn) (*RiskResponse, error) {
	rsp, err := c.Risk(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskResponse(rsp)
}

// DevGetAllTradesWithResponse request returning *DevGetAllTradesResponse
func (c *ClientWithResponses) DevGetAllTradesWithResponse(ctx context.Context, exchange DevGetAllTradesParamsExchange, portfolio string, params *DevGetAllTradesParams, reqEditors ...RequestEditorFn) (*DevGetAllTradesResponse, error) {
	rsp, err := c.DevGetAllTrades(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllTradesResponse(rsp)
}

// DevGetTickerTradesWithResponse request returning *DevGetTickerTradesResponse
func (c *ClientWithResponses) DevGetTickerTradesWithResponse(ctx context.Context, exchange DevGetTickerTradesParamsExchange, portfolio string, ticker string, params *DevGetTickerTradesParams, reqEditors ...RequestEditorFn) (*DevGetTickerTradesResponse, error) {
	rsp, err := c.DevGetTickerTrades(ctx, exchange, portfolio, ticker, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetTickerTradesResponse(rsp)
}

// DevSecuritiesSearchWithResponse request returning *DevSecuritiesSearchResponse
func (c *ClientWithResponses) DevSecuritiesSearchWithResponse(ctx context.Context, params *DevSecuritiesSearchParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchResponse, error) {
	rsp, err := c.DevSecuritiesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchResponse(rsp)
}

// DevSecuritiesSearchExchangeWithResponse request returning *DevSecuritiesSearchExchangeResponse
func (c *ClientWithResponses) DevSecuritiesSearchExchangeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeParamsExchange, params *DevSecuritiesSearchExchangeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeResponse, error) {
	rsp, err := c.DevSecuritiesSearchExchange(ctx, exchange, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchExchangeResponse(rsp)
}

// DevSecuritiesSearchExchangeCodeWithResponse request returning *DevSecuritiesSearchExchangeCodeResponse
func (c *ClientWithResponses) DevSecuritiesSearchExchangeCodeWithResponse(ctx context.Context, exchange DevSecuritiesSearchExchangeCodeParamsExchange, symbol string, params *DevSecuritiesSearchExchangeCodeParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchExchangeCodeResponse, error) {
	rsp, err := c.DevSecuritiesSearchExchangeCode(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchExchangeCodeResponse(rsp)
}

// DevSecuritiesFuturesWithResponse request returning *DevSecuritiesFuturesResponse
func (c *ClientWithResponses) DevSecuritiesFuturesWithResponse(ctx context.Context, exchange DevSecuritiesFuturesParamsExchange, symbol string, params *DevSecuritiesFuturesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesFuturesResponse, error) {
	rsp, err := c.DevSecuritiesFutures(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesFuturesResponse(rsp)
}

// DevSecuritiesSearchAllTradesWithResponse request returning *DevSecuritiesSearchAllTradesResponse
func (c *ClientWithResponses) DevSecuritiesSearchAllTradesWithResponse(ctx context.Context, exchange DevSecuritiesSearchAllTradesParamsExchange, symbol string, params *DevSecuritiesSearchAllTradesParams, reqEditors ...RequestEditorFn) (*DevSecuritiesSearchAllTradesResponse, error) {
	rsp, err := c.DevSecuritiesSearchAllTrades(ctx, exchange, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevSecuritiesSearchAllTradesResponse(rsp)
}

// DevQuotesWithResponse request returning *DevQuotesResponse
func (c *ClientWithResponses) DevQuotesWithResponse(ctx context.Context, symbols string, params *DevQuotesParams, reqEditors ...RequestEditorFn) (*DevQuotesResponse, error) {
	rsp, err := c.DevQuotes(ctx, symbols, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevQuotesResponse(rsp)
}

// ExchangePortfolioMoneyWithResponse request returning *ExchangePortfolioMoneyResponse
func (c *ClientWithResponses) ExchangePortfolioMoneyWithResponse(ctx context.Context, exchange ExchangePortfolioMoneyParamsExchange, portfolio string, params *ExchangePortfolioMoneyParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioMoneyResponse, error) {
	rsp, err := c.ExchangePortfolioMoney(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExchangePortfolioMoneyResponse(rsp)
}

// DevGetAllOrdersWithResponse request returning *DevGetAllOrdersResponse
func (c *ClientWithResponses) DevGetAllOrdersWithResponse(ctx context.Context, exchange DevGetAllOrdersParamsExchange, portfolio string, params *DevGetAllOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllOrdersResponse, error) {
	rsp, err := c.DevGetAllOrders(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllOrdersResponse(rsp)
}

// DevGetOneOrderWithResponse request returning *DevGetOneOrderResponse
func (c *ClientWithResponses) DevGetOneOrderWithResponse(ctx context.Context, exchange DevGetOneOrderParamsExchange, portfolio string, orderId int, params *DevGetOneOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneOrderResponse, error) {
	rsp, err := c.DevGetOneOrder(ctx, exchange, portfolio, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOneOrderResponse(rsp)
}

// DevGetAllStopOrdersWithResponse request returning *DevGetAllStopOrdersResponse
func (c *ClientWithResponses) DevGetAllStopOrdersWithResponse(ctx context.Context, exchange DevGetAllStopOrdersParamsExchange, portfolio string, params *DevGetAllStopOrdersParams, reqEditors ...RequestEditorFn) (*DevGetAllStopOrdersResponse, error) {
	rsp, err := c.DevGetAllStopOrders(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetAllStopOrdersResponse(rsp)
}

// DevGetOneStopOrderWithResponse request returning *DevGetOneStopOrderResponse
func (c *ClientWithResponses) DevGetOneStopOrderWithResponse(ctx context.Context, exchange DevGetOneStopOrderParamsExchange, portfolio string, orderId int, params *DevGetOneStopOrderParams, reqEditors ...RequestEditorFn) (*DevGetOneStopOrderResponse, error) {
	rsp, err := c.DevGetOneStopOrder(ctx, exchange, portfolio, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevGetOneStopOrderResponse(rsp)
}

// ExchangePortfolioSummaryWithResponse request returning *ExchangePortfolioSummaryResponse
func (c *ClientWithResponses) ExchangePortfolioSummaryWithResponse(ctx context.Context, exchange ExchangePortfolioSummaryParamsExchange, portfolio string, params *ExchangePortfolioSummaryParams, reqEditors ...RequestEditorFn) (*ExchangePortfolioSummaryResponse, error) {
	rsp, err := c.ExchangePortfolioSummary(ctx, exchange, portfolio, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExchangePortfolioSummaryResponse(rsp)
}

// DevHistoryWithResponse request returning *DevHistoryResponse
func (c *ClientWithResponses) DevHistoryWithResponse(ctx context.Context, params *DevHistoryParams, reqEditors ...RequestEditorFn) (*DevHistoryResponse, error) {
	rsp, err := c.DevHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevHistoryResponse(rsp)
}

// DevOrderbookExchangSeccodeWithResponse request returning *DevOrderbookExchangSeccodeResponse
func (c *ClientWithResponses) DevOrderbookExchangSeccodeWithResponse(ctx context.Context, exchange DevOrderbookExchangSeccodeParamsExchange, seccode string, params *DevOrderbookExchangSeccodeParams, reqEditors ...RequestEditorFn) (*DevOrderbookExchangSeccodeResponse, error) {
	rsp, err := c.DevOrderbookExchangSeccode(ctx, exchange, seccode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevOrderbookExchangSeccodeResponse(rsp)
}

// RiskRatesWithResponse request returning *RiskRatesResponse
func (c *ClientWithResponses) RiskRatesWithResponse(ctx context.Context, params *RiskRatesParams, reqEditors ...RequestEditorFn) (*RiskRatesResponse, error) {
	rsp, err := c.RiskRates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskRatesResponse(rsp)
}

// LocalTimeWithResponse request returning *LocalTimeResponse
func (c *ClientWithResponses) LocalTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalTimeResponse, error) {
	rsp, err := c.LocalTime(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalTimeResponse(rsp)
}

// V2clientordersactionsstopLossWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossParams, body V2clientordersactionsstopLossJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossResponse, error) {
	rsp, err := c.V2clientordersactionsstopLoss(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossResponse(rsp)
}

// V2clientordersactionsstopLossOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossOrderIdParams, body V2clientordersactionsstopLossOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossOrderIdResponse(rsp)
}

// V2clientordersactionsstopLossLimitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossLimitResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionsstopLossLimitParams, body V2clientordersactionsstopLossLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitResponse(rsp)
}

// V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionsstopLossLimitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsstopLossLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionsstopLossLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsstopLossLimitOrderIdParams, body V2clientordersactionsstopLossLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsstopLossLimitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp)
}

// V2clientordersactionstakeProfitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitParams, body V2clientordersactionstakeProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitResponse(rsp)
}

// V2clientordersactionstakeProfitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitOrderIdParams, body V2clientordersactionstakeProfitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitOrderIdResponse(rsp)
}

// V2clientordersactionstakeProfitLimitWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitLimitResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitWithBodyWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitWithBody(ctx, tradeServerCode, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitWithResponse(ctx context.Context, tradeServerCode string, params *V2clientordersactionstakeProfitLimitParams, body V2clientordersactionstakeProfitLimitJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimit(ctx, tradeServerCode, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitResponse(rsp)
}

// V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse request with arbitrary body returning *V2clientordersactionstakeProfitLimitOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitOrderIdWithBodyWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitOrderIdWithBody(ctx, tradeServerCode, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp)
}

func (c *ClientWithResponses) V2clientordersactionstakeProfitLimitOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionstakeProfitLimitOrderIdParams, body V2clientordersactionstakeProfitLimitOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionstakeProfitLimitOrderId(ctx, tradeServerCode, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp)
}

// V2clientordersactionsOrderIdWithResponse request returning *V2clientordersactionsOrderIdResponse
func (c *ClientWithResponses) V2clientordersactionsOrderIdWithResponse(ctx context.Context, tradeServerCode string, orderId int, params *V2clientordersactionsOrderIdParams, reqEditors ...RequestEditorFn) (*V2clientordersactionsOrderIdResponse, error) {
	rsp, err := c.V2clientordersactionsOrderId(ctx, tradeServerCode, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2clientordersactionsOrderIdResponse(rsp)
}

// WSProdUnsubscribeWithBodyWithResponse request with arbitrary body returning *WSProdUnsubscribeResponse
func (c *ClientWithResponses) WSProdUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error) {
	rsp, err := c.WSProdUnsubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdUnsubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdUnsubscribeWithResponse(ctx context.Context, body WSProdUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdUnsubscribeResponse, error) {
	rsp, err := c.WSProdUnsubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdUnsubscribeResponse(rsp)
}

// WSProdStopOrdersSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdStopOrdersSubscribeResponse
func (c *ClientWithResponses) WSProdStopOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdStopOrdersSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdStopOrdersSubscribeWithResponse(ctx context.Context, body WSProdStopOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdStopOrdersSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeResponse(rsp)
}

// WSProdSummariesGetAndSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdSummariesGetAndSubscribeV2Response
func (c *ClientWithResponses) WSProdSummariesGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdSummariesGetAndSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSummariesGetAndSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdSummariesGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdSummariesGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdSummariesGetAndSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSummariesGetAndSubscribeV2Response(rsp)
}

// WSProdTradesSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdTradesSubscribeResponse
func (c *ClientWithResponses) WSProdTradesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error) {
	rsp, err := c.WSProdTradesSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdTradesSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdTradesSubscribeWithResponse(ctx context.Context, body WSProdTradesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdTradesSubscribeResponse, error) {
	rsp, err := c.WSProdTradesSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdTradesSubscribeResponse(rsp)
}

// WSProdPositionsSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdPositionsSubscribeResponse
func (c *ClientWithResponses) WSProdPositionsSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error) {
	rsp, err := c.WSProdPositionsSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdPositionsSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdPositionsSubscribeWithResponse(ctx context.Context, body WSProdPositionsSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdPositionsSubscribeResponse, error) {
	rsp, err := c.WSProdPositionsSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdPositionsSubscribeResponse(rsp)
}

// WSProdQuotesSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdQuotesSubscribeResponse
func (c *ClientWithResponses) WSProdQuotesSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error) {
	rsp, err := c.WSProdQuotesSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdQuotesSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdQuotesSubscribeWithResponse(ctx context.Context, body WSProdQuotesSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdQuotesSubscribeResponse, error) {
	rsp, err := c.WSProdQuotesSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdQuotesSubscribeResponse(rsp)
}

// WSProdBarsGetWithBodyWithResponse request with arbitrary body returning *WSProdBarsGetResponse
func (c *ClientWithResponses) WSProdBarsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error) {
	rsp, err := c.WSProdBarsGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdBarsGetResponse(rsp)
}

func (c *ClientWithResponses) WSProdBarsGetWithResponse(ctx context.Context, body WSProdBarsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdBarsGetResponse, error) {
	rsp, err := c.WSProdBarsGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdBarsGetResponse(rsp)
}

// WSProdOrderBookWithBodyWithResponse request with arbitrary body returning *WSProdOrderBookResponse
func (c *ClientWithResponses) WSProdOrderBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error) {
	rsp, err := c.WSProdOrderBookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrderBookResponse(rsp)
}

func (c *ClientWithResponses) WSProdOrderBookWithResponse(ctx context.Context, body WSProdOrderBookJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrderBookResponse, error) {
	rsp, err := c.WSProdOrderBook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrderBookResponse(rsp)
}

// WSProdRisksGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdRisksGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdRisksGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdRisksGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdRisksGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdRisksGetAndSubscribeResponse(rsp)
}

// WSProdOrdersSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdOrdersSubscribeResponse
func (c *ClientWithResponses) WSProdOrdersSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdOrdersSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrdersSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdOrdersSubscribeWithResponse(ctx context.Context, body WSProdOrdersSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdOrdersSubscribeResponse, error) {
	rsp, err := c.WSProdOrdersSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdOrdersSubscribeResponse(rsp)
}

// WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdSpectraRisksGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdSpectraRisksGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdSpectraRisksGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdSpectraRisksGetAndSubscribeWithResponse(ctx context.Context, body WSProdSpectraRisksGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdSpectraRisksGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp)
}

// WSProdStopOrdersSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdStopOrdersSubscribeV2Response
func (c *ClientWithResponses) WSProdStopOrdersSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error) {
	rsp, err := c.WSProdStopOrdersSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdStopOrdersSubscribeV2WithResponse(ctx context.Context, body WSProdStopOrdersSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdStopOrdersSubscribeV2Response, error) {
	rsp, err := c.WSProdStopOrdersSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdStopOrdersSubscribeV2Response(rsp)
}

// WSProdAllTradesGetAndSubscribeWithBodyWithResponse request with arbitrary body returning *WSProdAllTradesGetAndSubscribeResponse
func (c *ClientWithResponses) WSProdAllTradesGetAndSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdAllTradesGetAndSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdAllTradesGetAndSubscribeResponse(rsp)
}

func (c *ClientWithResponses) WSProdAllTradesGetAndSubscribeWithResponse(ctx context.Context, body WSProdAllTradesGetAndSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	rsp, err := c.WSProdAllTradesGetAndSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdAllTradesGetAndSubscribeResponse(rsp)
}

// WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse request with arbitrary body returning *WSProdInstrumentsGetAndSubscribeV2Response
func (c *ClientWithResponses) WSProdInstrumentsGetAndSubscribeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdInstrumentsGetAndSubscribeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp)
}

func (c *ClientWithResponses) WSProdInstrumentsGetAndSubscribeV2WithResponse(ctx context.Context, body WSProdInstrumentsGetAndSubscribeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	rsp, err := c.WSProdInstrumentsGetAndSubscribeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp)
}

// ParseDevUserPortfolioResponse parses an HTTP response from a DevUserPortfolioWithResponse call
func ParseDevUserPortfolioResponse(rsp *http.Response) (*DevUserPortfolioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevUserPortfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServersInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionslimitResponse parses an HTTP response from a CommandAPIv2clientordersactionslimitWithResponse call
func ParseCommandAPIv2clientordersactionslimitResponse(rsp *http.Response) (*CommandAPIv2clientordersactionslimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionslimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionslimitputResponse parses an HTTP response from a CommandAPIv2clientordersactionslimitputWithResponse call
func ParseCommandAPIv2clientordersactionslimitputResponse(rsp *http.Response) (*CommandAPIv2clientordersactionslimitputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionslimitputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsmarketResponse parses an HTTP response from a CommandAPIv2clientordersactionsmarketWithResponse call
func ParseCommandAPIv2clientordersactionsmarketResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsmarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsmarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsmarketputResponse parses an HTTP response from a CommandAPIv2clientordersactionsmarketputWithResponse call
func ParseCommandAPIv2clientordersactionsmarketputResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsmarketputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsmarketputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopWithResponse call
func ParseCommandAPIv2clientordersactionsstopResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopLimitResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopLimitWithResponse call
func ParseCommandAPIv2clientordersactionsstopLimitResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse parses an HTTP response from a CommandAPIv2clientordersactionsstopLimitStopOrderIdWithResponse call
func ParseCommandAPIv2clientordersactionsstopLimitStopOrderIdResponse(rsp *http.Response) (*CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersactionsstopLimitStopOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsLimitMarketCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400CommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsestimateResponse parses an HTTP response from a V2clientordersactionsestimateWithResponse call
func ParseV2clientordersactionsestimateResponse(rsp *http.Response) (*V2clientordersactionsestimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsestimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EstimateOrderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseV2clientordersactionsestimateallResponse parses an HTTP response from a V2clientordersactionsestimateallWithResponse call
func ParseV2clientordersactionsestimateallResponse(rsp *http.Response) (*V2clientordersactionsestimateallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsestimateallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EstimateOrderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseCommandAPIv2clientordersdeleteResponse parses an HTTP response from a CommandAPIv2clientordersdeleteWithResponse call
func ParseCommandAPIv2clientordersdeleteResponse(rsp *http.Response) (*CommandAPIv2clientordersdeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIv2clientordersdeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderIdCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Тип ошибки
			Code *string `json:"code,omitempty"`

			// Message Описание ошибки
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCommandAPIWarpv2clientordersdeleteResponse parses an HTTP response from a CommandAPIWarpv2clientordersdeleteWithResponse call
func ParseCommandAPIWarpv2clientordersdeleteResponse(rsp *http.Response) (*CommandAPIWarpv2clientordersdeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandAPIWarpv2clientordersdeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderIdCommandAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Тип ошибки
			Code *string `json:"code,omitempty"`

			// Message Описание ошибки
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTradeStatsResponse parses an HTTP response from a TradeStatsWithResponse call
func ParseTradeStatsResponse(rsp *http.Response) (*TradeStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TradeStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTradeStatsBySymbolResponse parses an HTTP response from a TradeStatsBySymbolWithResponse call
func ParseTradeStatsBySymbolResponse(rsp *http.Response) (*TradeStatsBySymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TradeStatsBySymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFortsriskResponse parses an HTTP response from a FortsriskWithResponse call
func ParseFortsriskResponse(rsp *http.Response) (*FortsriskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FortsriskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Fortsrisk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllPositionsResponse parses an HTTP response from a DevGetAllPositionsWithResponse call
func ParseDevGetAllPositionsResponse(rsp *http.Response) (*DevGetAllPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Positions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOnePositionResponse parses an HTTP response from a DevGetOnePositionWithResponse call
func ParseDevGetOnePositionResponse(rsp *http.Response) (*DevGetOnePositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOnePositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskResponse parses an HTTP response from a RiskWithResponse call
func ParseRiskResponse(rsp *http.Response) (*RiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Risk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllTradesResponse parses an HTTP response from a DevGetAllTradesWithResponse call
func ParseDevGetAllTradesResponse(rsp *http.Response) (*DevGetAllTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetTickerTradesResponse parses an HTTP response from a DevGetTickerTradesWithResponse call
func ParseDevGetTickerTradesResponse(rsp *http.Response) (*DevGetTickerTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetTickerTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchResponse parses an HTTP response from a DevSecuritiesSearchWithResponse call
func ParseDevSecuritiesSearchResponse(rsp *http.Response) (*DevSecuritiesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Securities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchExchangeResponse parses an HTTP response from a DevSecuritiesSearchExchangeWithResponse call
func ParseDevSecuritiesSearchExchangeResponse(rsp *http.Response) (*DevSecuritiesSearchExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Securities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchExchangeCodeResponse parses an HTTP response from a DevSecuritiesSearchExchangeCodeWithResponse call
func ParseDevSecuritiesSearchExchangeCodeResponse(rsp *http.Response) (*DevSecuritiesSearchExchangeCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchExchangeCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Security
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesFuturesResponse parses an HTTP response from a DevSecuritiesFuturesWithResponse call
func ParseDevSecuritiesFuturesResponse(rsp *http.Response) (*DevSecuritiesFuturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesFuturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SymbolFutures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevSecuritiesSearchAllTradesResponse parses an HTTP response from a DevSecuritiesSearchAllTradesWithResponse call
func ParseDevSecuritiesSearchAllTradesResponse(rsp *http.Response) (*DevSecuritiesSearchAllTradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevSecuritiesSearchAllTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alltrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevQuotesResponse parses an HTTP response from a DevQuotesWithResponse call
func ParseDevQuotesResponse(rsp *http.Response) (*DevQuotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevQuotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Symbols
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExchangePortfolioMoneyResponse parses an HTTP response from a ExchangePortfolioMoneyWithResponse call
func ParseExchangePortfolioMoneyResponse(rsp *http.Response) (*ExchangePortfolioMoneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExchangePortfolioMoneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Money
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllOrdersResponse parses an HTTP response from a DevGetAllOrdersWithResponse call
func ParseDevGetAllOrdersResponse(rsp *http.Response) (*DevGetAllOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Orders
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOneOrderResponse parses an HTTP response from a DevGetOneOrderWithResponse call
func ParseDevGetOneOrderResponse(rsp *http.Response) (*DevGetOneOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOneOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetAllStopOrdersResponse parses an HTTP response from a DevGetAllStopOrdersWithResponse call
func ParseDevGetAllStopOrdersResponse(rsp *http.Response) (*DevGetAllStopOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetAllStopOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopordersWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevGetOneStopOrderResponse parses an HTTP response from a DevGetOneStopOrderWithResponse call
func ParseDevGetOneStopOrderResponse(rsp *http.Response) (*DevGetOneStopOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevGetOneStopOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoporderWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExchangePortfolioSummaryResponse parses an HTTP response from a ExchangePortfolioSummaryWithResponse call
func ParseExchangePortfolioSummaryResponse(rsp *http.Response) (*ExchangePortfolioSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExchangePortfolioSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Summary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevHistoryResponse parses an HTTP response from a DevHistoryWithResponse call
func ParseDevHistoryResponse(rsp *http.Response) (*DevHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest History
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevOrderbookExchangSeccodeResponse parses an HTTP response from a DevOrderbookExchangSeccodeWithResponse call
func ParseDevOrderbookExchangSeccodeResponse(rsp *http.Response) (*DevOrderbookExchangSeccodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevOrderbookExchangSeccodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Orderbook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskRatesResponse parses an HTTP response from a RiskRatesWithResponse call
func ParseRiskRatesResponse(rsp *http.Response) (*RiskRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RiskRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLocalTimeResponse parses an HTTP response from a LocalTimeWithResponse call
func ParseLocalTimeResponse(rsp *http.Response) (*LocalTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossResponse parses an HTTP response from a V2clientordersactionsstopLossWithResponse call
func ParseV2clientordersactionsstopLossResponse(rsp *http.Response) (*V2clientordersactionsstopLossResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossOrderIdResponse parses an HTTP response from a V2clientordersactionsstopLossOrderIdWithResponse call
func ParseV2clientordersactionsstopLossOrderIdResponse(rsp *http.Response) (*V2clientordersactionsstopLossOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossLimitResponse parses an HTTP response from a V2clientordersactionsstopLossLimitWithResponse call
func ParseV2clientordersactionsstopLossLimitResponse(rsp *http.Response) (*V2clientordersactionsstopLossLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsstopLossLimitOrderIdResponse parses an HTTP response from a V2clientordersactionsstopLossLimitOrderIdWithResponse call
func ParseV2clientordersactionsstopLossLimitOrderIdResponse(rsp *http.Response) (*V2clientordersactionsstopLossLimitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsstopLossLimitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitResponse parses an HTTP response from a V2clientordersactionstakeProfitWithResponse call
func ParseV2clientordersactionstakeProfitResponse(rsp *http.Response) (*V2clientordersactionstakeProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitOrderIdResponse parses an HTTP response from a V2clientordersactionstakeProfitOrderIdWithResponse call
func ParseV2clientordersactionstakeProfitOrderIdResponse(rsp *http.Response) (*V2clientordersactionstakeProfitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitLimitResponse parses an HTTP response from a V2clientordersactionstakeProfitLimitWithResponse call
func ParseV2clientordersactionstakeProfitLimitResponse(rsp *http.Response) (*V2clientordersactionstakeProfitLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OrdersActions400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionstakeProfitLimitOrderIdResponse parses an HTTP response from a V2clientordersactionstakeProfitLimitOrderIdWithResponse call
func ParseV2clientordersactionstakeProfitLimitOrderIdResponse(rsp *http.Response) (*V2clientordersactionstakeProfitLimitOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionstakeProfitLimitOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsStopProfitLoss
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV2clientordersactionsOrderIdResponse parses an HTTP response from a V2clientordersactionsOrderIdWithResponse call
func ParseV2clientordersactionsOrderIdResponse(rsp *http.Response) (*V2clientordersactionsOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2clientordersactionsOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrdersActionsDeleteOrderId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdUnsubscribeResponse parses an HTTP response from a WSProdUnsubscribeWithResponse call
func ParseWSProdUnsubscribeResponse(rsp *http.Response) (*WSProdUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdStopOrdersSubscribeResponse parses an HTTP response from a WSProdStopOrdersSubscribeWithResponse call
func ParseWSProdStopOrdersSubscribeResponse(rsp *http.Response) (*WSProdStopOrdersSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdStopOrdersSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResStopOrdersGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdSummariesGetAndSubscribeV2Response parses an HTTP response from a WSProdSummariesGetAndSubscribeV2WithResponse call
func ParseWSProdSummariesGetAndSubscribeV2Response(rsp *http.Response) (*WSProdSummariesGetAndSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdSummariesGetAndSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResSummariesGetAndSubscribeV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdTradesSubscribeResponse parses an HTTP response from a WSProdTradesSubscribeWithResponse call
func ParseWSProdTradesSubscribeResponse(rsp *http.Response) (*WSProdTradesSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdTradesSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResTradesGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdPositionsSubscribeResponse parses an HTTP response from a WSProdPositionsSubscribeWithResponse call
func ParseWSProdPositionsSubscribeResponse(rsp *http.Response) (*WSProdPositionsSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdPositionsSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResPositionsGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdQuotesSubscribeResponse parses an HTTP response from a WSProdQuotesSubscribeWithResponse call
func ParseWSProdQuotesSubscribeResponse(rsp *http.Response) (*WSProdQuotesSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdQuotesSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResQuotesSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdBarsGetResponse parses an HTTP response from a WSProdBarsGetWithResponse call
func ParseWSProdBarsGetResponse(rsp *http.Response) (*WSProdBarsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdBarsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResBarsGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdOrderBookResponse parses an HTTP response from a WSProdOrderBookWithResponse call
func ParseWSProdOrderBookResponse(rsp *http.Response) (*WSProdOrderBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdOrderBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResOrderBookGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdRisksGetAndSubscribeResponse parses an HTTP response from a WSProdRisksGetAndSubscribeWithResponse call
func ParseWSProdRisksGetAndSubscribeResponse(rsp *http.Response) (*WSProdRisksGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdRisksGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResRisksGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdOrdersSubscribeResponse parses an HTTP response from a WSProdOrdersSubscribeWithResponse call
func ParseWSProdOrdersSubscribeResponse(rsp *http.Response) (*WSProdOrdersSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdOrdersSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResOrdersGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdSpectraRisksGetAndSubscribeResponse parses an HTTP response from a WSProdSpectraRisksGetAndSubscribeWithResponse call
func ParseWSProdSpectraRisksGetAndSubscribeResponse(rsp *http.Response) (*WSProdSpectraRisksGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdSpectraRisksGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResSpectraRisksGetAndSubscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdStopOrdersSubscribeV2Response parses an HTTP response from a WSProdStopOrdersSubscribeV2WithResponse call
func ParseWSProdStopOrdersSubscribeV2Response(rsp *http.Response) (*WSProdStopOrdersSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdStopOrdersSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest WsResStopOrdersGetAndSubscribeWarp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdAllTradesGetAndSubscribeResponse parses an HTTP response from a WSProdAllTradesGetAndSubscribeWithResponse call
func ParseWSProdAllTradesGetAndSubscribeResponse(rsp *http.Response) (*WSProdAllTradesGetAndSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdAllTradesGetAndSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 100:
		var dest Alltrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON100 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWSProdInstrumentsGetAndSubscribeV2Response parses an HTTP response from a WSProdInstrumentsGetAndSubscribeV2WithResponse call
func ParseWSProdInstrumentsGetAndSubscribeV2Response(rsp *http.Response) (*WSProdInstrumentsGetAndSubscribeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WSProdInstrumentsGetAndSubscribeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WsResHandledSuccessfully
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
